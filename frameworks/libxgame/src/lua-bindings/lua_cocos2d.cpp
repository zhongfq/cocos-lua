//
// AUTO BUILD, DON'T MODIFY!
//
#include "lua-bindings/lua_cocos2d.h"
#include "lua-bindings/lua_conv.h"
#include "lua-bindings/lua_conv_manual.h"
#include "lua-bindings/LuaCocosAdapter.h"
#include "xgame/xlua.h"
#include "xgame/xruntime.h"
#include "cocos2d.h"
#include "ui/CocosGUI.h"
#include "audio/include/AudioEngine.h"
#include "audio/include/SimpleAudioEngine.h"
#include "vr/CCVRGenericRenderer.h"
#include "vr/CCVRGenericHeadTracker.h"

static const std::string makeScheduleCallbackTag(const std::string &key)
{
    return "schedule." + key;
}

static int _cocos2d_UserDefault___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::UserDefault *)olua_toobj(L, 1, "cc.UserDefault");
    olua_push_cppobj(L, self, "cc.UserDefault");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_UserDefault_deleteValueForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // void deleteValueForKey(const char *key)
    self->deleteValueForKey(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_UserDefault_destroyInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static void destroyInstance()
    cocos2d::UserDefault::destroyInstance();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_UserDefault_flush(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");

    // void flush()
    self->flush();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_UserDefault_getBoolForKey1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // bool getBoolForKey(const char *key)
    bool ret = (bool)self->getBoolForKey(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getBoolForKey2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    bool arg2 = false;       /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool getBoolForKey(const char *key, bool defaultValue)
    bool ret = (bool)self->getBoolForKey(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getBoolForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_string(L, 2))) {
            // bool getBoolForKey(const char *key)
            return _cocos2d_UserDefault_getBoolForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // bool getBoolForKey(const char *key, bool defaultValue)
            return _cocos2d_UserDefault_getBoolForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getBoolForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getDataForKey1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Data getDataForKey(const char *key)
    cocos2d::Data ret = (cocos2d::Data)self->getDataForKey(arg1);
    int num_ret = manual_olua_push_cocos2d_Data(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getDataForKey2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    cocos2d::Data arg2;       /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    manual_olua_check_cocos2d_Data(L, 3, &arg2);

    // cocos2d::Data getDataForKey(const char *key, const cocos2d::Data &defaultValue)
    cocos2d::Data ret = (cocos2d::Data)self->getDataForKey(arg1, arg2);
    int num_ret = manual_olua_push_cocos2d_Data(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getDataForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_string(L, 2))) {
            // cocos2d::Data getDataForKey(const char *key)
            return _cocos2d_UserDefault_getDataForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (manual_olua_is_cocos2d_Data(L, 3))) {
            // cocos2d::Data getDataForKey(const char *key, const cocos2d::Data &defaultValue)
            return _cocos2d_UserDefault_getDataForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getDataForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getDoubleForKey1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // double getDoubleForKey(const char *key)
    double ret = (double)self->getDoubleForKey(arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getDoubleForKey2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    lua_Number arg2 = 0;       /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // double getDoubleForKey(const char *key, double defaultValue)
    double ret = (double)self->getDoubleForKey(arg1, (double)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getDoubleForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_string(L, 2))) {
            // double getDoubleForKey(const char *key)
            return _cocos2d_UserDefault_getDoubleForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (olua_is_number(L, 3))) {
            // double getDoubleForKey(const char *key, double defaultValue)
            return _cocos2d_UserDefault_getDoubleForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getDoubleForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getFloatForKey1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // float getFloatForKey(const char *key)
    float ret = (float)self->getFloatForKey(arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getFloatForKey2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    lua_Number arg2 = 0;       /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // float getFloatForKey(const char *key, float defaultValue)
    float ret = (float)self->getFloatForKey(arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getFloatForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_string(L, 2))) {
            // float getFloatForKey(const char *key)
            return _cocos2d_UserDefault_getFloatForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (olua_is_number(L, 3))) {
            // float getFloatForKey(const char *key, float defaultValue)
            return _cocos2d_UserDefault_getFloatForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getFloatForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::UserDefault *getInstance()
    cocos2d::UserDefault *ret = (cocos2d::UserDefault *)cocos2d::UserDefault::getInstance();
    int num_ret = olua_push_cppobj(L, ret, "cc.UserDefault");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getIntegerForKey1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // int getIntegerForKey(const char *key)
    int ret = (int)self->getIntegerForKey(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getIntegerForKey2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    lua_Integer arg2 = 0;       /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // int getIntegerForKey(const char *key, int defaultValue)
    int ret = (int)self->getIntegerForKey(arg1, (int)arg2);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getIntegerForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_string(L, 2))) {
            // int getIntegerForKey(const char *key)
            return _cocos2d_UserDefault_getIntegerForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (olua_is_int(L, 3))) {
            // int getIntegerForKey(const char *key, int defaultValue)
            return _cocos2d_UserDefault_getIntegerForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getIntegerForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getStringForKey1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // std::string getStringForKey(const char *key)
    std::string ret = (std::string)self->getStringForKey(arg1);
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getStringForKey2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    std::string arg2;       /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // std::string getStringForKey(const char *key, const std::string &defaultValue)
    std::string ret = (std::string)self->getStringForKey(arg1, arg2);
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_getStringForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_string(L, 2))) {
            // std::string getStringForKey(const char *key)
            return _cocos2d_UserDefault_getStringForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (olua_is_std_string(L, 3))) {
            // std::string getStringForKey(const char *key, const std::string &defaultValue)
            return _cocos2d_UserDefault_getStringForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getStringForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getXMLFilePath(lua_State *L)
{
    olua_startinvoke(L);

    // static const std::string &getXMLFilePath()
    const std::string &ret = (const std::string &)cocos2d::UserDefault::getXMLFilePath();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_isXMLFileExist(lua_State *L)
{
    olua_startinvoke(L);

    // static bool isXMLFileExist()
    bool ret = (bool)cocos2d::UserDefault::isXMLFileExist();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_UserDefault_setBoolForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    bool arg2 = false;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void setBoolForKey(const char *key, bool value)
    self->setBoolForKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_UserDefault_setDataForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    cocos2d::Data arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    manual_olua_check_cocos2d_Data(L, 3, &arg2);

    // void setDataForKey(const char *key, const cocos2d::Data &value)
    self->setDataForKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_UserDefault_setDoubleForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    lua_Number arg2 = 0;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setDoubleForKey(const char *key, double value)
    self->setDoubleForKey(arg1, (double)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_UserDefault_setFloatForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    lua_Number arg2 = 0;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setFloatForKey(const char *key, float value)
    self->setFloatForKey(arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_UserDefault_setIntegerForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    lua_Integer arg2 = 0;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setIntegerForKey(const char *key, int value)
    self->setIntegerForKey(arg1, (int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_UserDefault_setStringForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    std::string arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void setStringForKey(const char *key, const std::string &value)
    self->setStringForKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_UserDefault(lua_State *L)
{
    oluacls_class(L, "cc.UserDefault", nullptr);
    oluacls_func(L, "__move", _cocos2d_UserDefault___move);
    oluacls_func(L, "deleteValueForKey", _cocos2d_UserDefault_deleteValueForKey);
    oluacls_func(L, "destroyInstance", _cocos2d_UserDefault_destroyInstance);
    oluacls_func(L, "flush", _cocos2d_UserDefault_flush);
    oluacls_func(L, "getBoolForKey", _cocos2d_UserDefault_getBoolForKey);
    oluacls_func(L, "getDataForKey", _cocos2d_UserDefault_getDataForKey);
    oluacls_func(L, "getDoubleForKey", _cocos2d_UserDefault_getDoubleForKey);
    oluacls_func(L, "getFloatForKey", _cocos2d_UserDefault_getFloatForKey);
    oluacls_func(L, "getInstance", _cocos2d_UserDefault_getInstance);
    oluacls_func(L, "getIntegerForKey", _cocos2d_UserDefault_getIntegerForKey);
    oluacls_func(L, "getStringForKey", _cocos2d_UserDefault_getStringForKey);
    oluacls_func(L, "getXMLFilePath", _cocos2d_UserDefault_getXMLFilePath);
    oluacls_func(L, "isXMLFileExist", _cocos2d_UserDefault_isXMLFileExist);
    oluacls_func(L, "setBoolForKey", _cocos2d_UserDefault_setBoolForKey);
    oluacls_func(L, "setDataForKey", _cocos2d_UserDefault_setDataForKey);
    oluacls_func(L, "setDoubleForKey", _cocos2d_UserDefault_setDoubleForKey);
    oluacls_func(L, "setFloatForKey", _cocos2d_UserDefault_setFloatForKey);
    oluacls_func(L, "setIntegerForKey", _cocos2d_UserDefault_setIntegerForKey);
    oluacls_func(L, "setStringForKey", _cocos2d_UserDefault_setStringForKey);
    oluacls_prop(L, "instance", _cocos2d_UserDefault_getInstance, nullptr);
    oluacls_prop(L, "xmlFileExist", _cocos2d_UserDefault_isXMLFileExist, nullptr);
    oluacls_prop(L, "xmlFilePath", _cocos2d_UserDefault_getXMLFilePath, nullptr);

    olua_registerluatype<cocos2d::UserDefault>(L, "cc.UserDefault");

    return 1;
}

static int _cocos2d_Ref___gc(lua_State *L)
{
    olua_startinvoke(L);

    olua_endinvoke(L);

    return xlua_ccobjgc(L);
}

static int _cocos2d_Ref___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Ref *)olua_toobj(L, 1, "cc.Ref");
    olua_push_cppobj(L, self, "cc.Ref");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Ref_getReferenceCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Ref *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Ref");

    // unsigned int getReferenceCount()
    unsigned int ret = (unsigned int)self->getReferenceCount();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Ref(lua_State *L)
{
    oluacls_class(L, "cc.Ref", nullptr);
    oluacls_func(L, "__gc", _cocos2d_Ref___gc);
    oluacls_func(L, "__move", _cocos2d_Ref___move);
    oluacls_func(L, "getReferenceCount", _cocos2d_Ref_getReferenceCount);
    oluacls_prop(L, "referenceCount", _cocos2d_Ref_getReferenceCount, nullptr);

    olua_registerluatype<cocos2d::Ref>(L, "cc.Ref");

    return 1;
}

static int _cocos2d_Acceleration___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Acceleration *)olua_toobj(L, 1, "cc.Acceleration");
    olua_push_cppobj(L, self, "cc.Acceleration");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Acceleration_new(lua_State *L)
{
    olua_startinvoke(L);

    // Acceleration()
    cocos2d::Acceleration *ret = (cocos2d::Acceleration *)new cocos2d::Acceleration();
    int num_ret = olua_push_cppobj(L, ret, "cc.Acceleration");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Acceleration_get_timestamp(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Acceleration");

    // double timestamp
    double ret = (double)self->timestamp;
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Acceleration_set_timestamp(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;
    lua_Number arg1 = 0;       /** timestamp */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Acceleration");
    olua_check_number(L, 2, &arg1);

    // double timestamp
    self->timestamp = (double)arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Acceleration_get_x(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Acceleration");

    // double x
    double ret = (double)self->x;
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Acceleration_set_x(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;
    lua_Number arg1 = 0;       /** x */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Acceleration");
    olua_check_number(L, 2, &arg1);

    // double x
    self->x = (double)arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Acceleration_get_y(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Acceleration");

    // double y
    double ret = (double)self->y;
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Acceleration_set_y(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;
    lua_Number arg1 = 0;       /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Acceleration");
    olua_check_number(L, 2, &arg1);

    // double y
    self->y = (double)arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Acceleration_get_z(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Acceleration");

    // double z
    double ret = (double)self->z;
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Acceleration_set_z(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;
    lua_Number arg1 = 0;       /** z */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Acceleration");
    olua_check_number(L, 2, &arg1);

    // double z
    self->z = (double)arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Acceleration(lua_State *L)
{
    oluacls_class(L, "cc.Acceleration", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Acceleration___move);
    oluacls_func(L, "new", _cocos2d_Acceleration_new);
    oluacls_prop(L, "timestamp", _cocos2d_Acceleration_get_timestamp, _cocos2d_Acceleration_set_timestamp);
    oluacls_prop(L, "x", _cocos2d_Acceleration_get_x, _cocos2d_Acceleration_set_x);
    oluacls_prop(L, "y", _cocos2d_Acceleration_get_y, _cocos2d_Acceleration_set_y);
    oluacls_prop(L, "z", _cocos2d_Acceleration_get_z, _cocos2d_Acceleration_set_z);

    olua_registerluatype<cocos2d::Acceleration>(L, "cc.Acceleration");

    return 1;
}

static int luaopen_cocos2d_MATRIX_STACK_TYPE(lua_State *L)
{
    oluacls_class(L, "cc.MATRIX_STACK_TYPE", nullptr);
    oluacls_const_integer(L, "MATRIX_STACK_MODELVIEW", (lua_Integer)cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_MODELVIEW);
    oluacls_const_integer(L, "MATRIX_STACK_PROJECTION", (lua_Integer)cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_PROJECTION);
    oluacls_const_integer(L, "MATRIX_STACK_TEXTURE", (lua_Integer)cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_TEXTURE);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_Director_Projection(lua_State *L)
{
    oluacls_class(L, "cc.Director.Projection", nullptr);
    oluacls_const_integer(L, "CUSTOM", (lua_Integer)cocos2d::Director::Projection::CUSTOM);
    oluacls_const_integer(L, "DEFAULT", (lua_Integer)cocos2d::Director::Projection::DEFAULT);
    oluacls_const_integer(L, "_2D", (lua_Integer)cocos2d::Director::Projection::_2D);
    oluacls_const_integer(L, "_3D", (lua_Integer)cocos2d::Director::Projection::_3D);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_Director___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Director *)olua_toobj(L, 1, "cc.Director");
    olua_push_cppobj(L, self, "cc.Director");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Director_convertToGL1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToGL(const cocos2d::Vec2 &point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToGL(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_convertToGL2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToGL(@pack const cocos2d::Vec2 &point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToGL(arg1);
    int num_ret = auto_olua_unpack_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_convertToGL(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToGL(const cocos2d::Vec2 &point)
            return _cocos2d_Director_convertToGL1(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_ispack_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToGL(@pack const cocos2d::Vec2 &point)
            return _cocos2d_Director_convertToGL2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::convertToGL' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Director_convertToUI1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToUI(const cocos2d::Vec2 &point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToUI(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_convertToUI2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToUI(@pack const cocos2d::Vec2 &point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToUI(arg1);
    int num_ret = auto_olua_unpack_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_convertToUI(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToUI(const cocos2d::Vec2 &point)
            return _cocos2d_Director_convertToUI1(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_ispack_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToUI(@pack const cocos2d::Vec2 &point)
            return _cocos2d_Director_convertToUI2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::convertToUI' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Director_drawScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void drawScene()
    self->drawScene();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_end(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void end()
    self->end();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_getActionManager(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single actionManager) cocos2d::ActionManager *getActionManager()
    cocos2d::ActionManager *ret = (cocos2d::ActionManager *)self->getActionManager();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionManager");

    // inject code after call
    olua_singleref(L, 1, "actionManager", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getAnimationInterval(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getAnimationInterval()
    float ret = (float)self->getAnimationInterval();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // const cocos2d::Color4F &getClearColor()
    const cocos2d::Color4F &ret = (const cocos2d::Color4F &)self->getClearColor();
    int num_ret = manual_olua_push_cocos2d_Color4F(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getContentScaleFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getContentScaleFactor()
    float ret = (float)self->getContentScaleFactor();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getDeltaTime(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getDeltaTime()
    float ret = (float)self->getDeltaTime();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getEventDispatcher(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single eventDispatcher) cocos2d::EventDispatcher *getEventDispatcher()
    cocos2d::EventDispatcher *ret = (cocos2d::EventDispatcher *)self->getEventDispatcher();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventDispatcher");

    // inject code after call
    olua_singleref(L, 1, "eventDispatcher", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getFrameRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getFrameRate()
    float ret = (float)self->getFrameRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Director *getInstance()
    cocos2d::Director *ret = (cocos2d::Director *)cocos2d::Director::getInstance();
    int num_ret = olua_push_cppobj(L, ret, "cc.Director");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // const cocos2d::Mat4 &getMatrix(cocos2d::MATRIX_STACK_TYPE type)
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getMatrix((cocos2d::MATRIX_STACK_TYPE)arg1);
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getNotificationNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single notificationNode) cocos2d::Node *getNotificationNode()
    cocos2d::Node *ret = (cocos2d::Node *)self->getNotificationNode();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    // inject code after call
    olua_singleref(L, 1, "notificationNode", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getOpenGLView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single openGLView) cocos2d::GLView *getOpenGLView()
    cocos2d::GLView *ret = (cocos2d::GLView *)self->getOpenGLView();
    int num_ret = olua_push_cppobj(L, ret, "cc.GLView");

    // inject code after call
    olua_singleref(L, 1, "openGLView", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getProjection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // cocos2d::Director::Projection getProjection()
    cocos2d::Director::Projection ret = (cocos2d::Director::Projection)self->getProjection();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getProjectionMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // const cocos2d::Mat4 &getProjectionMatrix(size_t index)
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getProjectionMatrix((size_t)arg1);
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getProjectionMatrixStackSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // size_t getProjectionMatrixStackSize()
    size_t ret = (size_t)self->getProjectionMatrixStackSize();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getRenderer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single renderer) cocos2d::Renderer *getRenderer()
    cocos2d::Renderer *ret = (cocos2d::Renderer *)self->getRenderer();
    int num_ret = olua_push_cppobj(L, ret, "cc.Renderer");

    // inject code after call
    olua_singleref(L, 1, "renderer", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getRunningScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(map scenes) cocos2d::Scene *getRunningScene()
    cocos2d::Scene *ret = (cocos2d::Scene *)self->getRunningScene();
    int num_ret = olua_push_cppobj(L, ret, "cc.Scene");

    // inject code after call
    olua_mapref(L, 1, "scenes", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getSafeAreaRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // cocos2d::Rect getSafeAreaRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getSafeAreaRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getScheduler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single scheduler) cocos2d::Scheduler *getScheduler()
    cocos2d::Scheduler *ret = (cocos2d::Scheduler *)self->getScheduler();
    int num_ret = olua_push_cppobj(L, ret, "cc.Scheduler");

    // inject code after call
    olua_singleref(L, 1, "scheduler", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getSecondsPerFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getSecondsPerFrame()
    float ret = (float)self->getSecondsPerFrame();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getTextureCache(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single textureCache) cocos2d::TextureCache *getTextureCache()
    cocos2d::TextureCache *ret = (cocos2d::TextureCache *)self->getTextureCache();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureCache");

    // inject code after call
    olua_singleref(L, 1, "textureCache", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getTotalFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // unsigned int getTotalFrames()
    unsigned int ret = (unsigned int)self->getTotalFrames();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getVisibleOrigin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // cocos2d::Vec2 getVisibleOrigin()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getVisibleOrigin();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getVisibleSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // cocos2d::Size getVisibleSize()
    cocos2d::Size ret = (cocos2d::Size)self->getVisibleSize();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getWinSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // const cocos2d::Size &getWinSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getWinSize();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getWinSizeInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // cocos2d::Size getWinSizeInPixels()
    cocos2d::Size ret = (cocos2d::Size)self->getWinSizeInPixels();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_getZEye(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getZEye()
    float ret = (float)self->getZEye();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool init()
    bool ret = (bool)self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_initProjectionMatrixStack(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** stackCount */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void initProjectionMatrixStack(size_t stackCount)
    self->initProjectionMatrixStack((size_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_isDisplayStats(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isDisplayStats()
    bool ret = (bool)self->isDisplayStats();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_isNextDeltaTimeZero(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isNextDeltaTimeZero()
    bool ret = (bool)self->isNextDeltaTimeZero();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_isPaused(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isPaused()
    bool ret = (bool)self->isPaused();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_isSendCleanupToScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isSendCleanupToScene()
    bool ret = (bool)self->isSendCleanupToScene();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_isValid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isValid()
    bool ret = (bool)self->isValid();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_loadIdentityMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void loadIdentityMatrix(cocos2d::MATRIX_STACK_TYPE type)
    self->loadIdentityMatrix((cocos2d::MATRIX_STACK_TYPE)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_loadMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */
    cocos2d::Mat4 arg2;       /** mat */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);
    manual_olua_check_cocos2d_Mat4(L, 3, &arg2);

    // void loadMatrix(cocos2d::MATRIX_STACK_TYPE type, const cocos2d::Mat4 &mat)
    self->loadMatrix((cocos2d::MATRIX_STACK_TYPE)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_loadProjectionIdentityMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void loadProjectionIdentityMatrix(size_t index)
    self->loadProjectionIdentityMatrix((size_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_loadProjectionMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Mat4 arg1;       /** mat */
    lua_Unsigned arg2 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void loadProjectionMatrix(const cocos2d::Mat4 &mat, size_t index)
    self->loadProjectionMatrix(arg1, (size_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_mainLoop1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void mainLoop()
    self->mainLoop();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_mainLoop2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Number arg1 = 0;       /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void mainLoop(float dt)
    self->mainLoop((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_mainLoop(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // void mainLoop()
        return _cocos2d_Director_mainLoop1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_number(L, 2))) {
            // void mainLoop(float dt)
            return _cocos2d_Director_mainLoop2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::mainLoop' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Director_multiplyMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */
    cocos2d::Mat4 arg2;       /** mat */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);
    manual_olua_check_cocos2d_Mat4(L, 3, &arg2);

    // void multiplyMatrix(cocos2d::MATRIX_STACK_TYPE type, const cocos2d::Mat4 &mat)
    self->multiplyMatrix((cocos2d::MATRIX_STACK_TYPE)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_multiplyProjectionMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Mat4 arg1;       /** mat */
    lua_Unsigned arg2 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void multiplyProjectionMatrix(const cocos2d::Mat4 &mat, size_t index)
    self->multiplyProjectionMatrix(arg1, (size_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_new(lua_State *L)
{
    olua_startinvoke(L);

    // Director()
    cocos2d::Director *ret = (cocos2d::Director *)new cocos2d::Director();
    int num_ret = olua_push_cppobj(L, ret, "cc.Director");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_pause(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void pause()
    self->pause();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_popMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void popMatrix(cocos2d::MATRIX_STACK_TYPE type)
    self->popMatrix((cocos2d::MATRIX_STACK_TYPE)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_popProjectionMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void popProjectionMatrix(size_t index)
    self->popProjectionMatrix((size_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_popScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // inject code before call
    olua_startcmpunref(L, 1, "scenes");

    // @unref(cmp scenes) void popScene()
    self->popScene();

    // inject code after call
    olua_endcmpunref(L, 1, "scenes");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_popToRootScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // inject code before call
    olua_startcmpunref(L, 1, "scenes");

    // @unref(cmp scenes) void popToRootScene()
    self->popToRootScene();

    // inject code after call
    olua_endcmpunref(L, 1, "scenes");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_popToSceneStackLevel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Integer arg1 = 0;       /** level */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_int(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "scenes");

    // @unref(cmp scenes) void popToSceneStackLevel(int level)
    self->popToSceneStackLevel((int)arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "scenes");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_purgeCachedData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void purgeCachedData()
    self->purgeCachedData();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_pushMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void pushMatrix(cocos2d::MATRIX_STACK_TYPE type)
    self->pushMatrix((cocos2d::MATRIX_STACK_TYPE)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_pushProjectionMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void pushProjectionMatrix(size_t index)
    self->pushProjectionMatrix((size_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_pushScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");

    // void pushScene(@ref(map scenes) cocos2d::Scene *scene)
    self->pushScene(arg1);

    // inject code after call
    olua_mapref(L, 1, "scenes", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_replaceScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");

    // inject code before call
    olua_startcmpunref(L, 1, "scenes");

    // @unref(cmp scenes) void replaceScene(@ref(map scenes) cocos2d::Scene *scene)
    self->replaceScene(arg1);

    // inject code after call
    olua_mapref(L, 1, "scenes", 2);
    olua_endcmpunref(L, 1, "scenes");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_resetMatrixStack(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void resetMatrixStack()
    self->resetMatrixStack();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_restart(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void restart()
    self->restart();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_resume(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void resume()
    self->resume();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_runWithScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");

    // void runWithScene(@ref(map scenes) cocos2d::Scene *scene)
    self->runWithScene(arg1);

    // inject code after call
    olua_mapref(L, 1, "scenes", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setActionManager(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::ActionManager *arg1 = nullptr;       /** actionManager */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionManager");

    // void setActionManager(@ref(single actionManager) cocos2d::ActionManager *actionManager)
    self->setActionManager(arg1);

    // inject code after call
    olua_singleref(L, 1, "actionManager", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setAlphaBlending(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;       /** on */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setAlphaBlending(bool on)
    self->setAlphaBlending(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setAnimationInterval(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Number arg1 = 0;       /** interval */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void setAnimationInterval(float interval)
    self->setAnimationInterval((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Color4F arg1;       /** clearColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    manual_olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setClearColor(const cocos2d::Color4F &clearColor)
    self->setClearColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setContentScaleFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Number arg1 = 0;       /** scaleFactor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void setContentScaleFactor(float scaleFactor)
    self->setContentScaleFactor((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setDefaultValues(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void setDefaultValues()
    self->setDefaultValues();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setDepthTest(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;       /** on */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setDepthTest(bool on)
    self->setDepthTest(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setDisplayStats(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;       /** displayStats */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setDisplayStats(bool displayStats)
    self->setDisplayStats(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setEventDispatcher(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::EventDispatcher *arg1 = nullptr;       /** dispatcher */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventDispatcher");

    // void setEventDispatcher(@ref(single eventDispatcher) cocos2d::EventDispatcher *dispatcher)
    self->setEventDispatcher(arg1);

    // inject code after call
    olua_singleref(L, 1, "eventDispatcher", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setGLDefaultValues(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void setGLDefaultValues()
    self->setGLDefaultValues();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setNextDeltaTimeZero(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;       /** nextDeltaTimeZero */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setNextDeltaTimeZero(bool nextDeltaTimeZero)
    self->setNextDeltaTimeZero(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setNotificationNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** node */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setNotificationNode(@ref(single notificationNode) cocos2d::Node *node)
    self->setNotificationNode(arg1);

    // inject code after call
    olua_singleref(L, 1, "notificationNode", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setOpenGLView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::GLView *arg1 = nullptr;       /** openGLView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLView");

    // void setOpenGLView(@ref(single openGLView) cocos2d::GLView *openGLView)
    self->setOpenGLView(arg1);

    // inject code after call
    olua_singleref(L, 1, "openGLView", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setProjection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;       /** projection */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void setProjection(cocos2d::Director::Projection projection)
    self->setProjection((cocos2d::Director::Projection)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setScheduler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Scheduler *arg1 = nullptr;       /** scheduler */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scheduler");

    // void setScheduler(@ref(single scheduler) cocos2d::Scheduler *scheduler)
    self->setScheduler(arg1);

    // inject code after call
    olua_singleref(L, 1, "scheduler", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_setViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void setViewport()
    self->setViewport();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_startAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void startAnimation()
    self->startAnimation();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_stopAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void stopAnimation()
    self->stopAnimation();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_get_EVENT_AFTER_DRAW(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_AFTER_DRAW
    const char *ret = (const char *)cocos2d::Director::EVENT_AFTER_DRAW;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_set_EVENT_AFTER_DRAW(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_AFTER_DRAW */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_AFTER_DRAW
    cocos2d::Director::EVENT_AFTER_DRAW = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_get_EVENT_AFTER_SET_NEXT_SCENE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_AFTER_SET_NEXT_SCENE
    const char *ret = (const char *)cocos2d::Director::EVENT_AFTER_SET_NEXT_SCENE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_set_EVENT_AFTER_SET_NEXT_SCENE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_AFTER_SET_NEXT_SCENE */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_AFTER_SET_NEXT_SCENE
    cocos2d::Director::EVENT_AFTER_SET_NEXT_SCENE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_get_EVENT_AFTER_UPDATE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_AFTER_UPDATE
    const char *ret = (const char *)cocos2d::Director::EVENT_AFTER_UPDATE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_set_EVENT_AFTER_UPDATE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_AFTER_UPDATE */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_AFTER_UPDATE
    cocos2d::Director::EVENT_AFTER_UPDATE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_get_EVENT_AFTER_VISIT(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_AFTER_VISIT
    const char *ret = (const char *)cocos2d::Director::EVENT_AFTER_VISIT;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_set_EVENT_AFTER_VISIT(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_AFTER_VISIT */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_AFTER_VISIT
    cocos2d::Director::EVENT_AFTER_VISIT = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_get_EVENT_BEFORE_DRAW(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_BEFORE_DRAW
    const char *ret = (const char *)cocos2d::Director::EVENT_BEFORE_DRAW;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_set_EVENT_BEFORE_DRAW(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_BEFORE_DRAW */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_BEFORE_DRAW
    cocos2d::Director::EVENT_BEFORE_DRAW = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_get_EVENT_BEFORE_SET_NEXT_SCENE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_BEFORE_SET_NEXT_SCENE
    const char *ret = (const char *)cocos2d::Director::EVENT_BEFORE_SET_NEXT_SCENE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_set_EVENT_BEFORE_SET_NEXT_SCENE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_BEFORE_SET_NEXT_SCENE */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_BEFORE_SET_NEXT_SCENE
    cocos2d::Director::EVENT_BEFORE_SET_NEXT_SCENE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_get_EVENT_BEFORE_UPDATE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_BEFORE_UPDATE
    const char *ret = (const char *)cocos2d::Director::EVENT_BEFORE_UPDATE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_set_EVENT_BEFORE_UPDATE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_BEFORE_UPDATE */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_BEFORE_UPDATE
    cocos2d::Director::EVENT_BEFORE_UPDATE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_get_EVENT_PROJECTION_CHANGED(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_PROJECTION_CHANGED
    const char *ret = (const char *)cocos2d::Director::EVENT_PROJECTION_CHANGED;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_set_EVENT_PROJECTION_CHANGED(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_PROJECTION_CHANGED */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_PROJECTION_CHANGED
    cocos2d::Director::EVENT_PROJECTION_CHANGED = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Director_get_EVENT_RESET(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_RESET
    const char *ret = (const char *)cocos2d::Director::EVENT_RESET;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Director_set_EVENT_RESET(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_RESET */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_RESET
    cocos2d::Director::EVENT_RESET = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Director(lua_State *L)
{
    oluacls_class(L, "cc.Director", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Director___move);
    oluacls_func(L, "convertToGL", _cocos2d_Director_convertToGL);
    oluacls_func(L, "convertToUI", _cocos2d_Director_convertToUI);
    oluacls_func(L, "drawScene", _cocos2d_Director_drawScene);
    oluacls_func(L, "end", _cocos2d_Director_end);
    oluacls_func(L, "getActionManager", _cocos2d_Director_getActionManager);
    oluacls_func(L, "getAnimationInterval", _cocos2d_Director_getAnimationInterval);
    oluacls_func(L, "getClearColor", _cocos2d_Director_getClearColor);
    oluacls_func(L, "getContentScaleFactor", _cocos2d_Director_getContentScaleFactor);
    oluacls_func(L, "getDeltaTime", _cocos2d_Director_getDeltaTime);
    oluacls_func(L, "getEventDispatcher", _cocos2d_Director_getEventDispatcher);
    oluacls_func(L, "getFrameRate", _cocos2d_Director_getFrameRate);
    oluacls_func(L, "getInstance", _cocos2d_Director_getInstance);
    oluacls_func(L, "getMatrix", _cocos2d_Director_getMatrix);
    oluacls_func(L, "getNotificationNode", _cocos2d_Director_getNotificationNode);
    oluacls_func(L, "getOpenGLView", _cocos2d_Director_getOpenGLView);
    oluacls_func(L, "getProjection", _cocos2d_Director_getProjection);
    oluacls_func(L, "getProjectionMatrix", _cocos2d_Director_getProjectionMatrix);
    oluacls_func(L, "getProjectionMatrixStackSize", _cocos2d_Director_getProjectionMatrixStackSize);
    oluacls_func(L, "getRenderer", _cocos2d_Director_getRenderer);
    oluacls_func(L, "getRunningScene", _cocos2d_Director_getRunningScene);
    oluacls_func(L, "getSafeAreaRect", _cocos2d_Director_getSafeAreaRect);
    oluacls_func(L, "getScheduler", _cocos2d_Director_getScheduler);
    oluacls_func(L, "getSecondsPerFrame", _cocos2d_Director_getSecondsPerFrame);
    oluacls_func(L, "getTextureCache", _cocos2d_Director_getTextureCache);
    oluacls_func(L, "getTotalFrames", _cocos2d_Director_getTotalFrames);
    oluacls_func(L, "getVisibleOrigin", _cocos2d_Director_getVisibleOrigin);
    oluacls_func(L, "getVisibleSize", _cocos2d_Director_getVisibleSize);
    oluacls_func(L, "getWinSize", _cocos2d_Director_getWinSize);
    oluacls_func(L, "getWinSizeInPixels", _cocos2d_Director_getWinSizeInPixels);
    oluacls_func(L, "getZEye", _cocos2d_Director_getZEye);
    oluacls_func(L, "init", _cocos2d_Director_init);
    oluacls_func(L, "initProjectionMatrixStack", _cocos2d_Director_initProjectionMatrixStack);
    oluacls_func(L, "isDisplayStats", _cocos2d_Director_isDisplayStats);
    oluacls_func(L, "isNextDeltaTimeZero", _cocos2d_Director_isNextDeltaTimeZero);
    oluacls_func(L, "isPaused", _cocos2d_Director_isPaused);
    oluacls_func(L, "isSendCleanupToScene", _cocos2d_Director_isSendCleanupToScene);
    oluacls_func(L, "isValid", _cocos2d_Director_isValid);
    oluacls_func(L, "loadIdentityMatrix", _cocos2d_Director_loadIdentityMatrix);
    oluacls_func(L, "loadMatrix", _cocos2d_Director_loadMatrix);
    oluacls_func(L, "loadProjectionIdentityMatrix", _cocos2d_Director_loadProjectionIdentityMatrix);
    oluacls_func(L, "loadProjectionMatrix", _cocos2d_Director_loadProjectionMatrix);
    oluacls_func(L, "mainLoop", _cocos2d_Director_mainLoop);
    oluacls_func(L, "multiplyMatrix", _cocos2d_Director_multiplyMatrix);
    oluacls_func(L, "multiplyProjectionMatrix", _cocos2d_Director_multiplyProjectionMatrix);
    oluacls_func(L, "new", _cocos2d_Director_new);
    oluacls_func(L, "pause", _cocos2d_Director_pause);
    oluacls_func(L, "popMatrix", _cocos2d_Director_popMatrix);
    oluacls_func(L, "popProjectionMatrix", _cocos2d_Director_popProjectionMatrix);
    oluacls_func(L, "popScene", _cocos2d_Director_popScene);
    oluacls_func(L, "popToRootScene", _cocos2d_Director_popToRootScene);
    oluacls_func(L, "popToSceneStackLevel", _cocos2d_Director_popToSceneStackLevel);
    oluacls_func(L, "purgeCachedData", _cocos2d_Director_purgeCachedData);
    oluacls_func(L, "pushMatrix", _cocos2d_Director_pushMatrix);
    oluacls_func(L, "pushProjectionMatrix", _cocos2d_Director_pushProjectionMatrix);
    oluacls_func(L, "pushScene", _cocos2d_Director_pushScene);
    oluacls_func(L, "replaceScene", _cocos2d_Director_replaceScene);
    oluacls_func(L, "resetMatrixStack", _cocos2d_Director_resetMatrixStack);
    oluacls_func(L, "restart", _cocos2d_Director_restart);
    oluacls_func(L, "resume", _cocos2d_Director_resume);
    oluacls_func(L, "runWithScene", _cocos2d_Director_runWithScene);
    oluacls_func(L, "setActionManager", _cocos2d_Director_setActionManager);
    oluacls_func(L, "setAlphaBlending", _cocos2d_Director_setAlphaBlending);
    oluacls_func(L, "setAnimationInterval", _cocos2d_Director_setAnimationInterval);
    oluacls_func(L, "setClearColor", _cocos2d_Director_setClearColor);
    oluacls_func(L, "setContentScaleFactor", _cocos2d_Director_setContentScaleFactor);
    oluacls_func(L, "setDefaultValues", _cocos2d_Director_setDefaultValues);
    oluacls_func(L, "setDepthTest", _cocos2d_Director_setDepthTest);
    oluacls_func(L, "setDisplayStats", _cocos2d_Director_setDisplayStats);
    oluacls_func(L, "setEventDispatcher", _cocos2d_Director_setEventDispatcher);
    oluacls_func(L, "setGLDefaultValues", _cocos2d_Director_setGLDefaultValues);
    oluacls_func(L, "setNextDeltaTimeZero", _cocos2d_Director_setNextDeltaTimeZero);
    oluacls_func(L, "setNotificationNode", _cocos2d_Director_setNotificationNode);
    oluacls_func(L, "setOpenGLView", _cocos2d_Director_setOpenGLView);
    oluacls_func(L, "setProjection", _cocos2d_Director_setProjection);
    oluacls_func(L, "setScheduler", _cocos2d_Director_setScheduler);
    oluacls_func(L, "setViewport", _cocos2d_Director_setViewport);
    oluacls_func(L, "startAnimation", _cocos2d_Director_startAnimation);
    oluacls_func(L, "stopAnimation", _cocos2d_Director_stopAnimation);
    oluacls_prop(L, "actionManager", _cocos2d_Director_getActionManager, _cocos2d_Director_setActionManager);
    oluacls_prop(L, "animationInterval", _cocos2d_Director_getAnimationInterval, _cocos2d_Director_setAnimationInterval);
    oluacls_prop(L, "clearColor", _cocos2d_Director_getClearColor, _cocos2d_Director_setClearColor);
    oluacls_prop(L, "contentScaleFactor", _cocos2d_Director_getContentScaleFactor, _cocos2d_Director_setContentScaleFactor);
    oluacls_prop(L, "deltaTime", _cocos2d_Director_getDeltaTime, nullptr);
    oluacls_prop(L, "displayStats", _cocos2d_Director_isDisplayStats, _cocos2d_Director_setDisplayStats);
    oluacls_prop(L, "eventDispatcher", _cocos2d_Director_getEventDispatcher, _cocos2d_Director_setEventDispatcher);
    oluacls_prop(L, "frameRate", _cocos2d_Director_getFrameRate, nullptr);
    oluacls_prop(L, "instance", _cocos2d_Director_getInstance, nullptr);
    oluacls_prop(L, "nextDeltaTimeZero", _cocos2d_Director_isNextDeltaTimeZero, _cocos2d_Director_setNextDeltaTimeZero);
    oluacls_prop(L, "notificationNode", _cocos2d_Director_getNotificationNode, _cocos2d_Director_setNotificationNode);
    oluacls_prop(L, "openGLView", _cocos2d_Director_getOpenGLView, _cocos2d_Director_setOpenGLView);
    oluacls_prop(L, "paused", _cocos2d_Director_isPaused, nullptr);
    oluacls_prop(L, "projection", _cocos2d_Director_getProjection, _cocos2d_Director_setProjection);
    oluacls_prop(L, "projectionMatrixStackSize", _cocos2d_Director_getProjectionMatrixStackSize, nullptr);
    oluacls_prop(L, "renderer", _cocos2d_Director_getRenderer, nullptr);
    oluacls_prop(L, "runningScene", _cocos2d_Director_getRunningScene, nullptr);
    oluacls_prop(L, "safeAreaRect", _cocos2d_Director_getSafeAreaRect, nullptr);
    oluacls_prop(L, "scheduler", _cocos2d_Director_getScheduler, _cocos2d_Director_setScheduler);
    oluacls_prop(L, "secondsPerFrame", _cocos2d_Director_getSecondsPerFrame, nullptr);
    oluacls_prop(L, "sendCleanupToScene", _cocos2d_Director_isSendCleanupToScene, nullptr);
    oluacls_prop(L, "textureCache", _cocos2d_Director_getTextureCache, nullptr);
    oluacls_prop(L, "totalFrames", _cocos2d_Director_getTotalFrames, nullptr);
    oluacls_prop(L, "valid", _cocos2d_Director_isValid, nullptr);
    oluacls_prop(L, "visibleOrigin", _cocos2d_Director_getVisibleOrigin, nullptr);
    oluacls_prop(L, "visibleSize", _cocos2d_Director_getVisibleSize, nullptr);
    oluacls_prop(L, "winSize", _cocos2d_Director_getWinSize, nullptr);
    oluacls_prop(L, "winSizeInPixels", _cocos2d_Director_getWinSizeInPixels, nullptr);
    oluacls_prop(L, "zEye", _cocos2d_Director_getZEye, nullptr);
    oluacls_prop(L, "EVENT_AFTER_DRAW", _cocos2d_Director_get_EVENT_AFTER_DRAW, _cocos2d_Director_set_EVENT_AFTER_DRAW);
    oluacls_prop(L, "EVENT_AFTER_SET_NEXT_SCENE", _cocos2d_Director_get_EVENT_AFTER_SET_NEXT_SCENE, _cocos2d_Director_set_EVENT_AFTER_SET_NEXT_SCENE);
    oluacls_prop(L, "EVENT_AFTER_UPDATE", _cocos2d_Director_get_EVENT_AFTER_UPDATE, _cocos2d_Director_set_EVENT_AFTER_UPDATE);
    oluacls_prop(L, "EVENT_AFTER_VISIT", _cocos2d_Director_get_EVENT_AFTER_VISIT, _cocos2d_Director_set_EVENT_AFTER_VISIT);
    oluacls_prop(L, "EVENT_BEFORE_DRAW", _cocos2d_Director_get_EVENT_BEFORE_DRAW, _cocos2d_Director_set_EVENT_BEFORE_DRAW);
    oluacls_prop(L, "EVENT_BEFORE_SET_NEXT_SCENE", _cocos2d_Director_get_EVENT_BEFORE_SET_NEXT_SCENE, _cocos2d_Director_set_EVENT_BEFORE_SET_NEXT_SCENE);
    oluacls_prop(L, "EVENT_BEFORE_UPDATE", _cocos2d_Director_get_EVENT_BEFORE_UPDATE, _cocos2d_Director_set_EVENT_BEFORE_UPDATE);
    oluacls_prop(L, "EVENT_PROJECTION_CHANGED", _cocos2d_Director_get_EVENT_PROJECTION_CHANGED, _cocos2d_Director_set_EVENT_PROJECTION_CHANGED);
    oluacls_prop(L, "EVENT_RESET", _cocos2d_Director_get_EVENT_RESET, _cocos2d_Director_set_EVENT_RESET);

    olua_registerluatype<cocos2d::Director>(L, "cc.Director");

    return 1;
}

template <typename T> bool doScheduleUpdate(lua_State *L)
{
    const char *cls = olua_getluatype<T>(L);
    if (olua_is_cppobj(L, 2, cls)) {
        auto self = olua_checkobj<cocos2d::Scheduler>(L, 1);
        auto target = olua_checkobj<T>(L, 2);
        lua_Integer priority = olua_checkinteger(L, 3);
        bool paused = olua_checkboolean(L, 4);
        self->scheduleUpdate(target, (int)priority, paused);
        return true;
    }

    return false;
}

static int _cocos2d_Scheduler___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Scheduler *)olua_toobj(L, 1, "cc.Scheduler");
    olua_push_cppobj(L, self, "cc.Scheduler");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Scheduler_getTimeScale(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    // float getTimeScale()
    float ret = (float)self->getTimeScale();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scheduler_isScheduled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    std::string arg1;       /** key */
    void *arg2 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_std_string(L, 2, &arg1);
    olua_check_obj(L, 3, (void **)&arg2, "void *");

    // bool isScheduled(const std::string &key, const void *target)
    bool ret = (bool)self->isScheduled(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scheduler_isTargetPaused(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // bool isTargetPaused(void *target)
    bool ret = (bool)self->isTargetPaused(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scheduler_new(lua_State *L)
{
    olua_startinvoke(L);

    // Scheduler()
    cocos2d::Scheduler *ret = (cocos2d::Scheduler *)new cocos2d::Scheduler();
    int num_ret = olua_push_cppobj(L, ret, "cc.Scheduler");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scheduler_pauseAllTargets(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    // std::set<void *> pauseAllTargets()
    std::set<void *> ret = (std::set<void *>)self->pauseAllTargets();
    int num_ret = olua_push_std_set(L, ret, "void *");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scheduler_pauseAllTargetsWithMinPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    lua_Integer arg1 = 0;       /** minPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_int(L, 2, &arg1);

    // std::set<void *> pauseAllTargetsWithMinPriority(int minPriority)
    std::set<void *> ret = (std::set<void *>)self->pauseAllTargetsWithMinPriority((int)arg1);
    int num_ret = olua_push_std_set(L, ret, "void *");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scheduler_pauseTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void pauseTarget(void *target)
    self->pauseTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_removeAllFunctionsToBePerformedInCocosThread(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    // void removeAllFunctionsToBePerformedInCocosThread()
    self->removeAllFunctionsToBePerformedInCocosThread();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_resumeTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void resumeTarget(void *target)
    self->resumeTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_resumeTargets(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    std::set<void *> arg1;       /** targetsToResume */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_std_set(L, 2, arg1, "void *");

    // void resumeTargets(const std::set<void *> &targetsToResume)
    self->resumeTargets(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_schedule1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    std::function<void(float)> arg1;       /** callback */
    void *arg2 = nullptr;       /** target */
    lua_Number arg3 = 0;       /** interval */
    bool arg4 = false;       /** paused */
    std::string arg5;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 3, (void **)&arg2, "void *");
    olua_check_number(L, 4, &arg3);
    olua_check_bool(L, 5, &arg4);
    olua_check_std_string(L, 6, &arg5);

    void *callback_store_obj = (void *)arg2;
    std::string tag = makeScheduleCallbackTag(arg5);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg1 = [callback_store_obj, func, MT](float arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_number(L, (lua_Number)arg1);

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const std::function<void(float)>& callback, void *target, float interval, bool paused, const std::string& key)
    self->schedule(arg1, arg2, (float)arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_schedule2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    std::function<void(float)> arg1;       /** callback */
    void *arg2 = nullptr;       /** target */
    lua_Number arg3 = 0;       /** interval */
    lua_Unsigned arg4 = 0;       /** repeat */
    lua_Number arg5 = 0;       /** delay */
    bool arg6 = false;       /** paused */
    std::string arg7;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 3, (void **)&arg2, "void *");
    olua_check_number(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);
    olua_check_bool(L, 7, &arg6);
    olua_check_std_string(L, 8, &arg7);

    void *callback_store_obj = (void *)arg2;
    std::string tag = makeScheduleCallbackTag(arg7);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg1 = [callback_store_obj, func, MT](float arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_number(L, (lua_Number)arg1);

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const std::function<void(float)>& callback, void *target, float interval, unsigned int repeat, float delay, bool paused, const std::string& key)
    self->schedule(arg1, arg2, (float)arg3, (unsigned int)arg4, (float)arg5, arg6, arg7);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_schedule(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 5) {
        // if ((olua_is_std_function(L, 2)) && (olua_is_obj(L, 3, "void *")) && (olua_is_number(L, 4)) && (olua_is_bool(L, 5)) && (olua_is_std_string(L, 6))) {
            // void schedule(const std::function<void(float)>& callback, void *target, float interval, bool paused, const std::string& key)
            return _cocos2d_Scheduler_schedule1(L);
        // }
    }

    if (num_args == 7) {
        // if ((olua_is_std_function(L, 2)) && (olua_is_obj(L, 3, "void *")) && (olua_is_number(L, 4)) && (olua_is_uint(L, 5)) && (olua_is_number(L, 6)) && (olua_is_bool(L, 7)) && (olua_is_std_string(L, 8))) {
            // void schedule(const std::function<void(float)>& callback, void *target, float interval, unsigned int repeat, float delay, bool paused, const std::string& key)
            return _cocos2d_Scheduler_schedule2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Scheduler::schedule' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Scheduler_scheduleUpdate(lua_State *L)
{
    olua_startinvoke(L);

    if (doScheduleUpdate<cocos2d::Scheduler>(L) ||
        doScheduleUpdate<cocos2d::ActionManager>(L) ||
        doScheduleUpdate<cocos2d::Node>(L) ||
        doScheduleUpdate<cocos2d::Action>(L) ||
        doScheduleUpdate<cocos2d::Component>(L) ||
        doScheduleUpdate<cocos2d::ActionManager>(L)) {
        olua_endinvoke(L);

        return 0;
    }

    luaL_error(L, "unsupport type: %s", olua_typename(L, 2));

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_setTimeScale(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    lua_Number arg1 = 0;       /** timeScale */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_number(L, 2, &arg1);

    // void setTimeScale(float timeScale)
    self->setTimeScale((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_unschedule(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    std::string arg1;       /** key */
    void *arg2 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_std_string(L, 2, &arg1);
    olua_check_obj(L, 3, (void **)&arg2, "void *");

    std::string tag = makeScheduleCallbackTag(arg1);
    void *callback_store_obj = (void *)arg2;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // void unschedule(const std::string& key, void *target)
    self->unschedule(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAll(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    std::string tag = makeScheduleCallbackTag("");
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBSTARTWITH);

    // void unscheduleAll()
    self->unscheduleAll();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAllForTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    std::string tag = makeScheduleCallbackTag("");
    void *callback_store_obj = (void *)arg1;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBSTARTWITH);

    // void unscheduleAllForTarget(void *target)
    self->unscheduleAllForTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAllWithMinPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    lua_Integer arg1 = 0;       /** minPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_int(L, 2, &arg1);

    // void unscheduleAllWithMinPriority(int minPriority)
    self->unscheduleAllWithMinPriority((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleUpdate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void unscheduleUpdate(void *target)
    self->unscheduleUpdate(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scheduler_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    lua_Number arg1 = 0;       /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_number(L, 2, &arg1);

    // void update(float dt)
    self->update((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Scheduler(lua_State *L)
{
    oluacls_class(L, "cc.Scheduler", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Scheduler___move);
    oluacls_func(L, "getTimeScale", _cocos2d_Scheduler_getTimeScale);
    oluacls_func(L, "isScheduled", _cocos2d_Scheduler_isScheduled);
    oluacls_func(L, "isTargetPaused", _cocos2d_Scheduler_isTargetPaused);
    oluacls_func(L, "new", _cocos2d_Scheduler_new);
    oluacls_func(L, "pauseAllTargets", _cocos2d_Scheduler_pauseAllTargets);
    oluacls_func(L, "pauseAllTargetsWithMinPriority", _cocos2d_Scheduler_pauseAllTargetsWithMinPriority);
    oluacls_func(L, "pauseTarget", _cocos2d_Scheduler_pauseTarget);
    oluacls_func(L, "removeAllFunctionsToBePerformedInCocosThread", _cocos2d_Scheduler_removeAllFunctionsToBePerformedInCocosThread);
    oluacls_func(L, "resumeTarget", _cocos2d_Scheduler_resumeTarget);
    oluacls_func(L, "resumeTargets", _cocos2d_Scheduler_resumeTargets);
    oluacls_func(L, "schedule", _cocos2d_Scheduler_schedule);
    oluacls_func(L, "scheduleUpdate", _cocos2d_Scheduler_scheduleUpdate);
    oluacls_func(L, "setTimeScale", _cocos2d_Scheduler_setTimeScale);
    oluacls_func(L, "unschedule", _cocos2d_Scheduler_unschedule);
    oluacls_func(L, "unscheduleAll", _cocos2d_Scheduler_unscheduleAll);
    oluacls_func(L, "unscheduleAllForTarget", _cocos2d_Scheduler_unscheduleAllForTarget);
    oluacls_func(L, "unscheduleAllWithMinPriority", _cocos2d_Scheduler_unscheduleAllWithMinPriority);
    oluacls_func(L, "unscheduleUpdate", _cocos2d_Scheduler_unscheduleUpdate);
    oluacls_func(L, "update", _cocos2d_Scheduler_update);
    oluacls_prop(L, "timeScale", _cocos2d_Scheduler_getTimeScale, _cocos2d_Scheduler_setTimeScale);
    oluacls_const_integer(L, "PRIORITY_NON_SYSTEM_MIN", (lua_Integer)cocos2d::Scheduler::PRIORITY_NON_SYSTEM_MIN);
    oluacls_const_integer(L, "PRIORITY_SYSTEM", (lua_Integer)cocos2d::Scheduler::PRIORITY_SYSTEM);
    oluacls_const_integer(L, "PRIORITY_NON_SYSTEM_MIN", (lua_Integer)cocos2d::Scheduler::PRIORITY_NON_SYSTEM_MIN);
    oluacls_const_integer(L, "PRIORITY_SYSTEM", (lua_Integer)cocos2d::Scheduler::PRIORITY_SYSTEM);

    olua_registerluatype<cocos2d::Scheduler>(L, "cc.Scheduler");

    return 1;
}

static void doRemoveEventListenersForTarget(lua_State *L, cocos2d::Node *target, bool recursive, const char *refname)
{
    if (olua_getobj(L, target)) {
        olua_unrefall(L, -1, refname);
        lua_pop(L, 1);
    }
    if (recursive) {
        const auto &children = target->getChildren();
        for (const auto& child : children)
        {
            doRemoveEventListenersForTarget(L, child, recursive, refname);
        }
    }
}

static int _cocos2d_EventDispatcher___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventDispatcher *)olua_toobj(L, 1, "cc.EventDispatcher");
    olua_push_cppobj(L, self, "cc.EventDispatcher");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventDispatcher_addCustomEventListener(lua_State *L)
{
    olua_startinvoke(L);

    void *callback_store_obj = nullptr;
    auto self = olua_checkobj<cocos2d::EventDispatcher>(L, 1);
    std::string eventName = olua_checkstring(L, 2);
    auto listener = new cocos2d::EventListenerCustom();
    listener->autorelease();
    olua_push_cppobj<cocos2d::EventListenerCustom>(L, listener);
    callback_store_obj = listener;
    std::string func = olua_setcallback(L, callback_store_obj, eventName.c_str(), 3, OLUA_TAG_NEW);
    listener->init(eventName, [callback_store_obj, func](cocos2d::EventCustom *event) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);
        size_t last = olua_push_objpool(L);
        olua_enable_objpool(L);
        olua_push_cppobj<cocos2d::EventCustom>(L, event);
        olua_disable_objpool(L);
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        //pop stack value
        olua_pop_objpool(L, last);

        lua_settop(L, top);
    });

    // EventListenerCustom* EventDispatcher::addCustomEventListener(const std::string &eventName, const std::function<void(EventCustom*)>& callback)
    //  {
    //      EventListenerCustom *listener = EventListenerCustom::create(eventName, callback);
    //      addEventListenerWithFixedPriority(listener, 1);
    //      return listener;
    //  }
    self->addEventListenerWithFixedPriority(listener, 1);
    lua_pushvalue(L, 4);

    olua_mapref(L, 1, "listeners", -1);

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventDispatcher_addEventListenerWithFixedPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;       /** listener */
    lua_Integer arg2 = 0;       /** fixedPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");
    olua_check_int(L, 3, &arg2);

    // void addEventListenerWithFixedPriority(@ref(map listeners) cocos2d::EventListener *listener, int fixedPriority)
    self->addEventListenerWithFixedPriority(arg1, (int)arg2);

    // inject code after call
    olua_mapref(L, 1, "listeners", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_addEventListenerWithSceneGraphPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;       /** listener */
    cocos2d::Node *arg2 = nullptr;       /** node */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void addEventListenerWithSceneGraphPriority(@ref(map listeners 3) cocos2d::EventListener *listener, cocos2d::Node *node)
    self->addEventListenerWithSceneGraphPriority(arg1, arg2);

    // inject code after call
    olua_mapref(L, 3, "listeners", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_dispatchCustomEvent1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** eventName */
    void *arg2 = nullptr;       /** optionalUserData */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);
    olua_check_obj(L, 3, (void **)&arg2, "void *");

    // void dispatchCustomEvent(const std::string &eventName, @optional void *optionalUserData)
    self->dispatchCustomEvent(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_dispatchCustomEvent2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** eventName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);

    // void dispatchCustomEvent(const std::string &eventName, @optional void *optionalUserData)
    self->dispatchCustomEvent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_dispatchCustomEvent(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // void dispatchCustomEvent(const std::string &eventName, @optional void *optionalUserData)
            return _cocos2d_EventDispatcher_dispatchCustomEvent2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_obj(L, 3, "void *"))) {
            // void dispatchCustomEvent(const std::string &eventName, @optional void *optionalUserData)
            return _cocos2d_EventDispatcher_dispatchCustomEvent1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventDispatcher::dispatchCustomEvent' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_EventDispatcher_dispatchEvent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Event *arg1 = nullptr;       /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Event");

    // void dispatchEvent(cocos2d::Event *event)
    self->dispatchEvent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_hasEventListener(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** listenerID */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);

    // bool hasEventListener(const EventListener::ListenerID &listenerID)
    bool ret = (bool)self->hasEventListener((cocos2d::EventListener::ListenerID)arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventDispatcher_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventDispatcher_new(lua_State *L)
{
    olua_startinvoke(L);

    // EventDispatcher()
    cocos2d::EventDispatcher *ret = (cocos2d::EventDispatcher *)new cocos2d::EventDispatcher();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventDispatcher");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventDispatcher_pauseEventListenersForTarget1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */
    bool arg2 = false;       /** recursive */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // void pauseEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
    self->pauseEventListenersForTarget(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_pauseEventListenersForTarget2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void pauseEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
    self->pauseEventListenersForTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_pauseEventListenersForTarget(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // void pauseEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
            return _cocos2d_EventDispatcher_pauseEventListenersForTarget2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void pauseEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
            return _cocos2d_EventDispatcher_pauseEventListenersForTarget1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventDispatcher::pauseEventListenersForTarget' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_EventDispatcher_removeAllEventListeners(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");

    // inject code before call
    olua_startcmpunref(L, 1, "listeners");

    // @unref(cmp listeners) void removeAllEventListeners()
    self->removeAllEventListeners();

    // inject code after call
    olua_endcmpunref(L, 1, "listeners");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_removeCustomEventListeners(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** customEventName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "listeners");

    // @unref(cmp listeners) void removeCustomEventListeners(const std::string &customEventName)
    self->removeCustomEventListeners(arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "listeners");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListener(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;       /** listener */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");

    // inject code before call
    olua_startcmpunref(L, 1, "listeners");

    // @unref(cmp listeners) void removeEventListener(cocos2d::EventListener *listener)
    self->removeEventListener(arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "listeners");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListenersForTarget1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */
    bool arg2 = false;       /** recursive */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // inject code before call
    bool recursive = false;
    auto node = olua_checkobj<cocos2d::Node>(L, 2);
    if (lua_gettop(L) >= 3) {
        recursive = olua_toboolean(L, 3);
    }
    doRemoveEventListenersForTarget(L, node, recursive, "listeners");

    // void removeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
    self->removeEventListenersForTarget(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListenersForTarget2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // inject code before call
    bool recursive = false;
    auto node = olua_checkobj<cocos2d::Node>(L, 2);
    if (lua_gettop(L) >= 3) {
        recursive = olua_toboolean(L, 3);
    }
    doRemoveEventListenersForTarget(L, node, recursive, "listeners");

    // void removeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
    self->removeEventListenersForTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListenersForTarget(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // void removeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
            return _cocos2d_EventDispatcher_removeEventListenersForTarget2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void removeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
            return _cocos2d_EventDispatcher_removeEventListenersForTarget1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventDispatcher::removeEventListenersForTarget' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListenersForType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    lua_Unsigned arg1 = 0;       /** listenerType */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_uint(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "listeners");

    // @unref(cmp listeners) void removeEventListenersForType(EventListener::Type listenerType)
    self->removeEventListenersForType((cocos2d::EventListener::Type)arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "listeners");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_resumeEventListenersForTarget1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */
    bool arg2 = false;       /** recursive */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // void resumeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
    self->resumeEventListenersForTarget(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_resumeEventListenersForTarget2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void resumeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
    self->resumeEventListenersForTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_resumeEventListenersForTarget(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // void resumeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
            return _cocos2d_EventDispatcher_resumeEventListenersForTarget2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void resumeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
            return _cocos2d_EventDispatcher_resumeEventListenersForTarget1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventDispatcher::resumeEventListenersForTarget' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_EventDispatcher_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    bool arg1 = false;       /** isEnabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool isEnabled)
    self->setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventDispatcher_setPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;       /** listener */
    lua_Integer arg2 = 0;       /** fixedPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");
    olua_check_int(L, 3, &arg2);

    // void setPriority(cocos2d::EventListener *listener, int fixedPriority)
    self->setPriority(arg1, (int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventDispatcher(lua_State *L)
{
    oluacls_class(L, "cc.EventDispatcher", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_EventDispatcher___move);
    oluacls_func(L, "addCustomEventListener", _cocos2d_EventDispatcher_addCustomEventListener);
    oluacls_func(L, "addEventListenerWithFixedPriority", _cocos2d_EventDispatcher_addEventListenerWithFixedPriority);
    oluacls_func(L, "addEventListenerWithSceneGraphPriority", _cocos2d_EventDispatcher_addEventListenerWithSceneGraphPriority);
    oluacls_func(L, "dispatchCustomEvent", _cocos2d_EventDispatcher_dispatchCustomEvent);
    oluacls_func(L, "dispatchEvent", _cocos2d_EventDispatcher_dispatchEvent);
    oluacls_func(L, "hasEventListener", _cocos2d_EventDispatcher_hasEventListener);
    oluacls_func(L, "isEnabled", _cocos2d_EventDispatcher_isEnabled);
    oluacls_func(L, "new", _cocos2d_EventDispatcher_new);
    oluacls_func(L, "pauseEventListenersForTarget", _cocos2d_EventDispatcher_pauseEventListenersForTarget);
    oluacls_func(L, "removeAllEventListeners", _cocos2d_EventDispatcher_removeAllEventListeners);
    oluacls_func(L, "removeCustomEventListeners", _cocos2d_EventDispatcher_removeCustomEventListeners);
    oluacls_func(L, "removeEventListener", _cocos2d_EventDispatcher_removeEventListener);
    oluacls_func(L, "removeEventListenersForTarget", _cocos2d_EventDispatcher_removeEventListenersForTarget);
    oluacls_func(L, "removeEventListenersForType", _cocos2d_EventDispatcher_removeEventListenersForType);
    oluacls_func(L, "resumeEventListenersForTarget", _cocos2d_EventDispatcher_resumeEventListenersForTarget);
    oluacls_func(L, "setEnabled", _cocos2d_EventDispatcher_setEnabled);
    oluacls_func(L, "setPriority", _cocos2d_EventDispatcher_setPriority);
    oluacls_prop(L, "enabled", _cocos2d_EventDispatcher_isEnabled, _cocos2d_EventDispatcher_setEnabled);

    olua_registerluatype<cocos2d::EventDispatcher>(L, "cc.EventDispatcher");

    return 1;
}

static int luaopen_cocos2d_EventListener_Type(lua_State *L)
{
    oluacls_class(L, "cc.EventListener.Type", nullptr);
    oluacls_const_integer(L, "ACCELERATION", (lua_Integer)cocos2d::EventListener::Type::ACCELERATION);
    oluacls_const_integer(L, "CUSTOM", (lua_Integer)cocos2d::EventListener::Type::CUSTOM);
    oluacls_const_integer(L, "FOCUS", (lua_Integer)cocos2d::EventListener::Type::FOCUS);
    oluacls_const_integer(L, "GAME_CONTROLLER", (lua_Integer)cocos2d::EventListener::Type::GAME_CONTROLLER);
    oluacls_const_integer(L, "KEYBOARD", (lua_Integer)cocos2d::EventListener::Type::KEYBOARD);
    oluacls_const_integer(L, "MOUSE", (lua_Integer)cocos2d::EventListener::Type::MOUSE);
    oluacls_const_integer(L, "TOUCH_ALL_AT_ONCE", (lua_Integer)cocos2d::EventListener::Type::TOUCH_ALL_AT_ONCE);
    oluacls_const_integer(L, "TOUCH_ONE_BY_ONE", (lua_Integer)cocos2d::EventListener::Type::TOUCH_ONE_BY_ONE);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)cocos2d::EventListener::Type::UNKNOWN);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_EventListener___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventListener *)olua_toobj(L, 1, "cc.EventListener");
    olua_push_cppobj(L, self, "cc.EventListener");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventListener_checkAvailable(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListener *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");

    // bool checkAvailable()
    bool ret = (bool)self->checkAvailable();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListener_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListener *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");

    // cocos2d::EventListener *clone()
    cocos2d::EventListener *ret = (cocos2d::EventListener *)self->clone();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListener");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListener_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListener *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListener_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListener *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventListener(lua_State *L)
{
    oluacls_class(L, "cc.EventListener", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_EventListener___move);
    oluacls_func(L, "checkAvailable", _cocos2d_EventListener_checkAvailable);
    oluacls_func(L, "clone", _cocos2d_EventListener_clone);
    oluacls_func(L, "isEnabled", _cocos2d_EventListener_isEnabled);
    oluacls_func(L, "setEnabled", _cocos2d_EventListener_setEnabled);
    oluacls_prop(L, "available", _cocos2d_EventListener_checkAvailable, nullptr);
    oluacls_prop(L, "enabled", _cocos2d_EventListener_isEnabled, _cocos2d_EventListener_setEnabled);

    olua_registerluatype<cocos2d::EventListener>(L, "cc.EventListener");

    return 1;
}

static int _cocos2d_EventListenerTouchOneByOne___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventListenerTouchOneByOne *)olua_toobj(L, 1, "cc.EventListenerTouchOneByOne");
    olua_push_cppobj(L, self, "cc.EventListenerTouchOneByOne");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventListenerTouchOneByOne_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerTouchOneByOne *create()
    cocos2d::EventListenerTouchOneByOne *ret = (cocos2d::EventListenerTouchOneByOne *)cocos2d::EventListenerTouchOneByOne::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerTouchOneByOne");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_isSwallowTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    // bool isSwallowTouches()
    bool ret = (bool)self->isSwallowTouches();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_new(lua_State *L)
{
    olua_startinvoke(L);

    // EventListenerTouchOneByOne()
    cocos2d::EventListenerTouchOneByOne *ret = (cocos2d::EventListenerTouchOneByOne *)new cocos2d::EventListenerTouchOneByOne();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerTouchOneByOne");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_setSwallowTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    bool arg1 = false;       /** needSwallow */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");
    olua_check_bool(L, 2, &arg1);

    // void setSwallowTouches(bool needSwallow)
    self->setSwallowTouches(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchBegan(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    void *callback_store_obj = (void *)self;
    std::string tag = "onTouchBegan";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<bool (Touch *, Event *)> onTouchBegan
    std::function<bool(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<bool(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchBegan;
    int num_ret = olua_push_std_function(L, (std::function<bool(cocos2d::Touch *, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchBegan(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<bool(cocos2d::Touch *, cocos2d::Event *)> arg1;       /** onTouchBegan */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchBegan";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            bool ret = false;       
            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Touch");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                if (olua_is_bool(L, -1)) {
                    olua_check_bool(L, -1, &ret);
                }

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
            return ret;
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchBegan";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<bool (Touch *, Event *)> onTouchBegan
    self->onTouchBegan = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchCancelled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    void *callback_store_obj = (void *)self;
    std::string tag = "onTouchCancelled";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (Touch *, Event *)> onTouchCancelled
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchCancelled;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchCancelled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> arg1;       /** onTouchCancelled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchCancelled";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Touch");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchCancelled";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (Touch *, Event *)> onTouchCancelled
    self->onTouchCancelled = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchEnded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    void *callback_store_obj = (void *)self;
    std::string tag = "onTouchEnded";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (Touch *, Event *)> onTouchEnded
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchEnded;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchEnded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> arg1;       /** onTouchEnded */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchEnded";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Touch");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchEnded";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (Touch *, Event *)> onTouchEnded
    self->onTouchEnded = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchMoved(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    void *callback_store_obj = (void *)self;
    std::string tag = "onTouchMoved";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (Touch *, Event *)> onTouchMoved
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchMoved;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchMoved(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> arg1;       /** onTouchMoved */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchMoved";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Touch");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchMoved";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (Touch *, Event *)> onTouchMoved
    self->onTouchMoved = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventListenerTouchOneByOne(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerTouchOneByOne", "cc.EventListener");
    oluacls_func(L, "__move", _cocos2d_EventListenerTouchOneByOne___move);
    oluacls_func(L, "create", _cocos2d_EventListenerTouchOneByOne_create);
    oluacls_func(L, "isSwallowTouches", _cocos2d_EventListenerTouchOneByOne_isSwallowTouches);
    oluacls_func(L, "new", _cocos2d_EventListenerTouchOneByOne_new);
    oluacls_func(L, "setSwallowTouches", _cocos2d_EventListenerTouchOneByOne_setSwallowTouches);
    oluacls_prop(L, "swallowTouches", _cocos2d_EventListenerTouchOneByOne_isSwallowTouches, _cocos2d_EventListenerTouchOneByOne_setSwallowTouches);
    oluacls_prop(L, "onTouchBegan", _cocos2d_EventListenerTouchOneByOne_get_onTouchBegan, _cocos2d_EventListenerTouchOneByOne_set_onTouchBegan);
    oluacls_prop(L, "onTouchCancelled", _cocos2d_EventListenerTouchOneByOne_get_onTouchCancelled, _cocos2d_EventListenerTouchOneByOne_set_onTouchCancelled);
    oluacls_prop(L, "onTouchEnded", _cocos2d_EventListenerTouchOneByOne_get_onTouchEnded, _cocos2d_EventListenerTouchOneByOne_set_onTouchEnded);
    oluacls_prop(L, "onTouchMoved", _cocos2d_EventListenerTouchOneByOne_get_onTouchMoved, _cocos2d_EventListenerTouchOneByOne_set_onTouchMoved);
    oluacls_const_string(L, "LISTENER_ID", (const char *)cocos2d::EventListenerTouchOneByOne::LISTENER_ID.c_str());

    olua_registerluatype<cocos2d::EventListenerTouchOneByOne>(L, "cc.EventListenerTouchOneByOne");

    return 1;
}

static int _cocos2d_EventListenerTouchAllAtOnce___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventListenerTouchAllAtOnce *)olua_toobj(L, 1, "cc.EventListenerTouchAllAtOnce");
    olua_push_cppobj(L, self, "cc.EventListenerTouchAllAtOnce");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventListenerTouchAllAtOnce_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerTouchAllAtOnce *create()
    cocos2d::EventListenerTouchAllAtOnce *ret = (cocos2d::EventListenerTouchAllAtOnce *)cocos2d::EventListenerTouchAllAtOnce::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerTouchAllAtOnce");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_new(lua_State *L)
{
    olua_startinvoke(L);

    // EventListenerTouchAllAtOnce()
    cocos2d::EventListenerTouchAllAtOnce *ret = (cocos2d::EventListenerTouchAllAtOnce *)new cocos2d::EventListenerTouchAllAtOnce();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerTouchAllAtOnce");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesBegan(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    void *callback_store_obj = (void *)self;
    std::string tag = "onTouchesBegan";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (const std::vector<Touch *> &, Event *)> onTouchesBegan
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesBegan;
    int num_ret = olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesBegan(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1;       /** onTouchesBegan */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchesBegan";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_std_vector(L, arg1, "cc.Touch");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchesBegan";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (const std::vector<Touch *> &, Event *)> onTouchesBegan
    self->onTouchesBegan = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesCancelled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    void *callback_store_obj = (void *)self;
    std::string tag = "onTouchesCancelled";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (const std::vector<Touch *> &, Event *)> onTouchesCancelled
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesCancelled;
    int num_ret = olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesCancelled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1;       /** onTouchesCancelled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchesCancelled";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_std_vector(L, arg1, "cc.Touch");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchesCancelled";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (const std::vector<Touch *> &, Event *)> onTouchesCancelled
    self->onTouchesCancelled = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesEnded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    void *callback_store_obj = (void *)self;
    std::string tag = "onTouchesEnded";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (const std::vector<Touch *> &, Event *)> onTouchesEnded
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesEnded;
    int num_ret = olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesEnded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1;       /** onTouchesEnded */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchesEnded";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_std_vector(L, arg1, "cc.Touch");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchesEnded";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (const std::vector<Touch *> &, Event *)> onTouchesEnded
    self->onTouchesEnded = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesMoved(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    void *callback_store_obj = (void *)self;
    std::string tag = "onTouchesMoved";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (const std::vector<Touch *> &, Event *)> onTouchesMoved
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesMoved;
    int num_ret = olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesMoved(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1;       /** onTouchesMoved */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchesMoved";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_std_vector(L, arg1, "cc.Touch");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onTouchesMoved";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (const std::vector<Touch *> &, Event *)> onTouchesMoved
    self->onTouchesMoved = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventListenerTouchAllAtOnce(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerTouchAllAtOnce", "cc.EventListener");
    oluacls_func(L, "__move", _cocos2d_EventListenerTouchAllAtOnce___move);
    oluacls_func(L, "create", _cocos2d_EventListenerTouchAllAtOnce_create);
    oluacls_func(L, "new", _cocos2d_EventListenerTouchAllAtOnce_new);
    oluacls_prop(L, "onTouchesBegan", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesBegan, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesBegan);
    oluacls_prop(L, "onTouchesCancelled", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesCancelled, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesCancelled);
    oluacls_prop(L, "onTouchesEnded", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesEnded, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesEnded);
    oluacls_prop(L, "onTouchesMoved", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesMoved, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesMoved);
    oluacls_const_string(L, "LISTENER_ID", (const char *)cocos2d::EventListenerTouchAllAtOnce::LISTENER_ID.c_str());

    olua_registerluatype<cocos2d::EventListenerTouchAllAtOnce>(L, "cc.EventListenerTouchAllAtOnce");

    return 1;
}

static int _cocos2d_EventListenerCustom___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventListenerCustom *)olua_toobj(L, 1, "cc.EventListenerCustom");
    olua_push_cppobj(L, self, "cc.EventListenerCustom");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventListenerCustom_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** eventName */
    std::function<void(cocos2d::EventCustom *)> arg2;       /** callback */

    olua_check_std_string(L, 1, &arg1);

    cocos2d::EventListenerCustom *self = new cocos2d::EventListenerCustom();
    cocos2d::EventListenerCustom *ret = self;
    olua_push_cppobj<cocos2d::EventListenerCustom>(L, self);
    olua_postnew(L, ret);

    void *callback_store_obj = (void *)self;
    std::string tag = "listener";
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_NEW);
    lua_State *MT = olua_mainthread();
    arg2 = [callback_store_obj, func, MT](cocos2d::EventCustom *arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            size_t last = olua_push_objpool(L);
            olua_enable_objpool(L);
            olua_push_cppobj(L, arg1, "cc.EventCustom");
            olua_disable_objpool(L);

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            //pop stack value
            olua_pop_objpool(L, last);
            lua_settop(L, top);
        }
    };

    // static EventListenerCustom* create(const std::string& eventName, const std::function<void(@local EventCustom*)>& callback)
    self->init(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerCustom");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerCustom_new(lua_State *L)
{
    olua_startinvoke(L);

    // EventListenerCustom()
    cocos2d::EventListenerCustom *ret = (cocos2d::EventListenerCustom *)new cocos2d::EventListenerCustom();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerCustom");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EventListenerCustom(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerCustom", "cc.EventListener");
    oluacls_func(L, "__move", _cocos2d_EventListenerCustom___move);
    oluacls_func(L, "create", _cocos2d_EventListenerCustom_create);
    oluacls_func(L, "new", _cocos2d_EventListenerCustom_new);

    olua_registerluatype<cocos2d::EventListenerCustom>(L, "cc.EventListenerCustom");

    return 1;
}

static int _cocos2d_EventListenerKeyboard___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventListenerKeyboard *)olua_toobj(L, 1, "cc.EventListenerKeyboard");
    olua_push_cppobj(L, self, "cc.EventListenerKeyboard");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventListenerKeyboard_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerKeyboard *create()
    cocos2d::EventListenerKeyboard *ret = (cocos2d::EventListenerKeyboard *)cocos2d::EventListenerKeyboard::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerKeyboard");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerKeyboard_new(lua_State *L)
{
    olua_startinvoke(L);

    // EventListenerKeyboard()
    cocos2d::EventListenerKeyboard *ret = (cocos2d::EventListenerKeyboard *)new cocos2d::EventListenerKeyboard();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerKeyboard");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerKeyboard_get_onKeyPressed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerKeyboard *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    void *callback_store_obj = (void *)self;
    std::string tag = "onKeyPressed";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (EventKeyboard::KeyCode, Event *)> onKeyPressed
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> ret = (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)self->onKeyPressed;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerKeyboard_set_onKeyPressed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerKeyboard *self = nullptr;
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> arg1;       /** onKeyPressed */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyPressed";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::EventKeyboard::KeyCode arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_uint(L, (lua_Unsigned)arg1);
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyPressed";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (EventKeyboard::KeyCode, Event *)> onKeyPressed
    self->onKeyPressed = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerKeyboard_get_onKeyReleased(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerKeyboard *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    void *callback_store_obj = (void *)self;
    std::string tag = "onKeyReleased";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (EventKeyboard::KeyCode, Event *)> onKeyReleased
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> ret = (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)self->onKeyReleased;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerKeyboard_set_onKeyReleased(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerKeyboard *self = nullptr;
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> arg1;       /** onKeyReleased */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyReleased";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::EventKeyboard::KeyCode arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_uint(L, (lua_Unsigned)arg1);
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyReleased";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (EventKeyboard::KeyCode, Event *)> onKeyReleased
    self->onKeyReleased = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventListenerKeyboard(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerKeyboard", "cc.EventListener");
    oluacls_func(L, "__move", _cocos2d_EventListenerKeyboard___move);
    oluacls_func(L, "create", _cocos2d_EventListenerKeyboard_create);
    oluacls_func(L, "new", _cocos2d_EventListenerKeyboard_new);
    oluacls_prop(L, "onKeyPressed", _cocos2d_EventListenerKeyboard_get_onKeyPressed, _cocos2d_EventListenerKeyboard_set_onKeyPressed);
    oluacls_prop(L, "onKeyReleased", _cocos2d_EventListenerKeyboard_get_onKeyReleased, _cocos2d_EventListenerKeyboard_set_onKeyReleased);
    oluacls_const_string(L, "LISTENER_ID", (const char *)cocos2d::EventListenerKeyboard::LISTENER_ID.c_str());

    olua_registerluatype<cocos2d::EventListenerKeyboard>(L, "cc.EventListenerKeyboard");

    return 1;
}

static int _cocos2d_EventListenerAcceleration___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventListenerAcceleration *)olua_toobj(L, 1, "cc.EventListenerAcceleration");
    olua_push_cppobj(L, self, "cc.EventListenerAcceleration");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventListenerAcceleration_create(lua_State *L)
{
    olua_startinvoke(L);

    std::function<void(cocos2d::Acceleration *, cocos2d::Event *)> arg1;       /** callback */

    cocos2d::EventListenerAcceleration *self = new cocos2d::EventListenerAcceleration();
    cocos2d::EventListenerAcceleration *ret = self;
    olua_push_cppobj<cocos2d::EventListenerAcceleration>(L, self);
    olua_postnew(L, ret);

    void *callback_store_obj = (void *)self;
    std::string tag = "listener";
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 1, OLUA_TAG_NEW);
    lua_State *MT = olua_mainthread();
    arg1 = [callback_store_obj, func, MT](cocos2d::Acceleration *arg1, cocos2d::Event *arg2) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            size_t last = olua_push_objpool(L);
            olua_enable_objpool(L);
            olua_push_cppobj(L, arg1, "cc.Acceleration");
            olua_push_cppobj(L, arg2, "cc.Event");
            olua_disable_objpool(L);

            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //pop stack value
            olua_pop_objpool(L, last);
            lua_settop(L, top);
        }
    };

    // static EventListenerAcceleration* create(const std::function<void(@local Acceleration*, @local Event*)>& callback)
    self->init(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerAcceleration");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerAcceleration_new(lua_State *L)
{
    olua_startinvoke(L);

    // EventListenerAcceleration()
    cocos2d::EventListenerAcceleration *ret = (cocos2d::EventListenerAcceleration *)new cocos2d::EventListenerAcceleration();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerAcceleration");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EventListenerAcceleration(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerAcceleration", "cc.EventListener");
    oluacls_func(L, "__move", _cocos2d_EventListenerAcceleration___move);
    oluacls_func(L, "create", _cocos2d_EventListenerAcceleration_create);
    oluacls_func(L, "new", _cocos2d_EventListenerAcceleration_new);
    oluacls_const_string(L, "LISTENER_ID", (const char *)cocos2d::EventListenerAcceleration::LISTENER_ID.c_str());

    olua_registerluatype<cocos2d::EventListenerAcceleration>(L, "cc.EventListenerAcceleration");

    return 1;
}

static int _cocos2d_EventListenerFocus___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventListenerFocus *)olua_toobj(L, 1, "cc.EventListenerFocus");
    olua_push_cppobj(L, self, "cc.EventListenerFocus");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventListenerFocus_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerFocus *create()
    cocos2d::EventListenerFocus *ret = (cocos2d::EventListenerFocus *)cocos2d::EventListenerFocus::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerFocus");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerFocus_new(lua_State *L)
{
    olua_startinvoke(L);

    // EventListenerFocus()
    cocos2d::EventListenerFocus *ret = (cocos2d::EventListenerFocus *)new cocos2d::EventListenerFocus();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerFocus");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerFocus_get_onFocusChanged(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerFocus *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerFocus");

    void *callback_store_obj = (void *)self;
    std::string tag = "onFocusChanged";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (ui::Widget *, ui::Widget *)> onFocusChanged
    std::function<void(cocos2d::ui::Widget *, cocos2d::ui::Widget *)> ret = (std::function<void(cocos2d::ui::Widget *, cocos2d::ui::Widget *)>)self->onFocusChanged;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::ui::Widget *, cocos2d::ui::Widget *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerFocus_set_onFocusChanged(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerFocus *self = nullptr;
    std::function<void(cocos2d::ui::Widget *, cocos2d::ui::Widget *)> arg1;       /** onFocusChanged */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerFocus");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onFocusChanged";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::ui::Widget *arg1, cocos2d::ui::Widget *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "ccui.Widget");
                olua_push_cppobj(L, arg2, "ccui.Widget");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onFocusChanged";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (ui::Widget *, ui::Widget *)> onFocusChanged
    self->onFocusChanged = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventListenerFocus(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerFocus", "cc.EventListener");
    oluacls_func(L, "__move", _cocos2d_EventListenerFocus___move);
    oluacls_func(L, "create", _cocos2d_EventListenerFocus_create);
    oluacls_func(L, "new", _cocos2d_EventListenerFocus_new);
    oluacls_prop(L, "onFocusChanged", _cocos2d_EventListenerFocus_get_onFocusChanged, _cocos2d_EventListenerFocus_set_onFocusChanged);
    oluacls_const_string(L, "LISTENER_ID", (const char *)cocos2d::EventListenerFocus::LISTENER_ID.c_str());

    olua_registerluatype<cocos2d::EventListenerFocus>(L, "cc.EventListenerFocus");

    return 1;
}

static int _cocos2d_EventListenerMouse___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventListenerMouse *)olua_toobj(L, 1, "cc.EventListenerMouse");
    olua_push_cppobj(L, self, "cc.EventListenerMouse");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventListenerMouse_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerMouse *create()
    cocos2d::EventListenerMouse *ret = (cocos2d::EventListenerMouse *)cocos2d::EventListenerMouse::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerMouse");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_new(lua_State *L)
{
    olua_startinvoke(L);

    // EventListenerMouse()
    cocos2d::EventListenerMouse *ret = (cocos2d::EventListenerMouse *)new cocos2d::EventListenerMouse();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerMouse");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_get_onMouseDown(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    void *callback_store_obj = (void *)self;
    std::string tag = "onMouseDown";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (EventMouse *)> onMouseDown
    std::function<void(cocos2d::EventMouse *)> ret = (std::function<void(cocos2d::EventMouse *)>)self->onMouseDown;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventMouse *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_set_onMouseDown(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void(cocos2d::EventMouse *)> arg1;       /** onMouseDown */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMouseDown";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::EventMouse *arg1) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.EventMouse");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMouseDown";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (EventMouse *)> onMouseDown
    self->onMouseDown = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerMouse_get_onMouseMove(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    void *callback_store_obj = (void *)self;
    std::string tag = "onMouseMove";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (EventMouse *)> onMouseMove
    std::function<void(cocos2d::EventMouse *)> ret = (std::function<void(cocos2d::EventMouse *)>)self->onMouseMove;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventMouse *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_set_onMouseMove(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void(cocos2d::EventMouse *)> arg1;       /** onMouseMove */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMouseMove";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::EventMouse *arg1) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.EventMouse");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMouseMove";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (EventMouse *)> onMouseMove
    self->onMouseMove = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerMouse_get_onMouseScroll(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    void *callback_store_obj = (void *)self;
    std::string tag = "onMouseScroll";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (EventMouse *)> onMouseScroll
    std::function<void(cocos2d::EventMouse *)> ret = (std::function<void(cocos2d::EventMouse *)>)self->onMouseScroll;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventMouse *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_set_onMouseScroll(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void(cocos2d::EventMouse *)> arg1;       /** onMouseScroll */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMouseScroll";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::EventMouse *arg1) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.EventMouse");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMouseScroll";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (EventMouse *)> onMouseScroll
    self->onMouseScroll = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerMouse_get_onMouseUp(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    void *callback_store_obj = (void *)self;
    std::string tag = "onMouseUp";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (EventMouse *)> onMouseUp
    std::function<void(cocos2d::EventMouse *)> ret = (std::function<void(cocos2d::EventMouse *)>)self->onMouseUp;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventMouse *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_set_onMouseUp(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void(cocos2d::EventMouse *)> arg1;       /** onMouseUp */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMouseUp";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::EventMouse *arg1) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.EventMouse");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMouseUp";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (EventMouse *)> onMouseUp
    self->onMouseUp = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventListenerMouse(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerMouse", "cc.EventListener");
    oluacls_func(L, "__move", _cocos2d_EventListenerMouse___move);
    oluacls_func(L, "create", _cocos2d_EventListenerMouse_create);
    oluacls_func(L, "new", _cocos2d_EventListenerMouse_new);
    oluacls_prop(L, "onMouseDown", _cocos2d_EventListenerMouse_get_onMouseDown, _cocos2d_EventListenerMouse_set_onMouseDown);
    oluacls_prop(L, "onMouseMove", _cocos2d_EventListenerMouse_get_onMouseMove, _cocos2d_EventListenerMouse_set_onMouseMove);
    oluacls_prop(L, "onMouseScroll", _cocos2d_EventListenerMouse_get_onMouseScroll, _cocos2d_EventListenerMouse_set_onMouseScroll);
    oluacls_prop(L, "onMouseUp", _cocos2d_EventListenerMouse_get_onMouseUp, _cocos2d_EventListenerMouse_set_onMouseUp);
    oluacls_const_string(L, "LISTENER_ID", (const char *)cocos2d::EventListenerMouse::LISTENER_ID.c_str());

    olua_registerluatype<cocos2d::EventListenerMouse>(L, "cc.EventListenerMouse");

    return 1;
}

static int luaopen_cocos2d_Event_Type(lua_State *L)
{
    oluacls_class(L, "cc.Event.Type", nullptr);
    oluacls_const_integer(L, "ACCELERATION", (lua_Integer)cocos2d::Event::Type::ACCELERATION);
    oluacls_const_integer(L, "CUSTOM", (lua_Integer)cocos2d::Event::Type::CUSTOM);
    oluacls_const_integer(L, "FOCUS", (lua_Integer)cocos2d::Event::Type::FOCUS);
    oluacls_const_integer(L, "GAME_CONTROLLER", (lua_Integer)cocos2d::Event::Type::GAME_CONTROLLER);
    oluacls_const_integer(L, "KEYBOARD", (lua_Integer)cocos2d::Event::Type::KEYBOARD);
    oluacls_const_integer(L, "MOUSE", (lua_Integer)cocos2d::Event::Type::MOUSE);
    oluacls_const_integer(L, "TOUCH", (lua_Integer)cocos2d::Event::Type::TOUCH);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_Event___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Event *)olua_toobj(L, 1, "cc.Event");
    olua_push_cppobj(L, self, "cc.Event");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Event_getCurrentTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // cocos2d::Node *getCurrentTarget()
    cocos2d::Node *ret = (cocos2d::Node *)self->getCurrentTarget();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Event_getType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // cocos2d::Event::Type getType()
    cocos2d::Event::Type ret = (cocos2d::Event::Type)self->getType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Event_isStopped(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // bool isStopped()
    bool ret = (bool)self->isStopped();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Event_stopPropagation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // void stopPropagation()
    self->stopPropagation();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Event(lua_State *L)
{
    oluacls_class(L, "cc.Event", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Event___move);
    oluacls_func(L, "getCurrentTarget", _cocos2d_Event_getCurrentTarget);
    oluacls_func(L, "getType", _cocos2d_Event_getType);
    oluacls_func(L, "isStopped", _cocos2d_Event_isStopped);
    oluacls_func(L, "stopPropagation", _cocos2d_Event_stopPropagation);
    oluacls_prop(L, "currentTarget", _cocos2d_Event_getCurrentTarget, nullptr);
    oluacls_prop(L, "stopped", _cocos2d_Event_isStopped, nullptr);
    oluacls_prop(L, "type", _cocos2d_Event_getType, nullptr);

    olua_registerluatype<cocos2d::Event>(L, "cc.Event");

    return 1;
}

static int _cocos2d_EventCustom___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventCustom *)olua_toobj(L, 1, "cc.EventCustom");
    olua_push_cppobj(L, self, "cc.EventCustom");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventCustom_getEventName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventCustom *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventCustom");

    // const std::string &getEventName()
    const std::string &ret = (const std::string &)self->getEventName();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventCustom_getUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventCustom *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventCustom");

    // void *getUserData()
    void *ret = (void *)self->getUserData();
    int num_ret = olua_push_obj(L, ret, "void *");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventCustom_setUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventCustom *self = nullptr;
    void *arg1 = nullptr;       /** data */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventCustom");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void setUserData(void *data)
    self->setUserData(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventCustom(lua_State *L)
{
    oluacls_class(L, "cc.EventCustom", "cc.Event");
    oluacls_func(L, "__move", _cocos2d_EventCustom___move);
    oluacls_func(L, "getEventName", _cocos2d_EventCustom_getEventName);
    oluacls_func(L, "getUserData", _cocos2d_EventCustom_getUserData);
    oluacls_func(L, "setUserData", _cocos2d_EventCustom_setUserData);
    oluacls_prop(L, "eventName", _cocos2d_EventCustom_getEventName, nullptr);
    oluacls_prop(L, "userData", _cocos2d_EventCustom_getUserData, _cocos2d_EventCustom_setUserData);

    olua_registerluatype<cocos2d::EventCustom>(L, "cc.EventCustom");

    return 1;
}

static int _cocos2d_EventListenerController___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventListenerController *)olua_toobj(L, 1, "cc.EventListenerController");
    olua_push_cppobj(L, self, "cc.EventListenerController");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventListenerController_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerController *create()
    cocos2d::EventListenerController *ret = (cocos2d::EventListenerController *)cocos2d::EventListenerController::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventListenerController");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerController_get_onAxisEvent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    void *callback_store_obj = (void *)self;
    std::string tag = "onAxisEvent";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (Controller *, int, Event *)> onAxisEvent
    std::function<void(cocos2d::Controller *, int, cocos2d::Event *)> ret = (std::function<void(cocos2d::Controller *, int, cocos2d::Event *)>)self->onAxisEvent;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Controller *, int, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerController_set_onAxisEvent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void(cocos2d::Controller *, int, cocos2d::Event *)> arg1;       /** onAxisEvent */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onAxisEvent";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Controller *arg1, int arg2, cocos2d::Event *arg3) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Controller");
                olua_push_int(L, (lua_Integer)arg2);
                olua_push_cppobj(L, arg3, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 3);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onAxisEvent";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (Controller *, int, Event *)> onAxisEvent
    self->onAxisEvent = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerController_get_onConnected(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    void *callback_store_obj = (void *)self;
    std::string tag = "onConnected";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (Controller *, Event *)> onConnected
    std::function<void(cocos2d::Controller *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Controller *, cocos2d::Event *)>)self->onConnected;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Controller *, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerController_set_onConnected(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void(cocos2d::Controller *, cocos2d::Event *)> arg1;       /** onConnected */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onConnected";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Controller *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Controller");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onConnected";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (Controller *, Event *)> onConnected
    self->onConnected = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerController_get_onDisconnected(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    void *callback_store_obj = (void *)self;
    std::string tag = "onDisconnected";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (Controller *, Event *)> onDisconnected
    std::function<void(cocos2d::Controller *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Controller *, cocos2d::Event *)>)self->onDisconnected;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Controller *, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerController_set_onDisconnected(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void(cocos2d::Controller *, cocos2d::Event *)> arg1;       /** onDisconnected */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onDisconnected";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Controller *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Controller");
                olua_push_cppobj(L, arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onDisconnected";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (Controller *, Event *)> onDisconnected
    self->onDisconnected = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerController_get_onKeyDown(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    void *callback_store_obj = (void *)self;
    std::string tag = "onKeyDown";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (Controller *, int, Event *)> onKeyDown
    std::function<void(cocos2d::Controller *, int, cocos2d::Event *)> ret = (std::function<void(cocos2d::Controller *, int, cocos2d::Event *)>)self->onKeyDown;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Controller *, int, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerController_set_onKeyDown(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void(cocos2d::Controller *, int, cocos2d::Event *)> arg1;       /** onKeyDown */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyDown";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Controller *arg1, int arg2, cocos2d::Event *arg3) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Controller");
                olua_push_int(L, (lua_Integer)arg2);
                olua_push_cppobj(L, arg3, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 3);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyDown";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (Controller *, int, Event *)> onKeyDown
    self->onKeyDown = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerController_get_onKeyRepeat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    void *callback_store_obj = (void *)self;
    std::string tag = "onKeyRepeat";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (Controller *, int, Event *)> onKeyRepeat
    std::function<void(cocos2d::Controller *, int, cocos2d::Event *)> ret = (std::function<void(cocos2d::Controller *, int, cocos2d::Event *)>)self->onKeyRepeat;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Controller *, int, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerController_set_onKeyRepeat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void(cocos2d::Controller *, int, cocos2d::Event *)> arg1;       /** onKeyRepeat */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyRepeat";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Controller *arg1, int arg2, cocos2d::Event *arg3) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Controller");
                olua_push_int(L, (lua_Integer)arg2);
                olua_push_cppobj(L, arg3, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 3);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyRepeat";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (Controller *, int, Event *)> onKeyRepeat
    self->onKeyRepeat = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventListenerController_get_onKeyUp(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    void *callback_store_obj = (void *)self;
    std::string tag = "onKeyUp";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (Controller *, int, Event *)> onKeyUp
    std::function<void(cocos2d::Controller *, int, cocos2d::Event *)> ret = (std::function<void(cocos2d::Controller *, int, cocos2d::Event *)>)self->onKeyUp;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Controller *, int, cocos2d::Event *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventListenerController_set_onKeyUp(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void(cocos2d::Controller *, int, cocos2d::Event *)> arg1;       /** onKeyUp */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerController");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyUp";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::Controller *arg1, int arg2, cocos2d::Event *arg3) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.Controller");
                olua_push_int(L, (lua_Integer)arg2);
                olua_push_cppobj(L, arg3, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 3);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onKeyUp";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (Controller *, int, Event *)> onKeyUp
    self->onKeyUp = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventListenerController(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerController", "cc.EventListener");
    oluacls_func(L, "__move", _cocos2d_EventListenerController___move);
    oluacls_func(L, "create", _cocos2d_EventListenerController_create);
    oluacls_prop(L, "onAxisEvent", _cocos2d_EventListenerController_get_onAxisEvent, _cocos2d_EventListenerController_set_onAxisEvent);
    oluacls_prop(L, "onConnected", _cocos2d_EventListenerController_get_onConnected, _cocos2d_EventListenerController_set_onConnected);
    oluacls_prop(L, "onDisconnected", _cocos2d_EventListenerController_get_onDisconnected, _cocos2d_EventListenerController_set_onDisconnected);
    oluacls_prop(L, "onKeyDown", _cocos2d_EventListenerController_get_onKeyDown, _cocos2d_EventListenerController_set_onKeyDown);
    oluacls_prop(L, "onKeyRepeat", _cocos2d_EventListenerController_get_onKeyRepeat, _cocos2d_EventListenerController_set_onKeyRepeat);
    oluacls_prop(L, "onKeyUp", _cocos2d_EventListenerController_get_onKeyUp, _cocos2d_EventListenerController_set_onKeyUp);
    oluacls_const_string(L, "LISTENER_ID", (const char *)cocos2d::EventListenerController::LISTENER_ID.c_str());

    olua_registerluatype<cocos2d::EventListenerController>(L, "cc.EventListenerController");

    return 1;
}

static int luaopen_cocos2d_EventTouch_EventCode(lua_State *L)
{
    oluacls_class(L, "cc.EventTouch.EventCode", nullptr);
    oluacls_const_integer(L, "BEGAN", (lua_Integer)cocos2d::EventTouch::EventCode::BEGAN);
    oluacls_const_integer(L, "CANCELLED", (lua_Integer)cocos2d::EventTouch::EventCode::CANCELLED);
    oluacls_const_integer(L, "ENDED", (lua_Integer)cocos2d::EventTouch::EventCode::ENDED);
    oluacls_const_integer(L, "MOVED", (lua_Integer)cocos2d::EventTouch::EventCode::MOVED);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_EventTouch___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventTouch *)olua_toobj(L, 1, "cc.EventTouch");
    olua_push_cppobj(L, self, "cc.EventTouch");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventTouch_getEventCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventTouch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventTouch");

    // cocos2d::EventTouch::EventCode getEventCode()
    cocos2d::EventTouch::EventCode ret = (cocos2d::EventTouch::EventCode)self->getEventCode();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventTouch_getTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventTouch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventTouch");

    // const std::vector<Touch *> &getTouches()
    const std::vector<cocos2d::Touch *> &ret = (const std::vector<cocos2d::Touch *> &)self->getTouches();
    int num_ret = olua_push_std_vector(L, ret, "cc.Touch");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventTouch_new(lua_State *L)
{
    olua_startinvoke(L);

    // EventTouch()
    cocos2d::EventTouch *ret = (cocos2d::EventTouch *)new cocos2d::EventTouch();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventTouch");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventTouch_setEventCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventTouch *self = nullptr;
    lua_Unsigned arg1 = 0;       /** eventCode */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventTouch");
    olua_check_uint(L, 2, &arg1);

    // void setEventCode(cocos2d::EventTouch::EventCode eventCode)
    self->setEventCode((cocos2d::EventTouch::EventCode)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventTouch_setTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventTouch *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventTouch");
    olua_check_std_vector(L, 2, arg1, "cc.Touch");

    // void setTouches(const std::vector<Touch *> &touches)
    self->setTouches(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventTouch(lua_State *L)
{
    oluacls_class(L, "cc.EventTouch", "cc.Event");
    oluacls_func(L, "__move", _cocos2d_EventTouch___move);
    oluacls_func(L, "getEventCode", _cocos2d_EventTouch_getEventCode);
    oluacls_func(L, "getTouches", _cocos2d_EventTouch_getTouches);
    oluacls_func(L, "new", _cocos2d_EventTouch_new);
    oluacls_func(L, "setEventCode", _cocos2d_EventTouch_setEventCode);
    oluacls_func(L, "setTouches", _cocos2d_EventTouch_setTouches);
    oluacls_prop(L, "eventCode", _cocos2d_EventTouch_getEventCode, _cocos2d_EventTouch_setEventCode);
    oluacls_prop(L, "touches", _cocos2d_EventTouch_getTouches, _cocos2d_EventTouch_setTouches);
    oluacls_const_integer(L, "MAX_TOUCHES", (lua_Integer)cocos2d::EventTouch::MAX_TOUCHES);

    olua_registerluatype<cocos2d::EventTouch>(L, "cc.EventTouch");

    return 1;
}

static int _cocos2d_EventKeyboard___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventKeyboard *)olua_toobj(L, 1, "cc.EventKeyboard");
    olua_push_cppobj(L, self, "cc.EventKeyboard");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventKeyboard_new(lua_State *L)
{
    olua_startinvoke(L);

    lua_Unsigned arg1 = 0;       /** keyCode */
    bool arg2 = false;       /** isPressed */

    olua_check_uint(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);

    // EventKeyboard(cocos2d::EventKeyboard::KeyCode keyCode, bool isPressed)
    cocos2d::EventKeyboard *ret = (cocos2d::EventKeyboard *)new cocos2d::EventKeyboard((cocos2d::EventKeyboard::KeyCode)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EventKeyboard");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EventKeyboard(lua_State *L)
{
    oluacls_class(L, "cc.EventKeyboard", "cc.Event");
    oluacls_func(L, "__move", _cocos2d_EventKeyboard___move);
    oluacls_func(L, "new", _cocos2d_EventKeyboard_new);

    olua_registerluatype<cocos2d::EventKeyboard>(L, "cc.EventKeyboard");

    return 1;
}

static int _cocos2d_EventAcceleration___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventAcceleration *)olua_toobj(L, 1, "cc.EventAcceleration");
    olua_push_cppobj(L, self, "cc.EventAcceleration");

    olua_endinvoke(L);

    return 1;
}

static int luaopen_cocos2d_EventAcceleration(lua_State *L)
{
    oluacls_class(L, "cc.EventAcceleration", "cc.Event");
    oluacls_func(L, "__move", _cocos2d_EventAcceleration___move);

    olua_registerluatype<cocos2d::EventAcceleration>(L, "cc.EventAcceleration");

    return 1;
}

static int _cocos2d_EventFocus___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventFocus *)olua_toobj(L, 1, "cc.EventFocus");
    olua_push_cppobj(L, self, "cc.EventFocus");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventFocus_new(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ui::Widget *arg1 = nullptr;       /** widgetLoseFocus */
    cocos2d::ui::Widget *arg2 = nullptr;       /** widgetGetFocus */

    olua_check_cppobj(L, 1, (void **)&arg1, "ccui.Widget");
    olua_check_cppobj(L, 2, (void **)&arg2, "ccui.Widget");

    // EventFocus(ui::Widget *widgetLoseFocus, ui::Widget *widgetGetFocus)
    cocos2d::EventFocus *ret = (cocos2d::EventFocus *)new cocos2d::EventFocus(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EventFocus");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EventFocus(lua_State *L)
{
    oluacls_class(L, "cc.EventFocus", "cc.Event");
    oluacls_func(L, "__move", _cocos2d_EventFocus___move);
    oluacls_func(L, "new", _cocos2d_EventFocus_new);

    olua_registerluatype<cocos2d::EventFocus>(L, "cc.EventFocus");

    return 1;
}

static int luaopen_cocos2d_EventMouse_MouseEventType(lua_State *L)
{
    oluacls_class(L, "cc.EventMouse.MouseEventType", nullptr);
    oluacls_const_integer(L, "MOUSE_DOWN", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_DOWN);
    oluacls_const_integer(L, "MOUSE_MOVE", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_MOVE);
    oluacls_const_integer(L, "MOUSE_NONE", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_NONE);
    oluacls_const_integer(L, "MOUSE_SCROLL", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_SCROLL);
    oluacls_const_integer(L, "MOUSE_UP", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_UP);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_EventMouse_MouseButton(lua_State *L)
{
    oluacls_class(L, "cc.EventMouse.MouseButton", nullptr);
    oluacls_const_integer(L, "BUTTON_4", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_4);
    oluacls_const_integer(L, "BUTTON_5", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_5);
    oluacls_const_integer(L, "BUTTON_6", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_6);
    oluacls_const_integer(L, "BUTTON_7", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_7);
    oluacls_const_integer(L, "BUTTON_8", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_8);
    oluacls_const_integer(L, "BUTTON_LEFT", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_LEFT);
    oluacls_const_integer(L, "BUTTON_MIDDLE", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_MIDDLE);
    oluacls_const_integer(L, "BUTTON_RIGHT", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_RIGHT);
    oluacls_const_integer(L, "BUTTON_UNSET", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_UNSET);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_EventMouse___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventMouse *)olua_toobj(L, 1, "cc.EventMouse");
    olua_push_cppobj(L, self, "cc.EventMouse");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventMouse_getCursorX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // float getCursorX()
    float ret = (float)self->getCursorX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getCursorY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // float getCursorY()
    float ret = (float)self->getCursorY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getDelta(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // cocos2d::Vec2 getDelta()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getDelta();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // cocos2d::Vec2 getLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocation();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // cocos2d::Vec2 getLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocationInView();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getMouseButton(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // cocos2d::EventMouse::MouseButton getMouseButton()
    cocos2d::EventMouse::MouseButton ret = (cocos2d::EventMouse::MouseButton)self->getMouseButton();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getPreviousLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // cocos2d::Vec2 getPreviousLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocation();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getPreviousLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // cocos2d::Vec2 getPreviousLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocationInView();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getScrollX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // float getScrollX()
    float ret = (float)self->getScrollX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getScrollY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // float getScrollY()
    float ret = (float)self->getScrollY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getStartLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // cocos2d::Vec2 getStartLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocation();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_getStartLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // cocos2d::Vec2 getStartLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocationInView();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventMouse_setCursorPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;
    lua_Number arg1 = 0;       /** x */
    lua_Number arg2 = 0;       /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setCursorPosition(float x, float y)
    self->setCursorPosition((float)arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventMouse_setMouseButton(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;
    lua_Unsigned arg1 = 0;       /** button */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");
    olua_check_uint(L, 2, &arg1);

    // void setMouseButton(cocos2d::EventMouse::MouseButton button)
    self->setMouseButton((cocos2d::EventMouse::MouseButton)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventMouse_setScrollData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;
    lua_Number arg1 = 0;       /** scrollX */
    lua_Number arg2 = 0;       /** scrollY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setScrollData(float scrollX, float scrollY)
    self->setScrollData((float)arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventMouse(lua_State *L)
{
    oluacls_class(L, "cc.EventMouse", "cc.Event");
    oluacls_func(L, "__move", _cocos2d_EventMouse___move);
    oluacls_func(L, "getCursorX", _cocos2d_EventMouse_getCursorX);
    oluacls_func(L, "getCursorY", _cocos2d_EventMouse_getCursorY);
    oluacls_func(L, "getDelta", _cocos2d_EventMouse_getDelta);
    oluacls_func(L, "getLocation", _cocos2d_EventMouse_getLocation);
    oluacls_func(L, "getLocationInView", _cocos2d_EventMouse_getLocationInView);
    oluacls_func(L, "getMouseButton", _cocos2d_EventMouse_getMouseButton);
    oluacls_func(L, "getPreviousLocation", _cocos2d_EventMouse_getPreviousLocation);
    oluacls_func(L, "getPreviousLocationInView", _cocos2d_EventMouse_getPreviousLocationInView);
    oluacls_func(L, "getScrollX", _cocos2d_EventMouse_getScrollX);
    oluacls_func(L, "getScrollY", _cocos2d_EventMouse_getScrollY);
    oluacls_func(L, "getStartLocation", _cocos2d_EventMouse_getStartLocation);
    oluacls_func(L, "getStartLocationInView", _cocos2d_EventMouse_getStartLocationInView);
    oluacls_func(L, "setCursorPosition", _cocos2d_EventMouse_setCursorPosition);
    oluacls_func(L, "setMouseButton", _cocos2d_EventMouse_setMouseButton);
    oluacls_func(L, "setScrollData", _cocos2d_EventMouse_setScrollData);
    oluacls_prop(L, "cursorX", _cocos2d_EventMouse_getCursorX, nullptr);
    oluacls_prop(L, "cursorY", _cocos2d_EventMouse_getCursorY, nullptr);
    oluacls_prop(L, "delta", _cocos2d_EventMouse_getDelta, nullptr);
    oluacls_prop(L, "location", _cocos2d_EventMouse_getLocation, nullptr);
    oluacls_prop(L, "locationInView", _cocos2d_EventMouse_getLocationInView, nullptr);
    oluacls_prop(L, "mouseButton", _cocos2d_EventMouse_getMouseButton, _cocos2d_EventMouse_setMouseButton);
    oluacls_prop(L, "previousLocation", _cocos2d_EventMouse_getPreviousLocation, nullptr);
    oluacls_prop(L, "previousLocationInView", _cocos2d_EventMouse_getPreviousLocationInView, nullptr);
    oluacls_prop(L, "scrollX", _cocos2d_EventMouse_getScrollX, nullptr);
    oluacls_prop(L, "scrollY", _cocos2d_EventMouse_getScrollY, nullptr);
    oluacls_prop(L, "startLocation", _cocos2d_EventMouse_getStartLocation, nullptr);
    oluacls_prop(L, "startLocationInView", _cocos2d_EventMouse_getStartLocationInView, nullptr);

    olua_registerluatype<cocos2d::EventMouse>(L, "cc.EventMouse");

    return 1;
}

static int luaopen_cocos2d_EventKeyboard_KeyCode(lua_State *L)
{
    oluacls_class(L, "cc.EventKeyboard.KeyCode", nullptr);
    oluacls_const_integer(L, "KEY_0", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_0);
    oluacls_const_integer(L, "KEY_1", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_1);
    oluacls_const_integer(L, "KEY_2", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_2);
    oluacls_const_integer(L, "KEY_3", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_3);
    oluacls_const_integer(L, "KEY_4", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_4);
    oluacls_const_integer(L, "KEY_5", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_5);
    oluacls_const_integer(L, "KEY_6", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_6);
    oluacls_const_integer(L, "KEY_7", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_7);
    oluacls_const_integer(L, "KEY_8", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_8);
    oluacls_const_integer(L, "KEY_9", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_9);
    oluacls_const_integer(L, "KEY_A", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_A);
    oluacls_const_integer(L, "KEY_ALT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ALT);
    oluacls_const_integer(L, "KEY_AMPERSAND", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_AMPERSAND);
    oluacls_const_integer(L, "KEY_APOSTROPHE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_APOSTROPHE);
    oluacls_const_integer(L, "KEY_ASTERISK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ASTERISK);
    oluacls_const_integer(L, "KEY_AT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_AT);
    oluacls_const_integer(L, "KEY_B", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_B);
    oluacls_const_integer(L, "KEY_BACK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACK);
    oluacls_const_integer(L, "KEY_BACKSPACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACKSPACE);
    oluacls_const_integer(L, "KEY_BACK_SLASH", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACK_SLASH);
    oluacls_const_integer(L, "KEY_BACK_TAB", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACK_TAB);
    oluacls_const_integer(L, "KEY_BAR", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BAR);
    oluacls_const_integer(L, "KEY_BREAK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BREAK);
    oluacls_const_integer(L, "KEY_C", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_C);
    oluacls_const_integer(L, "KEY_CAPITAL_A", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_A);
    oluacls_const_integer(L, "KEY_CAPITAL_B", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_B);
    oluacls_const_integer(L, "KEY_CAPITAL_C", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_C);
    oluacls_const_integer(L, "KEY_CAPITAL_D", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_D);
    oluacls_const_integer(L, "KEY_CAPITAL_E", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_E);
    oluacls_const_integer(L, "KEY_CAPITAL_F", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_F);
    oluacls_const_integer(L, "KEY_CAPITAL_G", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_G);
    oluacls_const_integer(L, "KEY_CAPITAL_H", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_H);
    oluacls_const_integer(L, "KEY_CAPITAL_I", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_I);
    oluacls_const_integer(L, "KEY_CAPITAL_J", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_J);
    oluacls_const_integer(L, "KEY_CAPITAL_K", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_K);
    oluacls_const_integer(L, "KEY_CAPITAL_L", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_L);
    oluacls_const_integer(L, "KEY_CAPITAL_M", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_M);
    oluacls_const_integer(L, "KEY_CAPITAL_N", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_N);
    oluacls_const_integer(L, "KEY_CAPITAL_O", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_O);
    oluacls_const_integer(L, "KEY_CAPITAL_P", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_P);
    oluacls_const_integer(L, "KEY_CAPITAL_Q", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Q);
    oluacls_const_integer(L, "KEY_CAPITAL_R", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_R);
    oluacls_const_integer(L, "KEY_CAPITAL_S", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_S);
    oluacls_const_integer(L, "KEY_CAPITAL_T", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_T);
    oluacls_const_integer(L, "KEY_CAPITAL_U", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_U);
    oluacls_const_integer(L, "KEY_CAPITAL_V", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_V);
    oluacls_const_integer(L, "KEY_CAPITAL_W", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_W);
    oluacls_const_integer(L, "KEY_CAPITAL_X", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_X);
    oluacls_const_integer(L, "KEY_CAPITAL_Y", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Y);
    oluacls_const_integer(L, "KEY_CAPITAL_Z", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Z);
    oluacls_const_integer(L, "KEY_CAPS_LOCK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPS_LOCK);
    oluacls_const_integer(L, "KEY_CIRCUMFLEX", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CIRCUMFLEX);
    oluacls_const_integer(L, "KEY_COLON", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_COLON);
    oluacls_const_integer(L, "KEY_COMMA", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_COMMA);
    oluacls_const_integer(L, "KEY_CTRL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CTRL);
    oluacls_const_integer(L, "KEY_D", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_D);
    oluacls_const_integer(L, "KEY_DELETE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DELETE);
    oluacls_const_integer(L, "KEY_DOLLAR", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DOLLAR);
    oluacls_const_integer(L, "KEY_DOWN_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DOWN_ARROW);
    oluacls_const_integer(L, "KEY_DPAD_CENTER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_CENTER);
    oluacls_const_integer(L, "KEY_DPAD_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_DOWN);
    oluacls_const_integer(L, "KEY_DPAD_LEFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_LEFT);
    oluacls_const_integer(L, "KEY_DPAD_RIGHT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_RIGHT);
    oluacls_const_integer(L, "KEY_DPAD_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_UP);
    oluacls_const_integer(L, "KEY_E", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_E);
    oluacls_const_integer(L, "KEY_END", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_END);
    oluacls_const_integer(L, "KEY_ENTER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ENTER);
    oluacls_const_integer(L, "KEY_EQUAL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_EQUAL);
    oluacls_const_integer(L, "KEY_ESCAPE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ESCAPE);
    oluacls_const_integer(L, "KEY_EURO", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_EURO);
    oluacls_const_integer(L, "KEY_EXCLAM", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_EXCLAM);
    oluacls_const_integer(L, "KEY_F", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F);
    oluacls_const_integer(L, "KEY_F1", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F1);
    oluacls_const_integer(L, "KEY_F10", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F10);
    oluacls_const_integer(L, "KEY_F11", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F11);
    oluacls_const_integer(L, "KEY_F12", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F12);
    oluacls_const_integer(L, "KEY_F2", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F2);
    oluacls_const_integer(L, "KEY_F3", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F3);
    oluacls_const_integer(L, "KEY_F4", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F4);
    oluacls_const_integer(L, "KEY_F5", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F5);
    oluacls_const_integer(L, "KEY_F6", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F6);
    oluacls_const_integer(L, "KEY_F7", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F7);
    oluacls_const_integer(L, "KEY_F8", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F8);
    oluacls_const_integer(L, "KEY_F9", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F9);
    oluacls_const_integer(L, "KEY_G", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_G);
    oluacls_const_integer(L, "KEY_GRAVE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_GRAVE);
    oluacls_const_integer(L, "KEY_GREATER_THAN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_GREATER_THAN);
    oluacls_const_integer(L, "KEY_H", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_H);
    oluacls_const_integer(L, "KEY_HOME", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_HOME);
    oluacls_const_integer(L, "KEY_HYPER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_HYPER);
    oluacls_const_integer(L, "KEY_I", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_I);
    oluacls_const_integer(L, "KEY_INSERT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_INSERT);
    oluacls_const_integer(L, "KEY_J", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_J);
    oluacls_const_integer(L, "KEY_K", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_K);
    oluacls_const_integer(L, "KEY_KP_DELETE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_DELETE);
    oluacls_const_integer(L, "KEY_KP_DIVIDE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_DIVIDE);
    oluacls_const_integer(L, "KEY_KP_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_DOWN);
    oluacls_const_integer(L, "KEY_KP_END", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_END);
    oluacls_const_integer(L, "KEY_KP_ENTER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_ENTER);
    oluacls_const_integer(L, "KEY_KP_FIVE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_FIVE);
    oluacls_const_integer(L, "KEY_KP_HOME", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_HOME);
    oluacls_const_integer(L, "KEY_KP_INSERT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_INSERT);
    oluacls_const_integer(L, "KEY_KP_LEFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_LEFT);
    oluacls_const_integer(L, "KEY_KP_MINUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_MINUS);
    oluacls_const_integer(L, "KEY_KP_MULTIPLY", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_MULTIPLY);
    oluacls_const_integer(L, "KEY_KP_PG_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_PG_DOWN);
    oluacls_const_integer(L, "KEY_KP_PG_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_PG_UP);
    oluacls_const_integer(L, "KEY_KP_PLUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_PLUS);
    oluacls_const_integer(L, "KEY_KP_RIGHT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_RIGHT);
    oluacls_const_integer(L, "KEY_KP_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_UP);
    oluacls_const_integer(L, "KEY_L", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_L);
    oluacls_const_integer(L, "KEY_LEFT_ALT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_ALT);
    oluacls_const_integer(L, "KEY_LEFT_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_ARROW);
    oluacls_const_integer(L, "KEY_LEFT_BRACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_BRACE);
    oluacls_const_integer(L, "KEY_LEFT_BRACKET", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_BRACKET);
    oluacls_const_integer(L, "KEY_LEFT_CTRL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_CTRL);
    oluacls_const_integer(L, "KEY_LEFT_PARENTHESIS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_PARENTHESIS);
    oluacls_const_integer(L, "KEY_LEFT_SHIFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_SHIFT);
    oluacls_const_integer(L, "KEY_LESS_THAN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LESS_THAN);
    oluacls_const_integer(L, "KEY_M", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_M);
    oluacls_const_integer(L, "KEY_MENU", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_MENU);
    oluacls_const_integer(L, "KEY_MIDDLE_DOT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_MIDDLE_DOT);
    oluacls_const_integer(L, "KEY_MINUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_MINUS);
    oluacls_const_integer(L, "KEY_N", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_N);
    oluacls_const_integer(L, "KEY_NONE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_NONE);
    oluacls_const_integer(L, "KEY_NUMBER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_NUMBER);
    oluacls_const_integer(L, "KEY_NUM_LOCK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_NUM_LOCK);
    oluacls_const_integer(L, "KEY_O", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_O);
    oluacls_const_integer(L, "KEY_P", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_P);
    oluacls_const_integer(L, "KEY_PAUSE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PAUSE);
    oluacls_const_integer(L, "KEY_PERCENT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PERCENT);
    oluacls_const_integer(L, "KEY_PERIOD", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PERIOD);
    oluacls_const_integer(L, "KEY_PG_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PG_DOWN);
    oluacls_const_integer(L, "KEY_PG_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PG_UP);
    oluacls_const_integer(L, "KEY_PLAY", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PLAY);
    oluacls_const_integer(L, "KEY_PLUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PLUS);
    oluacls_const_integer(L, "KEY_POUND", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_POUND);
    oluacls_const_integer(L, "KEY_PRINT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PRINT);
    oluacls_const_integer(L, "KEY_Q", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_Q);
    oluacls_const_integer(L, "KEY_QUESTION", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_QUESTION);
    oluacls_const_integer(L, "KEY_QUOTE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_QUOTE);
    oluacls_const_integer(L, "KEY_R", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_R);
    oluacls_const_integer(L, "KEY_RETURN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RETURN);
    oluacls_const_integer(L, "KEY_RIGHT_ALT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_ALT);
    oluacls_const_integer(L, "KEY_RIGHT_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_ARROW);
    oluacls_const_integer(L, "KEY_RIGHT_BRACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_BRACE);
    oluacls_const_integer(L, "KEY_RIGHT_BRACKET", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_BRACKET);
    oluacls_const_integer(L, "KEY_RIGHT_CTRL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_CTRL);
    oluacls_const_integer(L, "KEY_RIGHT_PARENTHESIS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_PARENTHESIS);
    oluacls_const_integer(L, "KEY_RIGHT_SHIFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_SHIFT);
    oluacls_const_integer(L, "KEY_S", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_S);
    oluacls_const_integer(L, "KEY_SCROLL_LOCK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SCROLL_LOCK);
    oluacls_const_integer(L, "KEY_SEARCH", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SEARCH);
    oluacls_const_integer(L, "KEY_SEMICOLON", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SEMICOLON);
    oluacls_const_integer(L, "KEY_SHIFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SHIFT);
    oluacls_const_integer(L, "KEY_SLASH", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SLASH);
    oluacls_const_integer(L, "KEY_SPACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SPACE);
    oluacls_const_integer(L, "KEY_SYSREQ", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SYSREQ);
    oluacls_const_integer(L, "KEY_T", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_T);
    oluacls_const_integer(L, "KEY_TAB", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_TAB);
    oluacls_const_integer(L, "KEY_TILDE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_TILDE);
    oluacls_const_integer(L, "KEY_U", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_U);
    oluacls_const_integer(L, "KEY_UNDERSCORE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_UNDERSCORE);
    oluacls_const_integer(L, "KEY_UP_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_UP_ARROW);
    oluacls_const_integer(L, "KEY_V", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_V);
    oluacls_const_integer(L, "KEY_W", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_W);
    oluacls_const_integer(L, "KEY_X", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_X);
    oluacls_const_integer(L, "KEY_Y", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_Y);
    oluacls_const_integer(L, "KEY_YEN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_YEN);
    oluacls_const_integer(L, "KEY_Z", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_Z);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_Touch_DispatchMode(lua_State *L)
{
    oluacls_class(L, "cc.Touch.DispatchMode", nullptr);
    oluacls_const_integer(L, "ALL_AT_ONCE", (lua_Integer)cocos2d::Touch::DispatchMode::ALL_AT_ONCE);
    oluacls_const_integer(L, "ONE_BY_ONE", (lua_Integer)cocos2d::Touch::DispatchMode::ONE_BY_ONE);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_EventController_ControllerEventType(lua_State *L)
{
    oluacls_class(L, "cc.EventController.ControllerEventType", nullptr);
    oluacls_const_integer(L, "AXIS_STATUS_CHANGED", (lua_Integer)cocos2d::EventController::ControllerEventType::AXIS_STATUS_CHANGED);
    oluacls_const_integer(L, "BUTTON_STATUS_CHANGED", (lua_Integer)cocos2d::EventController::ControllerEventType::BUTTON_STATUS_CHANGED);
    oluacls_const_integer(L, "CONNECTION", (lua_Integer)cocos2d::EventController::ControllerEventType::CONNECTION);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_EventController___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EventController *)olua_toobj(L, 1, "cc.EventController");
    olua_push_cppobj(L, self, "cc.EventController");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EventController_getController(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventController");

    // cocos2d::Controller *getController()
    cocos2d::Controller *ret = (cocos2d::Controller *)self->getController();
    int num_ret = olua_push_cppobj(L, ret, "cc.Controller");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventController_getControllerEventType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventController");

    // cocos2d::EventController::ControllerEventType getControllerEventType()
    cocos2d::EventController::ControllerEventType ret = (cocos2d::EventController::ControllerEventType)self->getControllerEventType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventController_getKeyCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventController");

    // int getKeyCode()
    int ret = (int)self->getKeyCode();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventController_isConnected(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventController");

    // bool isConnected()
    bool ret = (bool)self->isConnected();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventController_new1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Unsigned arg1 = 0;       /** type */
    cocos2d::Controller *arg2 = nullptr;       /** controller */
    lua_Integer arg3 = 0;       /** keyCode */

    olua_check_uint(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Controller");
    olua_check_int(L, 3, &arg3);

    // EventController(cocos2d::EventController::ControllerEventType type, cocos2d::Controller *controller, int keyCode)
    cocos2d::EventController *ret = (cocos2d::EventController *)new cocos2d::EventController((cocos2d::EventController::ControllerEventType)arg1, arg2, (int)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.EventController");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventController_new2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Unsigned arg1 = 0;       /** type */
    cocos2d::Controller *arg2 = nullptr;       /** controller */
    bool arg3 = false;       /** isConnected */

    olua_check_uint(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Controller");
    olua_check_bool(L, 3, &arg3);

    // EventController(cocos2d::EventController::ControllerEventType type, cocos2d::Controller *controller, bool isConnected)
    cocos2d::EventController *ret = (cocos2d::EventController *)new cocos2d::EventController((cocos2d::EventController::ControllerEventType)arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.EventController");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EventController_new(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        if ((olua_is_uint(L, 1)) && (olua_is_cppobj(L, 2, "cc.Controller")) && (olua_is_int(L, 3))) {
            // EventController(cocos2d::EventController::ControllerEventType type, cocos2d::Controller *controller, int keyCode)
            return _cocos2d_EventController_new1(L);
        }

        // if ((olua_is_uint(L, 1)) && (olua_is_cppobj(L, 2, "cc.Controller")) && (olua_is_bool(L, 3))) {
            // EventController(cocos2d::EventController::ControllerEventType type, cocos2d::Controller *controller, bool isConnected)
            return _cocos2d_EventController_new2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventController::new' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_EventController_setConnectStatus(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;
    bool arg1 = false;       /** isConnected */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventController");
    olua_check_bool(L, 2, &arg1);

    // void setConnectStatus(bool isConnected)
    self->setConnectStatus(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_EventController_setKeyCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;
    lua_Integer arg1 = 0;       /** keyCode */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventController");
    olua_check_int(L, 2, &arg1);

    // void setKeyCode(int keyCode)
    self->setKeyCode((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EventController(lua_State *L)
{
    oluacls_class(L, "cc.EventController", "cc.Event");
    oluacls_func(L, "__move", _cocos2d_EventController___move);
    oluacls_func(L, "getController", _cocos2d_EventController_getController);
    oluacls_func(L, "getControllerEventType", _cocos2d_EventController_getControllerEventType);
    oluacls_func(L, "getKeyCode", _cocos2d_EventController_getKeyCode);
    oluacls_func(L, "isConnected", _cocos2d_EventController_isConnected);
    oluacls_func(L, "new", _cocos2d_EventController_new);
    oluacls_func(L, "setConnectStatus", _cocos2d_EventController_setConnectStatus);
    oluacls_func(L, "setKeyCode", _cocos2d_EventController_setKeyCode);
    oluacls_prop(L, "connected", _cocos2d_EventController_isConnected, nullptr);
    oluacls_prop(L, "controller", _cocos2d_EventController_getController, nullptr);
    oluacls_prop(L, "controllerEventType", _cocos2d_EventController_getControllerEventType, nullptr);
    oluacls_prop(L, "keyCode", _cocos2d_EventController_getKeyCode, _cocos2d_EventController_setKeyCode);

    olua_registerluatype<cocos2d::EventController>(L, "cc.EventController");

    return 1;
}

static int _cocos2d_Touch___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Touch *)olua_toobj(L, 1, "cc.Touch");
    olua_push_cppobj(L, self, "cc.Touch");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Touch_getCurrentForce(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // float getCurrentForce()
    float ret = (float)self->getCurrentForce();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_getDelta(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // cocos2d::Vec2 getDelta()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getDelta();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_getID(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // int getID()
    int ret = (int)self->getID();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_getLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // cocos2d::Vec2 getLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocation();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_getLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // cocos2d::Vec2 getLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocationInView();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_getMaxForce(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // float getMaxForce()
    float ret = (float)self->getMaxForce();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_getPreviousLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // cocos2d::Vec2 getPreviousLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocation();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_getPreviousLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // cocos2d::Vec2 getPreviousLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocationInView();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_getStartLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // cocos2d::Vec2 getStartLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocation();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_getStartLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // cocos2d::Vec2 getStartLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocationInView();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_new(lua_State *L)
{
    olua_startinvoke(L);

    // Touch()
    cocos2d::Touch *ret = (cocos2d::Touch *)new cocos2d::Touch();
    int num_ret = olua_push_cppobj(L, ret, "cc.Touch");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Touch_setTouchInfo1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;
    lua_Integer arg1 = 0;       /** id */
    lua_Number arg2 = 0;       /** x */
    lua_Number arg3 = 0;       /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setTouchInfo(int id, float x, float y)
    self->setTouchInfo((int)arg1, (float)arg2, (float)arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Touch_setTouchInfo2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;
    lua_Integer arg1 = 0;       /** id */
    lua_Number arg2 = 0;       /** x */
    lua_Number arg3 = 0;       /** y */
    lua_Number arg4 = 0;       /** force */
    lua_Number arg5 = 0;       /** maxForce */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void setTouchInfo(int id, float x, float y, float force, float maxForce)
    self->setTouchInfo((int)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Touch_setTouchInfo(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 3) {
        // if ((olua_is_int(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4))) {
            // void setTouchInfo(int id, float x, float y)
            return _cocos2d_Touch_setTouchInfo1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_int(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5)) && (olua_is_number(L, 6))) {
            // void setTouchInfo(int id, float x, float y, float force, float maxForce)
            return _cocos2d_Touch_setTouchInfo2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Touch::setTouchInfo' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_Touch(lua_State *L)
{
    oluacls_class(L, "cc.Touch", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Touch___move);
    oluacls_func(L, "getCurrentForce", _cocos2d_Touch_getCurrentForce);
    oluacls_func(L, "getDelta", _cocos2d_Touch_getDelta);
    oluacls_func(L, "getID", _cocos2d_Touch_getID);
    oluacls_func(L, "getLocation", _cocos2d_Touch_getLocation);
    oluacls_func(L, "getLocationInView", _cocos2d_Touch_getLocationInView);
    oluacls_func(L, "getMaxForce", _cocos2d_Touch_getMaxForce);
    oluacls_func(L, "getPreviousLocation", _cocos2d_Touch_getPreviousLocation);
    oluacls_func(L, "getPreviousLocationInView", _cocos2d_Touch_getPreviousLocationInView);
    oluacls_func(L, "getStartLocation", _cocos2d_Touch_getStartLocation);
    oluacls_func(L, "getStartLocationInView", _cocos2d_Touch_getStartLocationInView);
    oluacls_func(L, "new", _cocos2d_Touch_new);
    oluacls_func(L, "setTouchInfo", _cocos2d_Touch_setTouchInfo);
    oluacls_prop(L, "currentForce", _cocos2d_Touch_getCurrentForce, nullptr);
    oluacls_prop(L, "delta", _cocos2d_Touch_getDelta, nullptr);
    oluacls_prop(L, "id", _cocos2d_Touch_getID, nullptr);
    oluacls_prop(L, "location", _cocos2d_Touch_getLocation, nullptr);
    oluacls_prop(L, "locationInView", _cocos2d_Touch_getLocationInView, nullptr);
    oluacls_prop(L, "maxForce", _cocos2d_Touch_getMaxForce, nullptr);
    oluacls_prop(L, "previousLocation", _cocos2d_Touch_getPreviousLocation, nullptr);
    oluacls_prop(L, "previousLocationInView", _cocos2d_Touch_getPreviousLocationInView, nullptr);
    oluacls_prop(L, "startLocation", _cocos2d_Touch_getStartLocation, nullptr);
    oluacls_prop(L, "startLocationInView", _cocos2d_Touch_getStartLocationInView, nullptr);

    olua_registerluatype<cocos2d::Touch>(L, "cc.Touch");

    return 1;
}

static int luaopen_cocos2d_Controller_Key(lua_State *L)
{
    oluacls_class(L, "cc.Controller.Key", nullptr);
    oluacls_const_integer(L, "AXIS_LEFT_TRIGGER", (lua_Integer)cocos2d::Controller::Key::AXIS_LEFT_TRIGGER);
    oluacls_const_integer(L, "AXIS_RIGHT_TRIGGER", (lua_Integer)cocos2d::Controller::Key::AXIS_RIGHT_TRIGGER);
    oluacls_const_integer(L, "BUTTON_A", (lua_Integer)cocos2d::Controller::Key::BUTTON_A);
    oluacls_const_integer(L, "BUTTON_B", (lua_Integer)cocos2d::Controller::Key::BUTTON_B);
    oluacls_const_integer(L, "BUTTON_C", (lua_Integer)cocos2d::Controller::Key::BUTTON_C);
    oluacls_const_integer(L, "BUTTON_DPAD_CENTER", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_CENTER);
    oluacls_const_integer(L, "BUTTON_DPAD_DOWN", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_DOWN);
    oluacls_const_integer(L, "BUTTON_DPAD_LEFT", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_LEFT);
    oluacls_const_integer(L, "BUTTON_DPAD_RIGHT", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_RIGHT);
    oluacls_const_integer(L, "BUTTON_DPAD_UP", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_UP);
    oluacls_const_integer(L, "BUTTON_LEFT_SHOULDER", (lua_Integer)cocos2d::Controller::Key::BUTTON_LEFT_SHOULDER);
    oluacls_const_integer(L, "BUTTON_LEFT_THUMBSTICK", (lua_Integer)cocos2d::Controller::Key::BUTTON_LEFT_THUMBSTICK);
    oluacls_const_integer(L, "BUTTON_PAUSE", (lua_Integer)cocos2d::Controller::Key::BUTTON_PAUSE);
    oluacls_const_integer(L, "BUTTON_RIGHT_SHOULDER", (lua_Integer)cocos2d::Controller::Key::BUTTON_RIGHT_SHOULDER);
    oluacls_const_integer(L, "BUTTON_RIGHT_THUMBSTICK", (lua_Integer)cocos2d::Controller::Key::BUTTON_RIGHT_THUMBSTICK);
    oluacls_const_integer(L, "BUTTON_SELECT", (lua_Integer)cocos2d::Controller::Key::BUTTON_SELECT);
    oluacls_const_integer(L, "BUTTON_START", (lua_Integer)cocos2d::Controller::Key::BUTTON_START);
    oluacls_const_integer(L, "BUTTON_X", (lua_Integer)cocos2d::Controller::Key::BUTTON_X);
    oluacls_const_integer(L, "BUTTON_Y", (lua_Integer)cocos2d::Controller::Key::BUTTON_Y);
    oluacls_const_integer(L, "BUTTON_Z", (lua_Integer)cocos2d::Controller::Key::BUTTON_Z);
    oluacls_const_integer(L, "JOYSTICK_LEFT_X", (lua_Integer)cocos2d::Controller::Key::JOYSTICK_LEFT_X);
    oluacls_const_integer(L, "JOYSTICK_LEFT_Y", (lua_Integer)cocos2d::Controller::Key::JOYSTICK_LEFT_Y);
    oluacls_const_integer(L, "JOYSTICK_RIGHT_X", (lua_Integer)cocos2d::Controller::Key::JOYSTICK_RIGHT_X);
    oluacls_const_integer(L, "JOYSTICK_RIGHT_Y", (lua_Integer)cocos2d::Controller::Key::JOYSTICK_RIGHT_Y);
    oluacls_const_integer(L, "KEY_MAX", (lua_Integer)cocos2d::Controller::Key::KEY_MAX);
    oluacls_const_integer(L, "KEY_NONE", (lua_Integer)cocos2d::Controller::Key::KEY_NONE);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_Controller___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Controller *)olua_toobj(L, 1, "cc.Controller");
    olua_push_cppobj(L, self, "cc.Controller");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Controller_getAllController(lua_State *L)
{
    olua_startinvoke(L);

    // static const std::vector<Controller *> &getAllController()
    const std::vector<cocos2d::Controller *> &ret = (const std::vector<cocos2d::Controller *> &)cocos2d::Controller::getAllController();
    int num_ret = olua_push_std_vector(L, ret, "cc.Controller");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Controller_getControllerByDeviceId(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** deviceId */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::Controller *getControllerByDeviceId(int deviceId)
    cocos2d::Controller *ret = (cocos2d::Controller *)cocos2d::Controller::getControllerByDeviceId((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Controller");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Controller_getControllerByTag(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** tag */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::Controller *getControllerByTag(int tag)
    cocos2d::Controller *ret = (cocos2d::Controller *)cocos2d::Controller::getControllerByTag((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Controller");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Controller_getDeviceId(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Controller");

    // int getDeviceId()
    int ret = (int)self->getDeviceId();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Controller_getDeviceName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Controller");

    // const std::string &getDeviceName()
    const std::string &ret = (const std::string &)self->getDeviceName();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Controller_getKeyStatus(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;
    lua_Integer arg1 = 0;       /** keyCode */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Controller");
    olua_check_int(L, 2, &arg1);

    // const cocos2d::Controller::KeyStatus &getKeyStatus(int keyCode)
    const cocos2d::Controller::KeyStatus &ret = (const cocos2d::Controller::KeyStatus &)self->getKeyStatus((int)arg1);
    int num_ret = auto_olua_push_cocos2d_Controller_KeyStatus(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Controller_getTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Controller");

    // int getTag()
    int ret = (int)self->getTag();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Controller_isConnected(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Controller");

    // bool isConnected()
    bool ret = (bool)self->isConnected();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Controller_setTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Controller");
    olua_check_int(L, 2, &arg1);

    // void setTag(int tag)
    self->setTag((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Controller_startDiscoveryController(lua_State *L)
{
    olua_startinvoke(L);

    // static void startDiscoveryController()
    cocos2d::Controller::startDiscoveryController();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Controller_stopDiscoveryController(lua_State *L)
{
    olua_startinvoke(L);

    // static void stopDiscoveryController()
    cocos2d::Controller::stopDiscoveryController();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Controller(lua_State *L)
{
    oluacls_class(L, "cc.Controller", nullptr);
    oluacls_func(L, "__move", _cocos2d_Controller___move);
    oluacls_func(L, "getAllController", _cocos2d_Controller_getAllController);
    oluacls_func(L, "getControllerByDeviceId", _cocos2d_Controller_getControllerByDeviceId);
    oluacls_func(L, "getControllerByTag", _cocos2d_Controller_getControllerByTag);
    oluacls_func(L, "getDeviceId", _cocos2d_Controller_getDeviceId);
    oluacls_func(L, "getDeviceName", _cocos2d_Controller_getDeviceName);
    oluacls_func(L, "getKeyStatus", _cocos2d_Controller_getKeyStatus);
    oluacls_func(L, "getTag", _cocos2d_Controller_getTag);
    oluacls_func(L, "isConnected", _cocos2d_Controller_isConnected);
    oluacls_func(L, "setTag", _cocos2d_Controller_setTag);
    oluacls_func(L, "startDiscoveryController", _cocos2d_Controller_startDiscoveryController);
    oluacls_func(L, "stopDiscoveryController", _cocos2d_Controller_stopDiscoveryController);
    oluacls_prop(L, "allController", _cocos2d_Controller_getAllController, nullptr);
    oluacls_prop(L, "connected", _cocos2d_Controller_isConnected, nullptr);
    oluacls_prop(L, "deviceId", _cocos2d_Controller_getDeviceId, nullptr);
    oluacls_prop(L, "deviceName", _cocos2d_Controller_getDeviceName, nullptr);
    oluacls_prop(L, "tag", _cocos2d_Controller_getTag, _cocos2d_Controller_setTag);
    oluacls_const_integer(L, "TAG_UNSET", (lua_Integer)cocos2d::Controller::TAG_UNSET);

    olua_registerluatype<cocos2d::Controller>(L, "cc.Controller");

    return 1;
}

static int _cocos2d_experimental_AudioProfile___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::experimental::AudioProfile *)olua_toobj(L, 1, "cc.AudioProfile");
    lua_pushstring(L, ".ownership");
    olua_getvariable(L, 1);
    if (lua_toboolean(L, -1) && self) {
        olua_setrawdata(L, 1, nullptr);
        delete self;
    }

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioProfile___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::experimental::AudioProfile *)olua_toobj(L, 1, "cc.AudioProfile");
    olua_push_cppobj(L, self, "cc.AudioProfile");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_experimental_AudioProfile_new(lua_State *L)
{
    olua_startinvoke(L);

    // AudioProfile()
    cocos2d::experimental::AudioProfile *ret = (cocos2d::experimental::AudioProfile *)new cocos2d::experimental::AudioProfile();
    int num_ret = olua_push_cppobj(L, ret, "cc.AudioProfile");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioProfile_get_maxInstances(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::experimental::AudioProfile *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AudioProfile");

    // unsigned int maxInstances
    unsigned int ret = (unsigned int)self->maxInstances;
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioProfile_set_maxInstances(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::experimental::AudioProfile *self = nullptr;
    lua_Unsigned arg1 = 0;       /** maxInstances */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AudioProfile");
    olua_check_uint(L, 2, &arg1);

    // unsigned int maxInstances
    self->maxInstances = (unsigned int)arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioProfile_get_minDelay(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::experimental::AudioProfile *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AudioProfile");

    // double minDelay
    double ret = (double)self->minDelay;
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioProfile_set_minDelay(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::experimental::AudioProfile *self = nullptr;
    lua_Number arg1 = 0;       /** minDelay */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AudioProfile");
    olua_check_number(L, 2, &arg1);

    // double minDelay
    self->minDelay = (double)arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioProfile_get_name(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::experimental::AudioProfile *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AudioProfile");

    // std::string name
    std::string ret = (std::string)self->name;
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioProfile_set_name(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::experimental::AudioProfile *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AudioProfile");
    olua_check_std_string(L, 2, &arg1);

    // std::string name
    self->name = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_experimental_AudioProfile(lua_State *L)
{
    oluacls_class(L, "cc.AudioProfile", nullptr);
    oluacls_func(L, "__gc", _cocos2d_experimental_AudioProfile___gc);
    oluacls_func(L, "__move", _cocos2d_experimental_AudioProfile___move);
    oluacls_func(L, "new", _cocos2d_experimental_AudioProfile_new);
    oluacls_prop(L, "maxInstances", _cocos2d_experimental_AudioProfile_get_maxInstances, _cocos2d_experimental_AudioProfile_set_maxInstances);
    oluacls_prop(L, "minDelay", _cocos2d_experimental_AudioProfile_get_minDelay, _cocos2d_experimental_AudioProfile_set_minDelay);
    oluacls_prop(L, "name", _cocos2d_experimental_AudioProfile_get_name, _cocos2d_experimental_AudioProfile_set_name);

    olua_registerluatype<cocos2d::experimental::AudioProfile>(L, "cc.AudioProfile");

    return 1;
}

static int luaopen_cocos2d_experimental_AudioEngine_AudioState(lua_State *L)
{
    oluacls_class(L, "cc.AudioEngine.AudioState", nullptr);
    oluacls_const_integer(L, "ERROR", (lua_Integer)cocos2d::experimental::AudioEngine::AudioState::ERROR);
    oluacls_const_integer(L, "INITIALIZING", (lua_Integer)cocos2d::experimental::AudioEngine::AudioState::INITIALIZING);
    oluacls_const_integer(L, "PAUSED", (lua_Integer)cocos2d::experimental::AudioEngine::AudioState::PAUSED);
    oluacls_const_integer(L, "PLAYING", (lua_Integer)cocos2d::experimental::AudioEngine::AudioState::PLAYING);

    oluacls_asenum(L);

    return 1;
}

NS_CC_BEGIN
class LuaAudioEngine : public cocos2d::experimental::AudioEngine
{
public:
    static std::list<int> getAudioIDs(const std::string &path)
    {
        std::list<int> list;
        auto it = _audioPathIDMap.find(path);
        if (it != _audioPathIDMap.end()) {
            list = it->second;
        }
        return list;
    }
};
NS_CC_END

static const std::string makeAudioEngineFinishCallbackTag(lua_Integer id)
{
    if (id < 0) {
        return "finishCallback.";
    } else {
        char buf[64];
        sprintf(buf, "finishCallback.%d", (int)id);
        return std::string(buf);
    }
}

static int _cocos2d_experimental_AudioEngine___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::experimental::AudioEngine *)olua_toobj(L, 1, "cc.AudioEngine");
    olua_push_cppobj(L, self, "cc.AudioEngine");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_experimental_AudioEngine_end(lua_State *L)
{
    olua_startinvoke(L);

    // static void end()
    cocos2d::experimental::AudioEngine::end();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_getCurrentTime(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */

    olua_check_int(L, 1, &arg1);

    // static float getCurrentTime(int audioID)
    float ret = (float)cocos2d::experimental::AudioEngine::getCurrentTime((int)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_getDefaultProfile(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::experimental::AudioProfile *getDefaultProfile()
    cocos2d::experimental::AudioProfile *ret = (cocos2d::experimental::AudioProfile *)cocos2d::experimental::AudioEngine::getDefaultProfile();
    int num_ret = olua_push_cppobj(L, ret, "cc.AudioProfile");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_getDuration(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */

    olua_check_int(L, 1, &arg1);

    // static float getDuration(int audioID)
    float ret = (float)cocos2d::experimental::AudioEngine::getDuration((int)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_getMaxAudioInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static int getMaxAudioInstance()
    int ret = (int)cocos2d::experimental::AudioEngine::getMaxAudioInstance();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_getPlayingAudioCount(lua_State *L)
{
    olua_startinvoke(L);

    // static int getPlayingAudioCount()
    int ret = (int)cocos2d::experimental::AudioEngine::getPlayingAudioCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_getProfile1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::experimental::AudioProfile *getProfile(int audioID)
    cocos2d::experimental::AudioProfile *ret = (cocos2d::experimental::AudioProfile *)cocos2d::experimental::AudioEngine::getProfile((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.AudioProfile");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_getProfile2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** profileName */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::experimental::AudioProfile *getProfile(const std::string &profileName)
    cocos2d::experimental::AudioProfile *ret = (cocos2d::experimental::AudioProfile *)cocos2d::experimental::AudioEngine::getProfile(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.AudioProfile");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_getProfile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        if ((olua_is_int(L, 1))) {
            // static cocos2d::experimental::AudioProfile *getProfile(int audioID)
            return _cocos2d_experimental_AudioEngine_getProfile1(L);
        }

        // if ((olua_is_std_string(L, 1))) {
            // static cocos2d::experimental::AudioProfile *getProfile(const std::string &profileName)
            return _cocos2d_experimental_AudioEngine_getProfile2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::experimental::AudioEngine::getProfile' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_getState(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::experimental::AudioEngine::AudioState getState(int audioID)
    cocos2d::experimental::AudioEngine::AudioState ret = (cocos2d::experimental::AudioEngine::AudioState)cocos2d::experimental::AudioEngine::getState((int)arg1);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_getVolume(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */

    olua_check_int(L, 1, &arg1);

    // static float getVolume(int audioID)
    float ret = (float)cocos2d::experimental::AudioEngine::getVolume((int)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    // static bool isEnabled()
    bool ret = (bool)cocos2d::experimental::AudioEngine::isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_isLoop(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */

    olua_check_int(L, 1, &arg1);

    // static bool isLoop(int audioID)
    bool ret = (bool)cocos2d::experimental::AudioEngine::isLoop((int)arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_lazyInit(lua_State *L)
{
    olua_startinvoke(L);

    // static bool lazyInit()
    bool ret = (bool)cocos2d::experimental::AudioEngine::lazyInit();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_pause(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */

    olua_check_int(L, 1, &arg1);

    // static void pause(int audioID)
    cocos2d::experimental::AudioEngine::pause((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_pauseAll(lua_State *L)
{
    olua_startinvoke(L);

    // static void pauseAll()
    cocos2d::experimental::AudioEngine::pauseAll();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_play2d1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */
    bool arg2 = false;       /** loop */
    lua_Number arg3 = 0;       /** volume */
    cocos2d::experimental::AudioProfile *arg4 = nullptr;       /** profile */

    olua_check_std_string(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_cppobj(L, 4, (void **)&arg4, "cc.AudioProfile");

    // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional const cocos2d::experimental::AudioProfile *profile)
    int ret = (int)cocos2d::experimental::AudioEngine::play2d(arg1, arg2, (float)arg3, arg4);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_play2d2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */

    olua_check_std_string(L, 1, &arg1);

    // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional const cocos2d::experimental::AudioProfile *profile)
    int ret = (int)cocos2d::experimental::AudioEngine::play2d(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_play2d3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */
    bool arg2 = false;       /** loop */

    olua_check_std_string(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);

    // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional const cocos2d::experimental::AudioProfile *profile)
    int ret = (int)cocos2d::experimental::AudioEngine::play2d(arg1, arg2);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_play2d4(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */
    bool arg2 = false;       /** loop */
    lua_Number arg3 = 0;       /** volume */

    olua_check_std_string(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional const cocos2d::experimental::AudioProfile *profile)
    int ret = (int)cocos2d::experimental::AudioEngine::play2d(arg1, arg2, (float)arg3);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_play2d(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 1))) {
            // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional const cocos2d::experimental::AudioProfile *profile)
            return _cocos2d_experimental_AudioEngine_play2d2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_bool(L, 2))) {
            // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional const cocos2d::experimental::AudioProfile *profile)
            return _cocos2d_experimental_AudioEngine_play2d3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_bool(L, 2)) && (olua_is_number(L, 3))) {
            // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional const cocos2d::experimental::AudioProfile *profile)
            return _cocos2d_experimental_AudioEngine_play2d4(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_bool(L, 2)) && (olua_is_number(L, 3)) && (olua_is_cppobj(L, 4, "cc.AudioProfile"))) {
            // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional const cocos2d::experimental::AudioProfile *profile)
            return _cocos2d_experimental_AudioEngine_play2d1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::experimental::AudioEngine::play2d' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_preload1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */

    olua_check_std_string(L, 1, &arg1);

    // static void preload(const std::string& filePath)
    cocos2d::experimental::AudioEngine::preload(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_preload2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */
    std::function<void(bool)> arg2;       /** callback */

    olua_check_std_string(L, 1, &arg1);

    void *callback_store_obj = (void *)olua_getstoreobj(L, "cc.AudioEngine");
    std::string tag = "preload";
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg2 = [callback_store_obj, func, MT](bool arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_bool(L, arg1);

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // static void preload(const std::string& filePath, std::function<void(bool isSuccess)> callback)
    cocos2d::experimental::AudioEngine::preload(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_preload(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 1))) {
            // static void preload(const std::string& filePath)
            return _cocos2d_experimental_AudioEngine_preload1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_function(L, 2))) {
            // static void preload(const std::string& filePath, std::function<void(bool isSuccess)> callback)
            return _cocos2d_experimental_AudioEngine_preload2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::experimental::AudioEngine::preload' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_resume(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */

    olua_check_int(L, 1, &arg1);

    // static void resume(int audioID)
    cocos2d::experimental::AudioEngine::resume((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_resumeAll(lua_State *L)
{
    olua_startinvoke(L);

    // static void resumeAll()
    cocos2d::experimental::AudioEngine::resumeAll();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_setCurrentTime(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */
    lua_Number arg2 = 0;       /** sec */

    olua_check_int(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static bool setCurrentTime(int audioID, float sec)
    bool ret = (bool)cocos2d::experimental::AudioEngine::setCurrentTime((int)arg1, (float)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** isEnabled */

    olua_check_bool(L, 1, &arg1);

    // static void setEnabled(bool isEnabled)
    cocos2d::experimental::AudioEngine::setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_setFinishCallback(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */
    std::function<void(int, const std::string &)> arg2;       /** callback */

    olua_check_int(L, 1, &arg1);

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)olua_getstoreobj(L, "cc.AudioEngine");
        std::string tag = makeAudioEngineFinishCallbackTag(arg1);
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg2 = [callback_store_obj, func, MT](int arg1, const std::string &arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                olua_push_int(L, (lua_Integer)arg1);
                olua_push_std_string(L, arg2);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_TAG_WHOLE);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)olua_getstoreobj(L, "cc.AudioEngine");
        std::string tag = makeAudioEngineFinishCallbackTag(arg1);
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg2 = nullptr;
    }

    // static void setFinishCallback(int audioID, @nullable const std::function<void(int,const std::string&)>& callback)
    cocos2d::experimental::AudioEngine::setFinishCallback((int)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_setLoop(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */
    bool arg2 = false;       /** loop */

    olua_check_int(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);

    // static void setLoop(int audioID, bool loop)
    cocos2d::experimental::AudioEngine::setLoop((int)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_setMaxAudioInstance(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** maxInstances */

    olua_check_int(L, 1, &arg1);

    // static bool setMaxAudioInstance(int maxInstances)
    bool ret = (bool)cocos2d::experimental::AudioEngine::setMaxAudioInstance((int)arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_experimental_AudioEngine_setVolume(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */
    lua_Number arg2 = 0;       /** volume */

    olua_check_int(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static void setVolume(int audioID, float volume)
    cocos2d::experimental::AudioEngine::setVolume((int)arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_stop(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** audioID */

    olua_check_int(L, 1, &arg1);

    std::string tag = makeAudioEngineFinishCallbackTag(arg1);
    void *callback_store_obj = (void *)olua_getstoreobj(L, "cc.AudioEngine");
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // static void stop(int audioID)
    cocos2d::experimental::AudioEngine::stop((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_stopAll(lua_State *L)
{
    olua_startinvoke(L);

    std::string tag = makeAudioEngineFinishCallbackTag(-1);
    void *callback_store_obj = (void *)olua_getstoreobj(L, "cc.AudioEngine");
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBSTARTWITH);

    // static void stopAll()
    cocos2d::experimental::AudioEngine::stopAll();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_uncache(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */

    olua_check_std_string(L, 1, &arg1);

    // inject code before call
    std::string path = olua_checkstring(L, 1);
    std::list<int> ids = cocos2d::LuaAudioEngine::getAudioIDs(path);
    const char *cls = olua_getluatype<cocos2d::experimental::AudioEngine>(L);
    void *callback_store_obj = (void *)olua_getstoreobj(L, cls);
    for (auto id : ids) {
        std::string tag = makeAudioEngineFinishCallbackTag((lua_Integer)id);
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
    }

    // static void uncache(const std::string &filePath)
    cocos2d::experimental::AudioEngine::uncache(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_experimental_AudioEngine_uncacheAll(lua_State *L)
{
    olua_startinvoke(L);

    std::string tag = makeAudioEngineFinishCallbackTag(-1);
    void *callback_store_obj = (void *)olua_getstoreobj(L, "cc.AudioEngine");
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBSTARTWITH);

    // static void uncacheAll()
    cocos2d::experimental::AudioEngine::uncacheAll();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_experimental_AudioEngine(lua_State *L)
{
    oluacls_class(L, "cc.AudioEngine", nullptr);
    oluacls_func(L, "__move", _cocos2d_experimental_AudioEngine___move);
    oluacls_func(L, "end", _cocos2d_experimental_AudioEngine_end);
    oluacls_func(L, "getCurrentTime", _cocos2d_experimental_AudioEngine_getCurrentTime);
    oluacls_func(L, "getDefaultProfile", _cocos2d_experimental_AudioEngine_getDefaultProfile);
    oluacls_func(L, "getDuration", _cocos2d_experimental_AudioEngine_getDuration);
    oluacls_func(L, "getMaxAudioInstance", _cocos2d_experimental_AudioEngine_getMaxAudioInstance);
    oluacls_func(L, "getPlayingAudioCount", _cocos2d_experimental_AudioEngine_getPlayingAudioCount);
    oluacls_func(L, "getProfile", _cocos2d_experimental_AudioEngine_getProfile);
    oluacls_func(L, "getState", _cocos2d_experimental_AudioEngine_getState);
    oluacls_func(L, "getVolume", _cocos2d_experimental_AudioEngine_getVolume);
    oluacls_func(L, "isEnabled", _cocos2d_experimental_AudioEngine_isEnabled);
    oluacls_func(L, "isLoop", _cocos2d_experimental_AudioEngine_isLoop);
    oluacls_func(L, "lazyInit", _cocos2d_experimental_AudioEngine_lazyInit);
    oluacls_func(L, "pause", _cocos2d_experimental_AudioEngine_pause);
    oluacls_func(L, "pauseAll", _cocos2d_experimental_AudioEngine_pauseAll);
    oluacls_func(L, "play2d", _cocos2d_experimental_AudioEngine_play2d);
    oluacls_func(L, "preload", _cocos2d_experimental_AudioEngine_preload);
    oluacls_func(L, "resume", _cocos2d_experimental_AudioEngine_resume);
    oluacls_func(L, "resumeAll", _cocos2d_experimental_AudioEngine_resumeAll);
    oluacls_func(L, "setCurrentTime", _cocos2d_experimental_AudioEngine_setCurrentTime);
    oluacls_func(L, "setEnabled", _cocos2d_experimental_AudioEngine_setEnabled);
    oluacls_func(L, "setFinishCallback", _cocos2d_experimental_AudioEngine_setFinishCallback);
    oluacls_func(L, "setLoop", _cocos2d_experimental_AudioEngine_setLoop);
    oluacls_func(L, "setMaxAudioInstance", _cocos2d_experimental_AudioEngine_setMaxAudioInstance);
    oluacls_func(L, "setVolume", _cocos2d_experimental_AudioEngine_setVolume);
    oluacls_func(L, "stop", _cocos2d_experimental_AudioEngine_stop);
    oluacls_func(L, "stopAll", _cocos2d_experimental_AudioEngine_stopAll);
    oluacls_func(L, "uncache", _cocos2d_experimental_AudioEngine_uncache);
    oluacls_func(L, "uncacheAll", _cocos2d_experimental_AudioEngine_uncacheAll);
    oluacls_prop(L, "defaultProfile", _cocos2d_experimental_AudioEngine_getDefaultProfile, nullptr);
    oluacls_prop(L, "enabled", _cocos2d_experimental_AudioEngine_isEnabled, _cocos2d_experimental_AudioEngine_setEnabled);
    oluacls_prop(L, "maxAudioInstance", _cocos2d_experimental_AudioEngine_getMaxAudioInstance, _cocos2d_experimental_AudioEngine_setMaxAudioInstance);
    oluacls_prop(L, "playingAudioCount", _cocos2d_experimental_AudioEngine_getPlayingAudioCount, nullptr);
    oluacls_const_integer(L, "INVALID_AUDIO_ID", (lua_Integer)cocos2d::experimental::AudioEngine::INVALID_AUDIO_ID);
    oluacls_const_number(L, "TIME_UNKNOWN", (lua_Number)cocos2d::experimental::AudioEngine::TIME_UNKNOWN);

    olua_registerluatype<cocos2d::experimental::AudioEngine>(L, "cc.AudioEngine");

    return 1;
}

static int _CocosDenshion_SimpleAudioEngine___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (CocosDenshion::SimpleAudioEngine *)olua_toobj(L, 1, "cc.SimpleAudioEngine");
    olua_push_cppobj(L, self, "cc.SimpleAudioEngine");

    olua_endinvoke(L);

    return 1;
}

static int _CocosDenshion_SimpleAudioEngine_end(lua_State *L)
{
    olua_startinvoke(L);

    // static void end()
    CocosDenshion::SimpleAudioEngine::end();

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_getBackgroundMusicVolume(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // float getBackgroundMusicVolume()
    float ret = (float)self->getBackgroundMusicVolume();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _CocosDenshion_SimpleAudioEngine_getEffectsVolume(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // float getEffectsVolume()
    float ret = (float)self->getEffectsVolume();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _CocosDenshion_SimpleAudioEngine_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static CocosDenshion::SimpleAudioEngine *getInstance()
    CocosDenshion::SimpleAudioEngine *ret = (CocosDenshion::SimpleAudioEngine *)CocosDenshion::SimpleAudioEngine::getInstance();
    int num_ret = olua_push_cppobj(L, ret, "cc.SimpleAudioEngine");

    olua_endinvoke(L);

    return num_ret;
}

static int _CocosDenshion_SimpleAudioEngine_isBackgroundMusicPlaying(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // bool isBackgroundMusicPlaying()
    bool ret = (bool)self->isBackgroundMusicPlaying();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _CocosDenshion_SimpleAudioEngine_pauseAllEffects(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // void pauseAllEffects()
    self->pauseAllEffects();

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_pauseBackgroundMusic(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // void pauseBackgroundMusic()
    self->pauseBackgroundMusic();

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_pauseEffect(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    lua_Unsigned arg1 = 0;       /** soundId */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_uint(L, 2, &arg1);

    // void pauseEffect(unsigned int soundId)
    self->pauseEffect((unsigned int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_playBackgroundMusic1(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */
    bool arg2 = false;       /** loop */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void playBackgroundMusic(const char *filePath, @optional bool loop)
    self->playBackgroundMusic(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_playBackgroundMusic2(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);

    // void playBackgroundMusic(const char *filePath, @optional bool loop)
    self->playBackgroundMusic(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_playBackgroundMusic(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_string(L, 2))) {
            // void playBackgroundMusic(const char *filePath, @optional bool loop)
            return _CocosDenshion_SimpleAudioEngine_playBackgroundMusic2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // void playBackgroundMusic(const char *filePath, @optional bool loop)
            return _CocosDenshion_SimpleAudioEngine_playBackgroundMusic1(L);
        // }
    }

    luaL_error(L, "method 'CocosDenshion::SimpleAudioEngine::playBackgroundMusic' not support '%d' arguments", num_args);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_playEffect1(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */
    bool arg2 = false;       /** loop */
    lua_Number arg3 = 0;       /** pitch */
    lua_Number arg4 = 0;       /** pan */
    lua_Number arg5 = 0;       /** gain */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
    unsigned int ret = (unsigned int)self->playEffect(arg1, arg2, (float)arg3, (float)arg4, (float)arg5);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _CocosDenshion_SimpleAudioEngine_playEffect2(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);

    // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
    unsigned int ret = (unsigned int)self->playEffect(arg1);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _CocosDenshion_SimpleAudioEngine_playEffect3(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */
    bool arg2 = false;       /** loop */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
    unsigned int ret = (unsigned int)self->playEffect(arg1, arg2);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _CocosDenshion_SimpleAudioEngine_playEffect4(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */
    bool arg2 = false;       /** loop */
    lua_Number arg3 = 0;       /** pitch */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
    unsigned int ret = (unsigned int)self->playEffect(arg1, arg2, (float)arg3);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _CocosDenshion_SimpleAudioEngine_playEffect5(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */
    bool arg2 = false;       /** loop */
    lua_Number arg3 = 0;       /** pitch */
    lua_Number arg4 = 0;       /** pan */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
    unsigned int ret = (unsigned int)self->playEffect(arg1, arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _CocosDenshion_SimpleAudioEngine_playEffect(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_string(L, 2))) {
            // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
            return _CocosDenshion_SimpleAudioEngine_playEffect2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
            return _CocosDenshion_SimpleAudioEngine_playEffect3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_string(L, 2)) && (olua_is_bool(L, 3)) && (olua_is_number(L, 4))) {
            // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
            return _CocosDenshion_SimpleAudioEngine_playEffect4(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_string(L, 2)) && (olua_is_bool(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5))) {
            // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
            return _CocosDenshion_SimpleAudioEngine_playEffect5(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_string(L, 2)) && (olua_is_bool(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5)) && (olua_is_number(L, 6))) {
            // unsigned int playEffect(const char *filePath, @optional bool loop, @optional float pitch, @optional float pan, @optional float gain)
            return _CocosDenshion_SimpleAudioEngine_playEffect1(L);
        // }
    }

    luaL_error(L, "method 'CocosDenshion::SimpleAudioEngine::playEffect' not support '%d' arguments", num_args);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_preloadBackgroundMusic(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);

    // void preloadBackgroundMusic(const char *filePath)
    self->preloadBackgroundMusic(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_preloadEffect(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);

    // void preloadEffect(const char *filePath)
    self->preloadEffect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_resumeAllEffects(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // void resumeAllEffects()
    self->resumeAllEffects();

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_resumeBackgroundMusic(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // void resumeBackgroundMusic()
    self->resumeBackgroundMusic();

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_resumeEffect(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    lua_Unsigned arg1 = 0;       /** soundId */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_uint(L, 2, &arg1);

    // void resumeEffect(unsigned int soundId)
    self->resumeEffect((unsigned int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_rewindBackgroundMusic(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // void rewindBackgroundMusic()
    self->rewindBackgroundMusic();

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_setBackgroundMusicVolume(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    lua_Number arg1 = 0;       /** volume */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_number(L, 2, &arg1);

    // void setBackgroundMusicVolume(float volume)
    self->setBackgroundMusicVolume((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_setEffectsVolume(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    lua_Number arg1 = 0;       /** volume */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_number(L, 2, &arg1);

    // void setEffectsVolume(float volume)
    self->setEffectsVolume((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_stopAllEffects(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // void stopAllEffects()
    self->stopAllEffects();

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_stopBackgroundMusic1(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    bool arg1 = false;       /** releaseData */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_bool(L, 2, &arg1);

    // void stopBackgroundMusic(@optional bool releaseData)
    self->stopBackgroundMusic(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_stopBackgroundMusic2(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // void stopBackgroundMusic(@optional bool releaseData)
    self->stopBackgroundMusic();

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_stopBackgroundMusic(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // void stopBackgroundMusic(@optional bool releaseData)
        return _CocosDenshion_SimpleAudioEngine_stopBackgroundMusic2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_bool(L, 2))) {
            // void stopBackgroundMusic(@optional bool releaseData)
            return _CocosDenshion_SimpleAudioEngine_stopBackgroundMusic1(L);
        // }
    }

    luaL_error(L, "method 'CocosDenshion::SimpleAudioEngine::stopBackgroundMusic' not support '%d' arguments", num_args);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_stopEffect(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    lua_Unsigned arg1 = 0;       /** soundId */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_uint(L, 2, &arg1);

    // void stopEffect(unsigned int soundId)
    self->stopEffect((unsigned int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_unloadEffect(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;
    const char *arg1 = nullptr;       /** filePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");
    olua_check_string(L, 2, &arg1);

    // void unloadEffect(const char *filePath)
    self->unloadEffect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _CocosDenshion_SimpleAudioEngine_willPlayBackgroundMusic(lua_State *L)
{
    olua_startinvoke(L);

    CocosDenshion::SimpleAudioEngine *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SimpleAudioEngine");

    // bool willPlayBackgroundMusic()
    bool ret = (bool)self->willPlayBackgroundMusic();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_CocosDenshion_SimpleAudioEngine(lua_State *L)
{
    oluacls_class(L, "cc.SimpleAudioEngine", nullptr);
    oluacls_func(L, "__move", _CocosDenshion_SimpleAudioEngine___move);
    oluacls_func(L, "end", _CocosDenshion_SimpleAudioEngine_end);
    oluacls_func(L, "getBackgroundMusicVolume", _CocosDenshion_SimpleAudioEngine_getBackgroundMusicVolume);
    oluacls_func(L, "getEffectsVolume", _CocosDenshion_SimpleAudioEngine_getEffectsVolume);
    oluacls_func(L, "getInstance", _CocosDenshion_SimpleAudioEngine_getInstance);
    oluacls_func(L, "isBackgroundMusicPlaying", _CocosDenshion_SimpleAudioEngine_isBackgroundMusicPlaying);
    oluacls_func(L, "pauseAllEffects", _CocosDenshion_SimpleAudioEngine_pauseAllEffects);
    oluacls_func(L, "pauseBackgroundMusic", _CocosDenshion_SimpleAudioEngine_pauseBackgroundMusic);
    oluacls_func(L, "pauseEffect", _CocosDenshion_SimpleAudioEngine_pauseEffect);
    oluacls_func(L, "playBackgroundMusic", _CocosDenshion_SimpleAudioEngine_playBackgroundMusic);
    oluacls_func(L, "playEffect", _CocosDenshion_SimpleAudioEngine_playEffect);
    oluacls_func(L, "preloadBackgroundMusic", _CocosDenshion_SimpleAudioEngine_preloadBackgroundMusic);
    oluacls_func(L, "preloadEffect", _CocosDenshion_SimpleAudioEngine_preloadEffect);
    oluacls_func(L, "resumeAllEffects", _CocosDenshion_SimpleAudioEngine_resumeAllEffects);
    oluacls_func(L, "resumeBackgroundMusic", _CocosDenshion_SimpleAudioEngine_resumeBackgroundMusic);
    oluacls_func(L, "resumeEffect", _CocosDenshion_SimpleAudioEngine_resumeEffect);
    oluacls_func(L, "rewindBackgroundMusic", _CocosDenshion_SimpleAudioEngine_rewindBackgroundMusic);
    oluacls_func(L, "setBackgroundMusicVolume", _CocosDenshion_SimpleAudioEngine_setBackgroundMusicVolume);
    oluacls_func(L, "setEffectsVolume", _CocosDenshion_SimpleAudioEngine_setEffectsVolume);
    oluacls_func(L, "stopAllEffects", _CocosDenshion_SimpleAudioEngine_stopAllEffects);
    oluacls_func(L, "stopBackgroundMusic", _CocosDenshion_SimpleAudioEngine_stopBackgroundMusic);
    oluacls_func(L, "stopEffect", _CocosDenshion_SimpleAudioEngine_stopEffect);
    oluacls_func(L, "unloadEffect", _CocosDenshion_SimpleAudioEngine_unloadEffect);
    oluacls_func(L, "willPlayBackgroundMusic", _CocosDenshion_SimpleAudioEngine_willPlayBackgroundMusic);
    oluacls_prop(L, "backgroundMusicPlaying", _CocosDenshion_SimpleAudioEngine_isBackgroundMusicPlaying, nullptr);
    oluacls_prop(L, "backgroundMusicVolume", _CocosDenshion_SimpleAudioEngine_getBackgroundMusicVolume, _CocosDenshion_SimpleAudioEngine_setBackgroundMusicVolume);
    oluacls_prop(L, "effectsVolume", _CocosDenshion_SimpleAudioEngine_getEffectsVolume, _CocosDenshion_SimpleAudioEngine_setEffectsVolume);
    oluacls_prop(L, "instance", _CocosDenshion_SimpleAudioEngine_getInstance, nullptr);

    olua_registerluatype<CocosDenshion::SimpleAudioEngine>(L, "cc.SimpleAudioEngine");

    return 1;
}

static int luaopen_cocos2d_ApplicationProtocol_Platform(lua_State *L)
{
    oluacls_class(L, "cc.ApplicationProtocol.Platform", nullptr);
    oluacls_const_integer(L, "OS_ANDROID", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_ANDROID);
    oluacls_const_integer(L, "OS_BLACKBERRY", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_BLACKBERRY);
    oluacls_const_integer(L, "OS_EMSCRIPTEN", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_EMSCRIPTEN);
    oluacls_const_integer(L, "OS_IPAD", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_IPAD);
    oluacls_const_integer(L, "OS_IPHONE", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_IPHONE);
    oluacls_const_integer(L, "OS_LINUX", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_LINUX);
    oluacls_const_integer(L, "OS_MAC", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_MAC);
    oluacls_const_integer(L, "OS_NACL", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_NACL);
    oluacls_const_integer(L, "OS_TIZEN", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_TIZEN);
    oluacls_const_integer(L, "OS_WINDOWS", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_WINDOWS);
    oluacls_const_integer(L, "OS_WINRT", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_WINRT);
    oluacls_const_integer(L, "OS_WP8", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_WP8);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_LanguageType(lua_State *L)
{
    oluacls_class(L, "cc.LanguageType", nullptr);
    oluacls_const_integer(L, "ARABIC", (lua_Integer)cocos2d::LanguageType::ARABIC);
    oluacls_const_integer(L, "BELARUSIAN", (lua_Integer)cocos2d::LanguageType::BELARUSIAN);
    oluacls_const_integer(L, "BULGARIAN", (lua_Integer)cocos2d::LanguageType::BULGARIAN);
    oluacls_const_integer(L, "CHINESE", (lua_Integer)cocos2d::LanguageType::CHINESE);
    oluacls_const_integer(L, "DUTCH", (lua_Integer)cocos2d::LanguageType::DUTCH);
    oluacls_const_integer(L, "ENGLISH", (lua_Integer)cocos2d::LanguageType::ENGLISH);
    oluacls_const_integer(L, "FRENCH", (lua_Integer)cocos2d::LanguageType::FRENCH);
    oluacls_const_integer(L, "GERMAN", (lua_Integer)cocos2d::LanguageType::GERMAN);
    oluacls_const_integer(L, "HUNGARIAN", (lua_Integer)cocos2d::LanguageType::HUNGARIAN);
    oluacls_const_integer(L, "ITALIAN", (lua_Integer)cocos2d::LanguageType::ITALIAN);
    oluacls_const_integer(L, "JAPANESE", (lua_Integer)cocos2d::LanguageType::JAPANESE);
    oluacls_const_integer(L, "KOREAN", (lua_Integer)cocos2d::LanguageType::KOREAN);
    oluacls_const_integer(L, "NORWEGIAN", (lua_Integer)cocos2d::LanguageType::NORWEGIAN);
    oluacls_const_integer(L, "POLISH", (lua_Integer)cocos2d::LanguageType::POLISH);
    oluacls_const_integer(L, "PORTUGUESE", (lua_Integer)cocos2d::LanguageType::PORTUGUESE);
    oluacls_const_integer(L, "ROMANIAN", (lua_Integer)cocos2d::LanguageType::ROMANIAN);
    oluacls_const_integer(L, "RUSSIAN", (lua_Integer)cocos2d::LanguageType::RUSSIAN);
    oluacls_const_integer(L, "SPANISH", (lua_Integer)cocos2d::LanguageType::SPANISH);
    oluacls_const_integer(L, "TURKISH", (lua_Integer)cocos2d::LanguageType::TURKISH);
    oluacls_const_integer(L, "UKRAINIAN", (lua_Integer)cocos2d::LanguageType::UKRAINIAN);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_ApplicationProtocol___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ApplicationProtocol *)olua_toobj(L, 1, "cc.ApplicationProtocol");
    olua_push_cppobj(L, self, "cc.ApplicationProtocol");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ApplicationProtocol_applicationDidEnterBackground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");

    // void applicationDidEnterBackground()
    self->applicationDidEnterBackground();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ApplicationProtocol_applicationDidFinishLaunching(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");

    // bool applicationDidFinishLaunching()
    bool ret = (bool)self->applicationDidFinishLaunching();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ApplicationProtocol_applicationWillEnterForeground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");

    // void applicationWillEnterForeground()
    self->applicationWillEnterForeground();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ApplicationProtocol_getCurrentLanguage(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");

    // cocos2d::LanguageType getCurrentLanguage()
    cocos2d::LanguageType ret = (cocos2d::LanguageType)self->getCurrentLanguage();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ApplicationProtocol_getCurrentLanguageCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");

    // const char *getCurrentLanguageCode()
    const char *ret = (const char *)self->getCurrentLanguageCode();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ApplicationProtocol_getTargetPlatform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");

    // cocos2d::ApplicationProtocol::Platform getTargetPlatform()
    cocos2d::ApplicationProtocol::Platform ret = (cocos2d::ApplicationProtocol::Platform)self->getTargetPlatform();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ApplicationProtocol_getVersion(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");

    // std::string getVersion()
    std::string ret = (std::string)self->getVersion();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ApplicationProtocol_initGLContextAttrs(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");

    // void initGLContextAttrs()
    self->initGLContextAttrs();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ApplicationProtocol_openURL(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;
    std::string arg1;       /** url */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");
    olua_check_std_string(L, 2, &arg1);

    // bool openURL(const std::string &url)
    bool ret = (bool)self->openURL(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ApplicationProtocol_setAnimationInterval(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;
    lua_Number arg1 = 0;       /** interval */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ApplicationProtocol");
    olua_check_number(L, 2, &arg1);

    // void setAnimationInterval(float interval)
    self->setAnimationInterval((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ApplicationProtocol(lua_State *L)
{
    oluacls_class(L, "cc.ApplicationProtocol", nullptr);
    oluacls_func(L, "__move", _cocos2d_ApplicationProtocol___move);
    oluacls_func(L, "applicationDidEnterBackground", _cocos2d_ApplicationProtocol_applicationDidEnterBackground);
    oluacls_func(L, "applicationDidFinishLaunching", _cocos2d_ApplicationProtocol_applicationDidFinishLaunching);
    oluacls_func(L, "applicationWillEnterForeground", _cocos2d_ApplicationProtocol_applicationWillEnterForeground);
    oluacls_func(L, "getCurrentLanguage", _cocos2d_ApplicationProtocol_getCurrentLanguage);
    oluacls_func(L, "getCurrentLanguageCode", _cocos2d_ApplicationProtocol_getCurrentLanguageCode);
    oluacls_func(L, "getTargetPlatform", _cocos2d_ApplicationProtocol_getTargetPlatform);
    oluacls_func(L, "getVersion", _cocos2d_ApplicationProtocol_getVersion);
    oluacls_func(L, "initGLContextAttrs", _cocos2d_ApplicationProtocol_initGLContextAttrs);
    oluacls_func(L, "openURL", _cocos2d_ApplicationProtocol_openURL);
    oluacls_func(L, "setAnimationInterval", _cocos2d_ApplicationProtocol_setAnimationInterval);
    oluacls_prop(L, "currentLanguage", _cocos2d_ApplicationProtocol_getCurrentLanguage, nullptr);
    oluacls_prop(L, "currentLanguageCode", _cocos2d_ApplicationProtocol_getCurrentLanguageCode, nullptr);
    oluacls_prop(L, "targetPlatform", _cocos2d_ApplicationProtocol_getTargetPlatform, nullptr);
    oluacls_prop(L, "version", _cocos2d_ApplicationProtocol_getVersion, nullptr);

    olua_registerluatype<cocos2d::ApplicationProtocol>(L, "cc.ApplicationProtocol");

    return 1;
}

static int _cocos2d_Application___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Application *)olua_toobj(L, 1, "cc.Application");
    olua_push_cppobj(L, self, "cc.Application");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Application_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Application *getInstance()
    cocos2d::Application *ret = (cocos2d::Application *)cocos2d::Application::getInstance();
    int num_ret = olua_push_cppobj(L, ret, "cc.Application");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Application_run(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Application *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Application");

    // int run()
    int ret = (int)self->run();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Application(lua_State *L)
{
    oluacls_class(L, "cc.Application", "cc.ApplicationProtocol");
    oluacls_func(L, "__move", _cocos2d_Application___move);
    oluacls_func(L, "getInstance", _cocos2d_Application_getInstance);
    oluacls_func(L, "run", _cocos2d_Application_run);
    oluacls_prop(L, "instance", _cocos2d_Application_getInstance, nullptr);

    olua_registerluatype<cocos2d::Application>(L, "cc.Application");

    return 1;
}

static int _cocos2d_Device___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Device *)olua_toobj(L, 1, "cc.Device");
    olua_push_cppobj(L, self, "cc.Device");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Device_getDPI(lua_State *L)
{
    olua_startinvoke(L);

    // static int getDPI()
    int ret = (int)cocos2d::Device::getDPI();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Device_setAccelerometerEnabled(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** isEnabled */

    olua_check_bool(L, 1, &arg1);

    // static void setAccelerometerEnabled(bool isEnabled)
    cocos2d::Device::setAccelerometerEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Device_setAccelerometerInterval(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** interval */

    olua_check_number(L, 1, &arg1);

    // static void setAccelerometerInterval(float interval)
    cocos2d::Device::setAccelerometerInterval((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Device_setKeepScreenOn(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** keepScreenOn */

    olua_check_bool(L, 1, &arg1);

    // static void setKeepScreenOn(bool keepScreenOn)
    cocos2d::Device::setKeepScreenOn(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Device_vibrate(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */

    olua_check_number(L, 1, &arg1);

    // static void vibrate(float duration)
    cocos2d::Device::vibrate((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Device(lua_State *L)
{
    oluacls_class(L, "cc.Device", nullptr);
    oluacls_func(L, "__move", _cocos2d_Device___move);
    oluacls_func(L, "getDPI", _cocos2d_Device_getDPI);
    oluacls_func(L, "setAccelerometerEnabled", _cocos2d_Device_setAccelerometerEnabled);
    oluacls_func(L, "setAccelerometerInterval", _cocos2d_Device_setAccelerometerInterval);
    oluacls_func(L, "setKeepScreenOn", _cocos2d_Device_setKeepScreenOn);
    oluacls_func(L, "vibrate", _cocos2d_Device_vibrate);
    oluacls_prop(L, "dpi", _cocos2d_Device_getDPI, nullptr);

    olua_registerluatype<cocos2d::Device>(L, "cc.Device");

    return 1;
}

static int _cocos2d_ResizableBuffer___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ResizableBuffer *)olua_toobj(L, 1, "cc.ResizableBuffer");
    olua_push_cppobj(L, self, "cc.ResizableBuffer");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ResizableBuffer_buffer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ResizableBuffer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ResizableBuffer");

    // void *buffer()
    void *ret = (void *)self->buffer();
    int num_ret = olua_push_obj(L, ret, "void *");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ResizableBuffer_resize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ResizableBuffer *self = nullptr;
    lua_Unsigned arg1 = 0;       /** size */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ResizableBuffer");
    olua_check_uint(L, 2, &arg1);

    // void resize(size_t size)
    self->resize((size_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ResizableBuffer(lua_State *L)
{
    oluacls_class(L, "cc.ResizableBuffer", nullptr);
    oluacls_func(L, "__move", _cocos2d_ResizableBuffer___move);
    oluacls_func(L, "buffer", _cocos2d_ResizableBuffer_buffer);
    oluacls_func(L, "resize", _cocos2d_ResizableBuffer_resize);

    olua_registerluatype<cocos2d::ResizableBuffer>(L, "cc.ResizableBuffer");

    return 1;
}

static int luaopen_cocos2d_FileUtils_Status(lua_State *L)
{
    oluacls_class(L, "cc.FileUtils.Status", nullptr);
    oluacls_const_integer(L, "NotExists", (lua_Integer)cocos2d::FileUtils::Status::NotExists);
    oluacls_const_integer(L, "NotInitialized", (lua_Integer)cocos2d::FileUtils::Status::NotInitialized);
    oluacls_const_integer(L, "NotRegularFileType", (lua_Integer)cocos2d::FileUtils::Status::NotRegularFileType);
    oluacls_const_integer(L, "OK", (lua_Integer)cocos2d::FileUtils::Status::OK);
    oluacls_const_integer(L, "ObtainSizeFailed", (lua_Integer)cocos2d::FileUtils::Status::ObtainSizeFailed);
    oluacls_const_integer(L, "OpenFailed", (lua_Integer)cocos2d::FileUtils::Status::OpenFailed);
    oluacls_const_integer(L, "ReadFailed", (lua_Integer)cocos2d::FileUtils::Status::ReadFailed);
    oluacls_const_integer(L, "TooLarge", (lua_Integer)cocos2d::FileUtils::Status::TooLarge);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_FileUtils___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FileUtils *)olua_toobj(L, 1, "cc.FileUtils");
    olua_push_cppobj(L, self, "cc.FileUtils");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FileUtils_addSearchPath1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */
    bool arg2 = false;       /** front */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void addSearchPath(const std::string &path, @optional const bool front)
    self->addSearchPath(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_addSearchPath2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // void addSearchPath(const std::string &path, @optional const bool front)
    self->addSearchPath(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_addSearchPath(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // void addSearchPath(const std::string &path, @optional const bool front)
            return _cocos2d_FileUtils_addSearchPath2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_bool(L, 3))) {
            // void addSearchPath(const std::string &path, @optional const bool front)
            return _cocos2d_FileUtils_addSearchPath1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::addSearchPath' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_FileUtils_addSearchResolutionsOrder1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** order */
    bool arg2 = false;       /** front */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void addSearchResolutionsOrder(const std::string &order, @optional const bool front)
    self->addSearchResolutionsOrder(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_addSearchResolutionsOrder2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** order */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // void addSearchResolutionsOrder(const std::string &order, @optional const bool front)
    self->addSearchResolutionsOrder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_addSearchResolutionsOrder(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // void addSearchResolutionsOrder(const std::string &order, @optional const bool front)
            return _cocos2d_FileUtils_addSearchResolutionsOrder2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_bool(L, 3))) {
            // void addSearchResolutionsOrder(const std::string &order, @optional const bool front)
            return _cocos2d_FileUtils_addSearchResolutionsOrder1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::addSearchResolutionsOrder' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_FileUtils_createDirectory(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool createDirectory(const std::string &dirPath)
    bool ret = (bool)self->createDirectory(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_destroyInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static void destroyInstance()
    cocos2d::FileUtils::destroyInstance();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_fullPathForFilename(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string fullPathForFilename(const std::string &filename)
    std::string ret = (std::string)self->fullPathForFilename(arg1);
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_fullPathFromRelativeFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */
    std::string arg2;       /** relativeFile */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // std::string fullPathFromRelativeFile(const std::string &filename, const std::string &relativeFile)
    std::string ret = (std::string)self->fullPathFromRelativeFile(arg1, arg2);
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getContents(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::ResizableBuffer *arg2 = nullptr;       /** buffer */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.ResizableBuffer");

    // cocos2d::FileUtils::Status getContents(const std::string &filename, cocos2d::ResizableBuffer *buffer)
    cocos2d::FileUtils::Status ret = (cocos2d::FileUtils::Status)self->getContents(arg1, arg2);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getDataFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::Data getDataFromFile(const std::string &filename)
    cocos2d::Data ret = (cocos2d::Data)self->getDataFromFile(arg1);
    int num_ret = manual_olua_push_cocos2d_Data(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getDefaultResourceRootPath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // const std::string getDefaultResourceRootPath()
    const std::string ret = (const std::string)self->getDefaultResourceRootPath();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getFileDataFromZip(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** zipFilePath */
    std::string arg2;       /** filename */
    ssize_t arg3 = (ssize_t)0;       /** size */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    // no need to check 'arg3' with mark '@out'

    // @length(arg3) unsigned char *getFileDataFromZip(const std::string &zipFilePath, const std::string &filename, @out ssize_t *size)
    unsigned char *ret = (unsigned char *)self->getFileDataFromZip(arg1, arg2, &arg3);
    int num_ret = 1;
    lua_pushlstring(L, (const char *)ret, arg3);
    olua_push_int(L, (lua_Integer)arg3);

    olua_endinvoke(L);

    return num_ret + 1;
}

static int _cocos2d_FileUtils_getFileExtension(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string getFileExtension(const std::string &filePath)
    std::string ret = (std::string)self->getFileExtension(arg1);
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getFileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // long getFileSize(const std::string &filepath)
    long ret = (long)self->getFileSize(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getFullPathCache(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // const std::unordered_map<std::string, std::string> getFullPathCache()
    const std::unordered_map<std::string, std::string> ret = (const std::unordered_map<std::string, std::string>)self->getFullPathCache();
    int num_ret = 1;
    lua_createtable(L, 0, (int)ret.size());
    for (auto &entry : ret) {
        olua_push_std_string(L, entry.first);
        olua_push_std_string(L, entry.second);
        lua_rawset(L, -3);
    }

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::FileUtils *getInstance()
    cocos2d::FileUtils *ret = (cocos2d::FileUtils *)cocos2d::FileUtils::getInstance();
    int num_ret = olua_push_cppobj(L, ret, "cc.FileUtils");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getNewFilename(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string getNewFilename(const std::string &filename)
    std::string ret = (std::string)self->getNewFilename(arg1);
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getOriginalSearchPaths(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // const std::vector<std::string> getOriginalSearchPaths()
    const std::vector<std::string> ret = (const std::vector<std::string>)self->getOriginalSearchPaths();
    int num_ret = 1;
    int ret_size = (int)ret.size();
    lua_createtable(L, ret_size, 0);
    for (int i = 0; i < ret_size; i++) {
        olua_push_std_string(L, ((std::vector<std::string>)ret)[i]);
        lua_rawseti(L, -2, i + 1);
    }

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getSearchPaths(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // const std::vector<std::string> getSearchPaths()
    const std::vector<std::string> ret = (const std::vector<std::string>)self->getSearchPaths();
    int num_ret = 1;
    int ret_size = (int)ret.size();
    lua_createtable(L, ret_size, 0);
    for (int i = 0; i < ret_size; i++) {
        olua_push_std_string(L, ((std::vector<std::string>)ret)[i]);
        lua_rawseti(L, -2, i + 1);
    }

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getSearchResolutionsOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // const std::vector<std::string> getSearchResolutionsOrder()
    const std::vector<std::string> ret = (const std::vector<std::string>)self->getSearchResolutionsOrder();
    int num_ret = 1;
    int ret_size = (int)ret.size();
    lua_createtable(L, ret_size, 0);
    for (int i = 0; i < ret_size; i++) {
        olua_push_std_string(L, ((std::vector<std::string>)ret)[i]);
        lua_rawseti(L, -2, i + 1);
    }

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getStringFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string getStringFromFile(const std::string &filename)
    std::string ret = (std::string)self->getStringFromFile(arg1);
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getSuitableFOpen(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filenameUtf8 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string getSuitableFOpen(const std::string &filenameUtf8)
    std::string ret = (std::string)self->getSuitableFOpen(arg1);
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getValueMapFromData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    const char *arg1 = nullptr;       /** filedata */
    lua_Integer arg2 = 0;       /** filesize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // cocos2d::ValueMap getValueMapFromData(const char *filedata, int filesize)
    cocos2d::ValueMap ret = (cocos2d::ValueMap)self->getValueMapFromData(arg1, (int)arg2);
    int num_ret = manual_olua_push_cocos2d_ValueMap(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getValueMapFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::ValueMap getValueMapFromFile(const std::string &filename)
    cocos2d::ValueMap ret = (cocos2d::ValueMap)self->getValueMapFromFile(arg1);
    int num_ret = manual_olua_push_cocos2d_ValueMap(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getValueVectorFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::ValueVector getValueVectorFromFile(const std::string &filename)
    cocos2d::ValueVector ret = (cocos2d::ValueVector)self->getValueVectorFromFile(arg1);
    int num_ret = manual_olua_push_cocos2d_ValueVector(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_getWritablePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // std::string getWritablePath()
    std::string ret = (std::string)self->getWritablePath();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_isAbsolutePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool isAbsolutePath(const std::string &path)
    bool ret = (bool)self->isAbsolutePath(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_isDirectoryExist(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool isDirectoryExist(const std::string &dirPath)
    bool ret = (bool)self->isDirectoryExist(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_isFileExist(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool isFileExist(const std::string &filename)
    bool ret = (bool)self->isFileExist(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_isPopupNotify(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // bool isPopupNotify()
    bool ret = (bool)self->isPopupNotify();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_listFiles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::vector<std::string> listFiles(const std::string &dirPath)
    std::vector<std::string> ret = (std::vector<std::string>)self->listFiles(arg1);
    int num_ret = 1;
    int ret_size = (int)ret.size();
    lua_createtable(L, ret_size, 0);
    for (int i = 0; i < ret_size; i++) {
        olua_push_std_string(L, ((std::vector<std::string>)ret)[i]);
        lua_rawseti(L, -2, i + 1);
    }

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_listFilesRecursively(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */
    std::vector<std::string> arg2;       /** files */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    // no need to check 'arg2' with mark '@out'

    // void listFilesRecursively(const std::string &dirPath, @out std::vector<std::string> *files)
    self->listFilesRecursively(arg1, &arg2);

    int arg2_size = (int)arg2.size();
    lua_createtable(L, arg2_size, 0);
    for (int i = 0; i < arg2_size; i++) {
        olua_push_std_string(L, ((std::vector<std::string>)arg2)[i]);
        lua_rawseti(L, -2, i + 1);
    }

    olua_endinvoke(L);

    return 0 + 1;
}

static int _cocos2d_FileUtils_loadFilenameLookupDictionaryFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // void loadFilenameLookupDictionaryFromFile(const std::string &filename)
    self->loadFilenameLookupDictionaryFromFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_purgeCachedEntries(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // void purgeCachedEntries()
    self->purgeCachedEntries();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_removeDirectory(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool removeDirectory(const std::string &dirPath)
    bool ret = (bool)self->removeDirectory(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_removeFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool removeFile(const std::string &filepath)
    bool ret = (bool)self->removeFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_renameFile1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */
    std::string arg2;       /** oldname */
    std::string arg3;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    // bool renameFile(const std::string &path, const std::string &oldname, const std::string &name)
    bool ret = (bool)self->renameFile(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_renameFile2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** oldfullpath */
    std::string arg2;       /** newfullpath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool renameFile(const std::string &oldfullpath, const std::string &newfullpath)
    bool ret = (bool)self->renameFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_renameFile(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3))) {
            // bool renameFile(const std::string &oldfullpath, const std::string &newfullpath)
            return _cocos2d_FileUtils_renameFile2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_std_string(L, 4))) {
            // bool renameFile(const std::string &path, const std::string &oldname, const std::string &name)
            return _cocos2d_FileUtils_renameFile1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::renameFile' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_FileUtils_setDefaultResourceRootPath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // void setDefaultResourceRootPath(const std::string &path)
    self->setDefaultResourceRootPath(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_setDelegate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *arg1 = nullptr;       /** delegate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FileUtils");

    // static void setDelegate(cocos2d::FileUtils *delegate)
    cocos2d::FileUtils::setDelegate(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_setFilenameLookupDictionary(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** filenameLookupDict */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setFilenameLookupDictionary(const cocos2d::ValueMap &filenameLookupDict)
    self->setFilenameLookupDictionary(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_setPopupNotify(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    bool arg1 = false;       /** notify */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_bool(L, 2, &arg1);

    // void setPopupNotify(bool notify)
    self->setPopupNotify(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_setSearchPaths(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::vector<std::string> arg1;       /** searchPaths */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    luaL_checktype(L, 2, LUA_TTABLE);
    size_t arg1_total = lua_rawlen(L, 2);
    arg1.reserve(arg1_total);
    for (int i = 1; i <= arg1_total; i++) {
        std::string obj;
        lua_rawgeti(L, 2, i);
        olua_check_std_string(L, -1, &obj);
        arg1.push_back(obj);
        lua_pop(L, 1);
    }

    // void setSearchPaths(const std::vector<std::string> &searchPaths)
    self->setSearchPaths(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_setSearchResolutionsOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::vector<std::string> arg1;       /** searchResolutionsOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    luaL_checktype(L, 2, LUA_TTABLE);
    size_t arg1_total = lua_rawlen(L, 2);
    arg1.reserve(arg1_total);
    for (int i = 1; i <= arg1_total; i++) {
        std::string obj;
        lua_rawgeti(L, 2, i);
        olua_check_std_string(L, -1, &obj);
        arg1.push_back(obj);
        lua_pop(L, 1);
    }

    // void setSearchResolutionsOrder(const std::vector<std::string> &searchResolutionsOrder)
    self->setSearchResolutionsOrder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_setWritablePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** writablePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // void setWritablePath(const std::string &writablePath)
    self->setWritablePath(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FileUtils_writeDataToFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::Data arg1;       /** data */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_olua_check_cocos2d_Data(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeDataToFile(const cocos2d::Data &data, const std::string &fullPath)
    bool ret = (bool)self->writeDataToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_writeStringToFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dataStr */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeStringToFile(const std::string &dataStr, const std::string &fullPath)
    bool ret = (bool)self->writeStringToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_writeToFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** dict */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_olua_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeToFile(const cocos2d::ValueMap &dict, const std::string &fullPath)
    bool ret = (bool)self->writeToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_writeValueMapToFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** dict */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_olua_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeValueMapToFile(const cocos2d::ValueMap &dict, const std::string &fullPath)
    bool ret = (bool)self->writeValueMapToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FileUtils_writeValueVectorToFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueVector arg1;       /** vecData */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_olua_check_cocos2d_ValueVector(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeValueVectorToFile(const cocos2d::ValueVector &vecData, const std::string &fullPath)
    bool ret = (bool)self->writeValueVectorToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FileUtils(lua_State *L)
{
    oluacls_class(L, "cc.FileUtils", nullptr);
    oluacls_func(L, "__move", _cocos2d_FileUtils___move);
    oluacls_func(L, "addSearchPath", _cocos2d_FileUtils_addSearchPath);
    oluacls_func(L, "addSearchResolutionsOrder", _cocos2d_FileUtils_addSearchResolutionsOrder);
    oluacls_func(L, "createDirectory", _cocos2d_FileUtils_createDirectory);
    oluacls_func(L, "destroyInstance", _cocos2d_FileUtils_destroyInstance);
    oluacls_func(L, "fullPathForFilename", _cocos2d_FileUtils_fullPathForFilename);
    oluacls_func(L, "fullPathFromRelativeFile", _cocos2d_FileUtils_fullPathFromRelativeFile);
    oluacls_func(L, "getContents", _cocos2d_FileUtils_getContents);
    oluacls_func(L, "getDataFromFile", _cocos2d_FileUtils_getDataFromFile);
    oluacls_func(L, "getDefaultResourceRootPath", _cocos2d_FileUtils_getDefaultResourceRootPath);
    oluacls_func(L, "getFileDataFromZip", _cocos2d_FileUtils_getFileDataFromZip);
    oluacls_func(L, "getFileExtension", _cocos2d_FileUtils_getFileExtension);
    oluacls_func(L, "getFileSize", _cocos2d_FileUtils_getFileSize);
    oluacls_func(L, "getFullPathCache", _cocos2d_FileUtils_getFullPathCache);
    oluacls_func(L, "getInstance", _cocos2d_FileUtils_getInstance);
    oluacls_func(L, "getNewFilename", _cocos2d_FileUtils_getNewFilename);
    oluacls_func(L, "getOriginalSearchPaths", _cocos2d_FileUtils_getOriginalSearchPaths);
    oluacls_func(L, "getSearchPaths", _cocos2d_FileUtils_getSearchPaths);
    oluacls_func(L, "getSearchResolutionsOrder", _cocos2d_FileUtils_getSearchResolutionsOrder);
    oluacls_func(L, "getStringFromFile", _cocos2d_FileUtils_getStringFromFile);
    oluacls_func(L, "getSuitableFOpen", _cocos2d_FileUtils_getSuitableFOpen);
    oluacls_func(L, "getValueMapFromData", _cocos2d_FileUtils_getValueMapFromData);
    oluacls_func(L, "getValueMapFromFile", _cocos2d_FileUtils_getValueMapFromFile);
    oluacls_func(L, "getValueVectorFromFile", _cocos2d_FileUtils_getValueVectorFromFile);
    oluacls_func(L, "getWritablePath", _cocos2d_FileUtils_getWritablePath);
    oluacls_func(L, "isAbsolutePath", _cocos2d_FileUtils_isAbsolutePath);
    oluacls_func(L, "isDirectoryExist", _cocos2d_FileUtils_isDirectoryExist);
    oluacls_func(L, "isFileExist", _cocos2d_FileUtils_isFileExist);
    oluacls_func(L, "isPopupNotify", _cocos2d_FileUtils_isPopupNotify);
    oluacls_func(L, "listFiles", _cocos2d_FileUtils_listFiles);
    oluacls_func(L, "listFilesRecursively", _cocos2d_FileUtils_listFilesRecursively);
    oluacls_func(L, "loadFilenameLookupDictionaryFromFile", _cocos2d_FileUtils_loadFilenameLookupDictionaryFromFile);
    oluacls_func(L, "purgeCachedEntries", _cocos2d_FileUtils_purgeCachedEntries);
    oluacls_func(L, "removeDirectory", _cocos2d_FileUtils_removeDirectory);
    oluacls_func(L, "removeFile", _cocos2d_FileUtils_removeFile);
    oluacls_func(L, "renameFile", _cocos2d_FileUtils_renameFile);
    oluacls_func(L, "setDefaultResourceRootPath", _cocos2d_FileUtils_setDefaultResourceRootPath);
    oluacls_func(L, "setDelegate", _cocos2d_FileUtils_setDelegate);
    oluacls_func(L, "setFilenameLookupDictionary", _cocos2d_FileUtils_setFilenameLookupDictionary);
    oluacls_func(L, "setPopupNotify", _cocos2d_FileUtils_setPopupNotify);
    oluacls_func(L, "setSearchPaths", _cocos2d_FileUtils_setSearchPaths);
    oluacls_func(L, "setSearchResolutionsOrder", _cocos2d_FileUtils_setSearchResolutionsOrder);
    oluacls_func(L, "setWritablePath", _cocos2d_FileUtils_setWritablePath);
    oluacls_func(L, "writeDataToFile", _cocos2d_FileUtils_writeDataToFile);
    oluacls_func(L, "writeStringToFile", _cocos2d_FileUtils_writeStringToFile);
    oluacls_func(L, "writeToFile", _cocos2d_FileUtils_writeToFile);
    oluacls_func(L, "writeValueMapToFile", _cocos2d_FileUtils_writeValueMapToFile);
    oluacls_func(L, "writeValueVectorToFile", _cocos2d_FileUtils_writeValueVectorToFile);
    oluacls_prop(L, "defaultResourceRootPath", _cocos2d_FileUtils_getDefaultResourceRootPath, _cocos2d_FileUtils_setDefaultResourceRootPath);
    oluacls_prop(L, "fullPathCache", _cocos2d_FileUtils_getFullPathCache, nullptr);
    oluacls_prop(L, "instance", _cocos2d_FileUtils_getInstance, nullptr);
    oluacls_prop(L, "originalSearchPaths", _cocos2d_FileUtils_getOriginalSearchPaths, nullptr);
    oluacls_prop(L, "popupNotify", _cocos2d_FileUtils_isPopupNotify, _cocos2d_FileUtils_setPopupNotify);
    oluacls_prop(L, "searchPaths", _cocos2d_FileUtils_getSearchPaths, _cocos2d_FileUtils_setSearchPaths);
    oluacls_prop(L, "searchResolutionsOrder", _cocos2d_FileUtils_getSearchResolutionsOrder, _cocos2d_FileUtils_setSearchResolutionsOrder);
    oluacls_prop(L, "writablePath", _cocos2d_FileUtils_getWritablePath, _cocos2d_FileUtils_setWritablePath);

    olua_registerluatype<cocos2d::FileUtils>(L, "cc.FileUtils");

    return 1;
}

static int luaopen_ResolutionPolicy(lua_State *L)
{
    oluacls_class(L, "cc.ResolutionPolicy", nullptr);
    oluacls_const_integer(L, "EXACT_FIT", (lua_Integer)ResolutionPolicy::EXACT_FIT);
    oluacls_const_integer(L, "FIXED_HEIGHT", (lua_Integer)ResolutionPolicy::FIXED_HEIGHT);
    oluacls_const_integer(L, "FIXED_WIDTH", (lua_Integer)ResolutionPolicy::FIXED_WIDTH);
    oluacls_const_integer(L, "NO_BORDER", (lua_Integer)ResolutionPolicy::NO_BORDER);
    oluacls_const_integer(L, "SHOW_ALL", (lua_Integer)ResolutionPolicy::SHOW_ALL);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)ResolutionPolicy::UNKNOWN);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_GLView___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::GLView *)olua_toobj(L, 1, "cc.GLView");
    olua_push_cppobj(L, self, "cc.GLView");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_GLView_end(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // void end()
    self->end();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_getAllTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // std::vector<Touch *> getAllTouches()
    std::vector<cocos2d::Touch *> ret = (std::vector<cocos2d::Touch *>)self->getAllTouches();
    int num_ret = olua_push_std_vector(L, ret, "cc.Touch");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getContentScaleFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // float getContentScaleFactor()
    float ret = (float)self->getContentScaleFactor();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getDesignResolutionSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // const cocos2d::Size &getDesignResolutionSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getDesignResolutionSize();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getFrameSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // cocos2d::Size getFrameSize()
    cocos2d::Size ret = (cocos2d::Size)self->getFrameSize();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getFrameZoomFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // float getFrameZoomFactor()
    float ret = (float)self->getFrameZoomFactor();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getGLContextAttrs(lua_State *L)
{
    olua_startinvoke(L);

    // static GLContextAttrs getGLContextAttrs()
    GLContextAttrs ret = (GLContextAttrs)cocos2d::GLView::getGLContextAttrs();
    int num_ret = auto_olua_push_GLContextAttrs(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getResolutionPolicy(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // ResolutionPolicy getResolutionPolicy()
    ResolutionPolicy ret = (ResolutionPolicy)self->getResolutionPolicy();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getRetinaFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // int getRetinaFactor()
    int ret = (int)self->getRetinaFactor();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getSafeAreaRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // cocos2d::Rect getSafeAreaRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getSafeAreaRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getScaleX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // float getScaleX()
    float ret = (float)self->getScaleX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getScaleY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // float getScaleY()
    float ret = (float)self->getScaleY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getScissorRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // cocos2d::Rect getScissorRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getScissorRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getVR(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // @ref(single vr) cocos2d::VRIRenderer *getVR()
    cocos2d::VRIRenderer *ret = (cocos2d::VRIRenderer *)self->getVR();
    int num_ret = olua_push_cppobj(L, ret, "cc.VRIRenderer");

    // inject code after call
    olua_singleref(L, 1, "vr", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getViewName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // const std::string &getViewName()
    const std::string &ret = (const std::string &)self->getViewName();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getViewPortRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // const cocos2d::Rect &getViewPortRect()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getViewPortRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getVisibleOrigin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // cocos2d::Vec2 getVisibleOrigin()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getVisibleOrigin();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getVisibleRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // cocos2d::Rect getVisibleRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getVisibleRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_getVisibleSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // cocos2d::Size getVisibleSize()
    cocos2d::Size ret = (cocos2d::Size)self->getVisibleSize();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_isOpenGLReady(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // bool isOpenGLReady()
    bool ret = (bool)self->isOpenGLReady();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_isRetinaDisplay(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // bool isRetinaDisplay()
    bool ret = (bool)self->isRetinaDisplay();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_isScissorEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // bool isScissorEnabled()
    bool ret = (bool)self->isScissorEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_pollEvents(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // void pollEvents()
    self->pollEvents();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_renderScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */
    cocos2d::Renderer *arg2 = nullptr;       /** renderer */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Renderer");

    // void renderScene(cocos2d::Scene *scene, cocos2d::Renderer *renderer)
    self->renderScene(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setContentScaleFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;       /**  */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);

    // bool setContentScaleFactor(float )
    bool ret = (bool)self->setContentScaleFactor((float)arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLView_setCursor1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Vec2 arg2;       /** hotspot */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_std_string(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);

    // void setCursor(const std::string &filename, @optional cocos2d::Vec2 hotspot)
    self->setCursor(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setCursor2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_std_string(L, 2, &arg1);

    // void setCursor(const std::string &filename, @optional cocos2d::Vec2 hotspot)
    self->setCursor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setCursor(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // void setCursor(const std::string &filename, @optional cocos2d::Vec2 hotspot)
            return _cocos2d_GLView_setCursor2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (auto_olua_is_cocos2d_Vec2(L, 3))) {
            // void setCursor(const std::string &filename, @optional cocos2d::Vec2 hotspot)
            return _cocos2d_GLView_setCursor1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLView::setCursor' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLView_setCursorVisible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    bool arg1 = false;       /**  */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_bool(L, 2, &arg1);

    // void setCursorVisible(bool )
    self->setCursorVisible(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setDefaultCursor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // void setDefaultCursor()
    self->setDefaultCursor();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setDefaultIcon(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // void setDefaultIcon()
    self->setDefaultIcon();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setDesignResolutionSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;       /** width */
    lua_Number arg2 = 0;       /** height */
    lua_Unsigned arg3 = 0;       /** resolutionPolicy */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // void setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)
    self->setDesignResolutionSize((float)arg1, (float)arg2, (ResolutionPolicy)arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setFrameSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;       /** width */
    lua_Number arg2 = 0;       /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setFrameSize(float width, float height)
    self->setFrameSize((float)arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setFrameZoomFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;       /**  */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);

    // void setFrameZoomFactor(float )
    self->setFrameZoomFactor((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setGLContextAttrs(lua_State *L)
{
    olua_startinvoke(L);

    GLContextAttrs arg1;       /** glContextAttrs */

    auto_olua_check_GLContextAttrs(L, 1, &arg1);

    // static void setGLContextAttrs(GLContextAttrs &glContextAttrs)
    cocos2d::GLView::setGLContextAttrs(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setIMEKeyboardState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    bool arg1 = false;       /** open */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_bool(L, 2, &arg1);

    // void setIMEKeyboardState(bool open)
    self->setIMEKeyboardState(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setIcon1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_std_string(L, 2, &arg1);

    // void setIcon(const std::string &filename)
    self->setIcon(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setIcon2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    std::vector<std::string> arg1;       /** filelist */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    luaL_checktype(L, 2, LUA_TTABLE);
    size_t arg1_total = lua_rawlen(L, 2);
    arg1.reserve(arg1_total);
    for (int i = 1; i <= arg1_total; i++) {
        std::string obj;
        lua_rawgeti(L, 2, i);
        olua_check_std_string(L, -1, &obj);
        arg1.push_back(obj);
        lua_pop(L, 1);
    }

    // void setIcon(const std::vector<std::string> &filelist)
    self->setIcon(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setIcon(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if ((olua_is_std_string(L, 2))) {
            // void setIcon(const std::string &filename)
            return _cocos2d_GLView_setIcon1(L);
        }

        // if ((olua_is_std_vector(L, 2))) {
            // void setIcon(const std::vector<std::string> &filelist)
            return _cocos2d_GLView_setIcon2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLView::setIcon' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLView_setScissorInPoints(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;       /** x */
    lua_Number arg2 = 0;       /** y */
    lua_Number arg3 = 0;       /** w */
    lua_Number arg4 = 0;       /** h */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setScissorInPoints(float x, float y, float w, float h)
    self->setScissorInPoints((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setVR(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    cocos2d::VRIRenderer *arg1 = nullptr;       /** vrrenderer */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.VRIRenderer");

    // void setVR(@ref(single vr) cocos2d::VRIRenderer *vrrenderer)
    self->setVR(arg1);

    // inject code after call
    olua_singleref(L, 1, "vr", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setViewName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    std::string arg1;       /** viewname */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_std_string(L, 2, &arg1);

    // void setViewName(const std::string &viewname)
    self->setViewName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_setViewPortInPoints(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;       /** x */
    lua_Number arg2 = 0;       /** y */
    lua_Number arg3 = 0;       /** w */
    lua_Number arg4 = 0;       /** h */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setViewPortInPoints(float x, float y, float w, float h)
    self->setViewPortInPoints((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_swapBuffers(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // void swapBuffers()
    self->swapBuffers();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLView_windowShouldClose(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // bool windowShouldClose()
    bool ret = (bool)self->windowShouldClose();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_GLView(lua_State *L)
{
    oluacls_class(L, "cc.GLView", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_GLView___move);
    oluacls_func(L, "end", _cocos2d_GLView_end);
    oluacls_func(L, "getAllTouches", _cocos2d_GLView_getAllTouches);
    oluacls_func(L, "getContentScaleFactor", _cocos2d_GLView_getContentScaleFactor);
    oluacls_func(L, "getDesignResolutionSize", _cocos2d_GLView_getDesignResolutionSize);
    oluacls_func(L, "getFrameSize", _cocos2d_GLView_getFrameSize);
    oluacls_func(L, "getFrameZoomFactor", _cocos2d_GLView_getFrameZoomFactor);
    oluacls_func(L, "getGLContextAttrs", _cocos2d_GLView_getGLContextAttrs);
    oluacls_func(L, "getResolutionPolicy", _cocos2d_GLView_getResolutionPolicy);
    oluacls_func(L, "getRetinaFactor", _cocos2d_GLView_getRetinaFactor);
    oluacls_func(L, "getSafeAreaRect", _cocos2d_GLView_getSafeAreaRect);
    oluacls_func(L, "getScaleX", _cocos2d_GLView_getScaleX);
    oluacls_func(L, "getScaleY", _cocos2d_GLView_getScaleY);
    oluacls_func(L, "getScissorRect", _cocos2d_GLView_getScissorRect);
    oluacls_func(L, "getVR", _cocos2d_GLView_getVR);
    oluacls_func(L, "getViewName", _cocos2d_GLView_getViewName);
    oluacls_func(L, "getViewPortRect", _cocos2d_GLView_getViewPortRect);
    oluacls_func(L, "getVisibleOrigin", _cocos2d_GLView_getVisibleOrigin);
    oluacls_func(L, "getVisibleRect", _cocos2d_GLView_getVisibleRect);
    oluacls_func(L, "getVisibleSize", _cocos2d_GLView_getVisibleSize);
    oluacls_func(L, "isOpenGLReady", _cocos2d_GLView_isOpenGLReady);
    oluacls_func(L, "isRetinaDisplay", _cocos2d_GLView_isRetinaDisplay);
    oluacls_func(L, "isScissorEnabled", _cocos2d_GLView_isScissorEnabled);
    oluacls_func(L, "pollEvents", _cocos2d_GLView_pollEvents);
    oluacls_func(L, "renderScene", _cocos2d_GLView_renderScene);
    oluacls_func(L, "setContentScaleFactor", _cocos2d_GLView_setContentScaleFactor);
    oluacls_func(L, "setCursor", _cocos2d_GLView_setCursor);
    oluacls_func(L, "setCursorVisible", _cocos2d_GLView_setCursorVisible);
    oluacls_func(L, "setDefaultCursor", _cocos2d_GLView_setDefaultCursor);
    oluacls_func(L, "setDefaultIcon", _cocos2d_GLView_setDefaultIcon);
    oluacls_func(L, "setDesignResolutionSize", _cocos2d_GLView_setDesignResolutionSize);
    oluacls_func(L, "setFrameSize", _cocos2d_GLView_setFrameSize);
    oluacls_func(L, "setFrameZoomFactor", _cocos2d_GLView_setFrameZoomFactor);
    oluacls_func(L, "setGLContextAttrs", _cocos2d_GLView_setGLContextAttrs);
    oluacls_func(L, "setIMEKeyboardState", _cocos2d_GLView_setIMEKeyboardState);
    oluacls_func(L, "setIcon", _cocos2d_GLView_setIcon);
    oluacls_func(L, "setScissorInPoints", _cocos2d_GLView_setScissorInPoints);
    oluacls_func(L, "setVR", _cocos2d_GLView_setVR);
    oluacls_func(L, "setViewName", _cocos2d_GLView_setViewName);
    oluacls_func(L, "setViewPortInPoints", _cocos2d_GLView_setViewPortInPoints);
    oluacls_func(L, "swapBuffers", _cocos2d_GLView_swapBuffers);
    oluacls_func(L, "windowShouldClose", _cocos2d_GLView_windowShouldClose);
    oluacls_prop(L, "allTouches", _cocos2d_GLView_getAllTouches, nullptr);
    oluacls_prop(L, "contentScaleFactor", _cocos2d_GLView_getContentScaleFactor, _cocos2d_GLView_setContentScaleFactor);
    oluacls_prop(L, "designResolutionSize", _cocos2d_GLView_getDesignResolutionSize, _cocos2d_GLView_setDesignResolutionSize);
    oluacls_prop(L, "frameSize", _cocos2d_GLView_getFrameSize, _cocos2d_GLView_setFrameSize);
    oluacls_prop(L, "frameZoomFactor", _cocos2d_GLView_getFrameZoomFactor, _cocos2d_GLView_setFrameZoomFactor);
    oluacls_prop(L, "glContextAttrs", _cocos2d_GLView_getGLContextAttrs, _cocos2d_GLView_setGLContextAttrs);
    oluacls_prop(L, "openGLReady", _cocos2d_GLView_isOpenGLReady, nullptr);
    oluacls_prop(L, "resolutionPolicy", _cocos2d_GLView_getResolutionPolicy, nullptr);
    oluacls_prop(L, "retinaDisplay", _cocos2d_GLView_isRetinaDisplay, nullptr);
    oluacls_prop(L, "retinaFactor", _cocos2d_GLView_getRetinaFactor, nullptr);
    oluacls_prop(L, "safeAreaRect", _cocos2d_GLView_getSafeAreaRect, nullptr);
    oluacls_prop(L, "scaleX", _cocos2d_GLView_getScaleX, nullptr);
    oluacls_prop(L, "scaleY", _cocos2d_GLView_getScaleY, nullptr);
    oluacls_prop(L, "scissorEnabled", _cocos2d_GLView_isScissorEnabled, nullptr);
    oluacls_prop(L, "scissorRect", _cocos2d_GLView_getScissorRect, nullptr);
    oluacls_prop(L, "viewName", _cocos2d_GLView_getViewName, _cocos2d_GLView_setViewName);
    oluacls_prop(L, "viewPortRect", _cocos2d_GLView_getViewPortRect, nullptr);
    oluacls_prop(L, "visibleOrigin", _cocos2d_GLView_getVisibleOrigin, nullptr);
    oluacls_prop(L, "visibleRect", _cocos2d_GLView_getVisibleRect, nullptr);
    oluacls_prop(L, "visibleSize", _cocos2d_GLView_getVisibleSize, nullptr);
    oluacls_prop(L, "vr", _cocos2d_GLView_getVR, _cocos2d_GLView_setVR);

    olua_registerluatype<cocos2d::GLView>(L, "cc.GLView");

    return 1;
}

static int _cocos2d_GLViewImpl___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::GLViewImpl *)olua_toobj(L, 1, "cc.GLViewImpl");
    olua_push_cppobj(L, self, "cc.GLViewImpl");

    olua_endinvoke(L);

    return 1;
}

static int luaopen_cocos2d_GLViewImpl(lua_State *L)
{
    oluacls_class(L, "cc.GLViewImpl", "cc.GLView");
    oluacls_func(L, "__move", _cocos2d_GLViewImpl___move);

    olua_registerluatype<cocos2d::GLViewImpl>(L, "cc.GLViewImpl");

    return 1;
}

static int luaopen_cocos2d_Image_Format(lua_State *L)
{
    oluacls_class(L, "cc.Image.Format", nullptr);
    oluacls_const_integer(L, "ATITC", (lua_Integer)cocos2d::Image::Format::ATITC);
    oluacls_const_integer(L, "ETC", (lua_Integer)cocos2d::Image::Format::ETC);
    oluacls_const_integer(L, "JPG", (lua_Integer)cocos2d::Image::Format::JPG);
    oluacls_const_integer(L, "PNG", (lua_Integer)cocos2d::Image::Format::PNG);
    oluacls_const_integer(L, "PVR", (lua_Integer)cocos2d::Image::Format::PVR);
    oluacls_const_integer(L, "RAW_DATA", (lua_Integer)cocos2d::Image::Format::RAW_DATA);
    oluacls_const_integer(L, "S3TC", (lua_Integer)cocos2d::Image::Format::S3TC);
    oluacls_const_integer(L, "TGA", (lua_Integer)cocos2d::Image::Format::TGA);
    oluacls_const_integer(L, "TIFF", (lua_Integer)cocos2d::Image::Format::TIFF);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)cocos2d::Image::Format::UNKNOWN);
    oluacls_const_integer(L, "WEBP", (lua_Integer)cocos2d::Image::Format::WEBP);

    oluacls_asenum(L);

    return 1;
}

NS_CC_BEGIN
class LuaImage : public cocos2d::Image {
public:
    static bool getPNGPremultipliedAlphaEnabled() { return PNG_PREMULTIPLIED_ALPHA_ENABLED; };
};
NS_CC_END

static int _cocos2d_Image___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Image *)olua_toobj(L, 1, "cc.Image");
    olua_push_cppobj(L, self, "cc.Image");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Image_getBitPerPixel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getBitPerPixel()
    int ret = (int)self->getBitPerPixel();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_getData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // unsigned char *getData()
    unsigned char *ret = (unsigned char *)self->getData();
    int num_ret = olua_push_string(L, (const char *)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_getDataLen(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // ssize_t getDataLen()
    ssize_t ret = (ssize_t)self->getDataLen();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_getFilePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // std::string getFilePath()
    std::string ret = (std::string)self->getFilePath();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_getFileType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // cocos2d::Image::Format getFileType()
    cocos2d::Image::Format ret = (cocos2d::Image::Format)self->getFileType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_getHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getHeight()
    int ret = (int)self->getHeight();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_getNumberOfMipmaps(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getNumberOfMipmaps()
    int ret = (int)self->getNumberOfMipmaps();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_getPNGPremultipliedAlphaEnabled(lua_State *L)
{
    olua_startinvoke(L);

    lua_pushboolean(L, cocos2d::LuaImage::getPNGPremultipliedAlphaEnabled());

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Image_getRenderFormat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // Texture2D::PixelFormat getRenderFormat()
    cocos2d::Texture2D::PixelFormat ret = (cocos2d::Texture2D::PixelFormat)self->getRenderFormat();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_getWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getWidth()
    int ret = (int)self->getWidth();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_hasAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // bool hasAlpha()
    bool ret = (bool)self->hasAlpha();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_hasPremultipliedAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // bool hasPremultipliedAlpha()
    bool ret = (bool)self->hasPremultipliedAlpha();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_initWithImageData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    const char *arg1 = nullptr;       /** data */
    lua_Integer arg2 = 0;       /** dataLen */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // bool initWithImageData(const unsigned char *data, ssize_t dataLen)
    bool ret = (bool)self->initWithImageData((const unsigned char *)arg1, (ssize_t)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_initWithImageFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** path */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_std_string(L, 2, &arg1);

    // bool initWithImageFile(const std::string &path)
    bool ret = (bool)self->initWithImageFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_initWithRawData1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    const char *arg1 = nullptr;       /** data */
    lua_Integer arg2 = 0;       /** dataLen */
    lua_Integer arg3 = 0;       /** width */
    lua_Integer arg4 = 0;       /** height */
    lua_Integer arg5 = 0;       /** bitsPerComponent */
    bool arg6 = false;       /** preMulti */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);
    olua_check_bool(L, 7, &arg6);

    // bool initWithRawData(const unsigned char *data, ssize_t dataLen, int width, int height, int bitsPerComponent, @optional bool preMulti)
    bool ret = (bool)self->initWithRawData((const unsigned char *)arg1, (ssize_t)arg2, (int)arg3, (int)arg4, (int)arg5, arg6);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_initWithRawData2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    const char *arg1 = nullptr;       /** data */
    lua_Integer arg2 = 0;       /** dataLen */
    lua_Integer arg3 = 0;       /** width */
    lua_Integer arg4 = 0;       /** height */
    lua_Integer arg5 = 0;       /** bitsPerComponent */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);

    // bool initWithRawData(const unsigned char *data, ssize_t dataLen, int width, int height, int bitsPerComponent, @optional bool preMulti)
    bool ret = (bool)self->initWithRawData((const unsigned char *)arg1, (ssize_t)arg2, (int)arg3, (int)arg4, (int)arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_initWithRawData(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 5) {
        // if ((olua_is_string(L, 2)) && (olua_is_int(L, 3)) && (olua_is_int(L, 4)) && (olua_is_int(L, 5)) && (olua_is_int(L, 6))) {
            // bool initWithRawData(const unsigned char *data, ssize_t dataLen, int width, int height, int bitsPerComponent, @optional bool preMulti)
            return _cocos2d_Image_initWithRawData2(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_string(L, 2)) && (olua_is_int(L, 3)) && (olua_is_int(L, 4)) && (olua_is_int(L, 5)) && (olua_is_int(L, 6)) && (olua_is_bool(L, 7))) {
            // bool initWithRawData(const unsigned char *data, ssize_t dataLen, int width, int height, int bitsPerComponent, @optional bool preMulti)
            return _cocos2d_Image_initWithRawData1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Image::initWithRawData' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Image_isCompressed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // bool isCompressed()
    bool ret = (bool)self->isCompressed();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_new(lua_State *L)
{
    olua_startinvoke(L);

    // Image()
    cocos2d::Image *ret = (cocos2d::Image *)new cocos2d::Image();
    int num_ret = olua_push_cppobj(L, ret, "cc.Image");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_premultiplyAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // void premultiplyAlpha()
    self->premultiplyAlpha();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Image_reversePremultipliedAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // void reversePremultipliedAlpha()
    self->reversePremultipliedAlpha();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Image_saveToFile1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isToRGB */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_std_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool saveToFile(const std::string &filename, @optional bool isToRGB)
    bool ret = (bool)self->saveToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_saveToFile2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_std_string(L, 2, &arg1);

    // bool saveToFile(const std::string &filename, @optional bool isToRGB)
    bool ret = (bool)self->saveToFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Image_saveToFile(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // bool saveToFile(const std::string &filename, @optional bool isToRGB)
            return _cocos2d_Image_saveToFile2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_bool(L, 3))) {
            // bool saveToFile(const std::string &filename, @optional bool isToRGB)
            return _cocos2d_Image_saveToFile1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Image::saveToFile' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Image_setPNGPremultipliedAlphaEnabled(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** enabled */

    olua_check_bool(L, 1, &arg1);

    // static void setPNGPremultipliedAlphaEnabled(bool enabled)
    cocos2d::Image::setPNGPremultipliedAlphaEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Image_setPVRImagesHavePremultipliedAlpha(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** haveAlphaPremultiplied */

    olua_check_bool(L, 1, &arg1);

    // static void setPVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)
    cocos2d::Image::setPVRImagesHavePremultipliedAlpha(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Image(lua_State *L)
{
    oluacls_class(L, "cc.Image", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Image___move);
    oluacls_func(L, "getBitPerPixel", _cocos2d_Image_getBitPerPixel);
    oluacls_func(L, "getData", _cocos2d_Image_getData);
    oluacls_func(L, "getDataLen", _cocos2d_Image_getDataLen);
    oluacls_func(L, "getFilePath", _cocos2d_Image_getFilePath);
    oluacls_func(L, "getFileType", _cocos2d_Image_getFileType);
    oluacls_func(L, "getHeight", _cocos2d_Image_getHeight);
    oluacls_func(L, "getNumberOfMipmaps", _cocos2d_Image_getNumberOfMipmaps);
    oluacls_func(L, "getPNGPremultipliedAlphaEnabled", _cocos2d_Image_getPNGPremultipliedAlphaEnabled);
    oluacls_func(L, "getRenderFormat", _cocos2d_Image_getRenderFormat);
    oluacls_func(L, "getWidth", _cocos2d_Image_getWidth);
    oluacls_func(L, "hasAlpha", _cocos2d_Image_hasAlpha);
    oluacls_func(L, "hasPremultipliedAlpha", _cocos2d_Image_hasPremultipliedAlpha);
    oluacls_func(L, "initWithImageData", _cocos2d_Image_initWithImageData);
    oluacls_func(L, "initWithImageFile", _cocos2d_Image_initWithImageFile);
    oluacls_func(L, "initWithRawData", _cocos2d_Image_initWithRawData);
    oluacls_func(L, "isCompressed", _cocos2d_Image_isCompressed);
    oluacls_func(L, "new", _cocos2d_Image_new);
    oluacls_func(L, "premultiplyAlpha", _cocos2d_Image_premultiplyAlpha);
    oluacls_func(L, "reversePremultipliedAlpha", _cocos2d_Image_reversePremultipliedAlpha);
    oluacls_func(L, "saveToFile", _cocos2d_Image_saveToFile);
    oluacls_func(L, "setPNGPremultipliedAlphaEnabled", _cocos2d_Image_setPNGPremultipliedAlphaEnabled);
    oluacls_func(L, "setPVRImagesHavePremultipliedAlpha", _cocos2d_Image_setPVRImagesHavePremultipliedAlpha);
    oluacls_prop(L, "bitPerPixel", _cocos2d_Image_getBitPerPixel, nullptr);
    oluacls_prop(L, "compressed", _cocos2d_Image_isCompressed, nullptr);
    oluacls_prop(L, "data", _cocos2d_Image_getData, nullptr);
    oluacls_prop(L, "dataLen", _cocos2d_Image_getDataLen, nullptr);
    oluacls_prop(L, "filePath", _cocos2d_Image_getFilePath, nullptr);
    oluacls_prop(L, "fileType", _cocos2d_Image_getFileType, nullptr);
    oluacls_prop(L, "height", _cocos2d_Image_getHeight, nullptr);
    oluacls_prop(L, "numberOfMipmaps", _cocos2d_Image_getNumberOfMipmaps, nullptr);
    oluacls_prop(L, "renderFormat", _cocos2d_Image_getRenderFormat, nullptr);
    oluacls_prop(L, "width", _cocos2d_Image_getWidth, nullptr);

    olua_registerluatype<cocos2d::Image>(L, "cc.Image");

    return 1;
}

static int _cocos2d_Renderer___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Renderer *)olua_toobj(L, 1, "cc.Renderer");
    lua_pushstring(L, ".ownership");
    olua_getvariable(L, 1);
    if (lua_toboolean(L, -1) && self) {
        olua_setrawdata(L, 1, nullptr);
        delete self;
    }

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Renderer *)olua_toobj(L, 1, "cc.Renderer");
    olua_push_cppobj(L, self, "cc.Renderer");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Renderer_addDrawnBatches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    lua_Integer arg1 = 0;       /** number */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");
    olua_check_int(L, 2, &arg1);

    // void addDrawnBatches(ssize_t number)
    self->addDrawnBatches((ssize_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_addDrawnVertices(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    lua_Integer arg1 = 0;       /** number */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");
    olua_check_int(L, 2, &arg1);

    // void addDrawnVertices(ssize_t number)
    self->addDrawnVertices((ssize_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_checkVisibility(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::Mat4 arg1;       /** transform */
    cocos2d::Size arg2;       /** size */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);
    auto_olua_check_cocos2d_Size(L, 3, &arg2);

    // bool checkVisibility(const cocos2d::Mat4 &transform, const cocos2d::Size &size)
    bool ret = (bool)self->checkVisibility(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Renderer_clean(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // void clean()
    self->clean();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_clear(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // void clear()
    self->clear();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_clearDrawStats(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // void clearDrawStats()
    self->clearDrawStats();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_createRenderQueue(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // int createRenderQueue()
    int ret = (int)self->createRenderQueue();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Renderer_getClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // const cocos2d::Color4F &getClearColor()
    const cocos2d::Color4F &ret = (const cocos2d::Color4F &)self->getClearColor();
    int num_ret = manual_olua_push_cocos2d_Color4F(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Renderer_getDrawnBatches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // ssize_t getDrawnBatches()
    ssize_t ret = (ssize_t)self->getDrawnBatches();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Renderer_getDrawnVertices(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // ssize_t getDrawnVertices()
    ssize_t ret = (ssize_t)self->getDrawnVertices();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Renderer_initGLView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // void initGLView()
    self->initGLView();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_new(lua_State *L)
{
    olua_startinvoke(L);

    // Renderer()
    cocos2d::Renderer *ret = (cocos2d::Renderer *)new cocos2d::Renderer();
    int num_ret = olua_push_cppobj(L, ret, "cc.Renderer");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Renderer_popGroup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // void popGroup()
    self->popGroup();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_pushGroup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    lua_Integer arg1 = 0;       /** renderQueueID */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");
    olua_check_int(L, 2, &arg1);

    // void pushGroup(int renderQueueID)
    self->pushGroup((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_render(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // void render()
    self->render();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_setClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::Color4F arg1;       /** clearColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");
    manual_olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setClearColor(const cocos2d::Color4F &clearColor)
    self->setClearColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Renderer_setDepthTest(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    bool arg1 = false;       /** enable */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");
    olua_check_bool(L, 2, &arg1);

    // void setDepthTest(bool enable)
    self->setDepthTest(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Renderer(lua_State *L)
{
    oluacls_class(L, "cc.Renderer", nullptr);
    oluacls_func(L, "__gc", _cocos2d_Renderer___gc);
    oluacls_func(L, "__move", _cocos2d_Renderer___move);
    oluacls_func(L, "addDrawnBatches", _cocos2d_Renderer_addDrawnBatches);
    oluacls_func(L, "addDrawnVertices", _cocos2d_Renderer_addDrawnVertices);
    oluacls_func(L, "checkVisibility", _cocos2d_Renderer_checkVisibility);
    oluacls_func(L, "clean", _cocos2d_Renderer_clean);
    oluacls_func(L, "clear", _cocos2d_Renderer_clear);
    oluacls_func(L, "clearDrawStats", _cocos2d_Renderer_clearDrawStats);
    oluacls_func(L, "createRenderQueue", _cocos2d_Renderer_createRenderQueue);
    oluacls_func(L, "getClearColor", _cocos2d_Renderer_getClearColor);
    oluacls_func(L, "getDrawnBatches", _cocos2d_Renderer_getDrawnBatches);
    oluacls_func(L, "getDrawnVertices", _cocos2d_Renderer_getDrawnVertices);
    oluacls_func(L, "initGLView", _cocos2d_Renderer_initGLView);
    oluacls_func(L, "new", _cocos2d_Renderer_new);
    oluacls_func(L, "popGroup", _cocos2d_Renderer_popGroup);
    oluacls_func(L, "pushGroup", _cocos2d_Renderer_pushGroup);
    oluacls_func(L, "render", _cocos2d_Renderer_render);
    oluacls_func(L, "setClearColor", _cocos2d_Renderer_setClearColor);
    oluacls_func(L, "setDepthTest", _cocos2d_Renderer_setDepthTest);
    oluacls_prop(L, "clearColor", _cocos2d_Renderer_getClearColor, _cocos2d_Renderer_setClearColor);
    oluacls_prop(L, "drawnBatches", _cocos2d_Renderer_getDrawnBatches, nullptr);
    oluacls_prop(L, "drawnVertices", _cocos2d_Renderer_getDrawnVertices, nullptr);
    oluacls_const_integer(L, "BATCH_TRIAGCOMMAND_RESERVED_SIZE", (lua_Integer)cocos2d::Renderer::BATCH_TRIAGCOMMAND_RESERVED_SIZE);
    oluacls_const_integer(L, "INDEX_VBO_SIZE", (lua_Integer)cocos2d::Renderer::INDEX_VBO_SIZE);
    oluacls_const_integer(L, "MATERIAL_ID_DO_NOT_BATCH", (lua_Integer)cocos2d::Renderer::MATERIAL_ID_DO_NOT_BATCH);
    oluacls_const_integer(L, "VBO_SIZE", (lua_Integer)cocos2d::Renderer::VBO_SIZE);

    olua_registerluatype<cocos2d::Renderer>(L, "cc.Renderer");

    return 1;
}

static int _cocos2d_VertexAttrib___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::VertexAttrib *)olua_toobj(L, 1, "cc.VertexAttrib");
    olua_push_cppobj(L, self, "cc.VertexAttrib");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_VertexAttrib_get_index(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VertexAttrib *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VertexAttrib");

    // GLuint index
    GLuint ret = (GLuint)self->index;
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_VertexAttrib_set_index(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VertexAttrib *self = nullptr;
    lua_Unsigned arg1 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.VertexAttrib");
    olua_check_uint(L, 2, &arg1);

    // GLuint index
    self->index = (GLuint)arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_VertexAttrib_get_name(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VertexAttrib *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VertexAttrib");

    // std::string name
    std::string ret = (std::string)self->name;
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_VertexAttrib_set_name(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VertexAttrib *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.VertexAttrib");
    olua_check_std_string(L, 2, &arg1);

    // std::string name
    self->name = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_VertexAttrib_get_size(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VertexAttrib *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VertexAttrib");

    // GLint size
    GLint ret = (GLint)self->size;
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_VertexAttrib_set_size(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VertexAttrib *self = nullptr;
    lua_Integer arg1 = 0;       /** size */

    olua_to_cppobj(L, 1, (void **)&self, "cc.VertexAttrib");
    olua_check_int(L, 2, &arg1);

    // GLint size
    self->size = (GLint)arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_VertexAttrib_get_type(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VertexAttrib *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VertexAttrib");

    // GLenum type
    GLenum ret = (GLenum)self->type;
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_VertexAttrib_set_type(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VertexAttrib *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.VertexAttrib");
    olua_check_uint(L, 2, &arg1);

    // GLenum type
    self->type = (GLenum)arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_VertexAttrib(lua_State *L)
{
    oluacls_class(L, "cc.VertexAttrib", nullptr);
    oluacls_func(L, "__move", _cocos2d_VertexAttrib___move);
    oluacls_prop(L, "index", _cocos2d_VertexAttrib_get_index, _cocos2d_VertexAttrib_set_index);
    oluacls_prop(L, "name", _cocos2d_VertexAttrib_get_name, _cocos2d_VertexAttrib_set_name);
    oluacls_prop(L, "size", _cocos2d_VertexAttrib_get_size, _cocos2d_VertexAttrib_set_size);
    oluacls_prop(L, "type", _cocos2d_VertexAttrib_get_type, _cocos2d_VertexAttrib_set_type);

    olua_registerluatype<cocos2d::VertexAttrib>(L, "cc.VertexAttrib");

    return 1;
}

static int _cocos2d_Uniform___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Uniform *)olua_toobj(L, 1, "cc.Uniform");
    olua_push_cppobj(L, self, "cc.Uniform");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Uniform_get_location(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Uniform *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Uniform");

    // GLint location
    GLint ret = (GLint)self->location;
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Uniform_set_location(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Uniform *self = nullptr;
    lua_Integer arg1 = 0;       /** location */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Uniform");
    olua_check_int(L, 2, &arg1);

    // GLint location
    self->location = (GLint)arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Uniform_get_name(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Uniform *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Uniform");

    // std::string name
    std::string ret = (std::string)self->name;
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Uniform_set_name(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Uniform *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Uniform");
    olua_check_std_string(L, 2, &arg1);

    // std::string name
    self->name = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Uniform_get_size(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Uniform *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Uniform");

    // GLint size
    GLint ret = (GLint)self->size;
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Uniform_set_size(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Uniform *self = nullptr;
    lua_Integer arg1 = 0;       /** size */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Uniform");
    olua_check_int(L, 2, &arg1);

    // GLint size
    self->size = (GLint)arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Uniform_get_type(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Uniform *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Uniform");

    // GLenum type
    GLenum ret = (GLenum)self->type;
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Uniform_set_type(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Uniform *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Uniform");
    olua_check_uint(L, 2, &arg1);

    // GLenum type
    self->type = (GLenum)arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Uniform(lua_State *L)
{
    oluacls_class(L, "cc.Uniform", nullptr);
    oluacls_func(L, "__move", _cocos2d_Uniform___move);
    oluacls_prop(L, "location", _cocos2d_Uniform_get_location, _cocos2d_Uniform_set_location);
    oluacls_prop(L, "name", _cocos2d_Uniform_get_name, _cocos2d_Uniform_set_name);
    oluacls_prop(L, "size", _cocos2d_Uniform_get_size, _cocos2d_Uniform_set_size);
    oluacls_prop(L, "type", _cocos2d_Uniform_get_type, _cocos2d_Uniform_set_type);

    olua_registerluatype<cocos2d::Uniform>(L, "cc.Uniform");

    return 1;
}

static int _cocos2d_GLProgram___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::GLProgram *)olua_toobj(L, 1, "cc.GLProgram");
    olua_push_cppobj(L, self, "cc.GLProgram");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_GLProgram_bindAttribLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** attributeName */
    lua_Unsigned arg2 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void bindAttribLocation(const std::string &attributeName, GLuint index)
    self->bindAttribLocation(arg1, (GLuint)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_createWithByteArrays1(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** vShaderByteArray */
    const char *arg2 = nullptr;       /** fShaderByteArray */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);

    // static cocos2d::GLProgram *createWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_createWithByteArrays2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** vShaderByteArray */
    const char *arg2 = nullptr;       /** fShaderByteArray */
    std::string arg3;       /** compileTimeDefines */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);

    // static cocos2d::GLProgram *createWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray, const std::string &compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_createWithByteArrays3(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** vShaderByteArray */
    const char *arg2 = nullptr;       /** fShaderByteArray */
    std::string arg3;       /** compileTimeHeaders */
    std::string arg4;       /** compileTimeDefines */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);

    // static cocos2d::GLProgram *createWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray, const std::string &compileTimeHeaders, const std::string &compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2, arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_createWithByteArrays(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2))) {
            // static cocos2d::GLProgram *createWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray)
            return _cocos2d_GLProgram_createWithByteArrays1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_std_string(L, 3))) {
            // static cocos2d::GLProgram *createWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray, const std::string &compileTimeDefines)
            return _cocos2d_GLProgram_createWithByteArrays2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_std_string(L, 4))) {
            // static cocos2d::GLProgram *createWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray, const std::string &compileTimeHeaders, const std::string &compileTimeDefines)
            return _cocos2d_GLProgram_createWithByteArrays3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::createWithByteArrays' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_createWithFilenames1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);

    // static cocos2d::GLProgram *createWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithFilenames(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_createWithFilenames2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */
    std::string arg3;       /** compileTimeDefines */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);

    // static cocos2d::GLProgram *createWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename, const std::string &compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithFilenames(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_createWithFilenames3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */
    std::string arg3;       /** compileTimeHeaders */
    std::string arg4;       /** compileTimeDefines */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);

    // static cocos2d::GLProgram *createWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename, const std::string &compileTimeHeaders, const std::string &compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithFilenames(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_createWithFilenames(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2))) {
            // static cocos2d::GLProgram *createWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename)
            return _cocos2d_GLProgram_createWithFilenames1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3))) {
            // static cocos2d::GLProgram *createWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename, const std::string &compileTimeDefines)
            return _cocos2d_GLProgram_createWithFilenames2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_std_string(L, 4))) {
            // static cocos2d::GLProgram *createWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename, const std::string &compileTimeHeaders, const std::string &compileTimeDefines)
            return _cocos2d_GLProgram_createWithFilenames3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::createWithFilenames' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_getAttribLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** attributeName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // GLint getAttribLocation(const std::string &attributeName)
    GLint ret = (GLint)self->getAttribLocation(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_getFragmentShaderLog(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // std::string getFragmentShaderLog()
    std::string ret = (std::string)self->getFragmentShaderLog();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_getProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // GLuint getProgram()
    GLuint ret = (GLuint)self->getProgram();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_getProgramLog(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // std::string getProgramLog()
    std::string ret = (std::string)self->getProgramLog();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_getUniform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::Uniform *getUniform(const std::string &name)
    cocos2d::Uniform *ret = (cocos2d::Uniform *)self->getUniform(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Uniform");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_getUniformLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** attributeName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // GLint getUniformLocation(const std::string &attributeName)
    GLint ret = (GLint)self->getUniformLocation(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_getUniformLocationForName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    const char *arg1 = nullptr;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_string(L, 2, &arg1);

    // GLint getUniformLocationForName(const char *name)
    GLint ret = (GLint)self->getUniformLocationForName(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_getVertexAttrib(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::VertexAttrib *getVertexAttrib(const std::string &name)
    cocos2d::VertexAttrib *ret = (cocos2d::VertexAttrib *)self->getVertexAttrib(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.VertexAttrib");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_getVertexShaderLog(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // std::string getVertexShaderLog()
    std::string ret = (std::string)self->getVertexShaderLog();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_initWithByteArrays1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    const char *arg1 = nullptr;       /** vShaderByteArray */
    const char *arg2 = nullptr;       /** fShaderByteArray */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool initWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray)
    bool ret = (bool)self->initWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_initWithByteArrays2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    const char *arg1 = nullptr;       /** vShaderByteArray */
    const char *arg2 = nullptr;       /** fShaderByteArray */
    std::string arg3;       /** compileTimeDefines */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    // bool initWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray, const std::string &compileTimeDefines)
    bool ret = (bool)self->initWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_initWithByteArrays3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    const char *arg1 = nullptr;       /** vShaderByteArray */
    const char *arg2 = nullptr;       /** fShaderByteArray */
    std::string arg3;       /** compileTimeHeaders */
    std::string arg4;       /** compileTimeDefines */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);
    olua_check_std_string(L, 5, &arg4);

    // bool initWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray, const std::string &compileTimeHeaders, const std::string &compileTimeDefines)
    bool ret = (bool)self->initWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_initWithByteArrays(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // bool initWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray)
            return _cocos2d_GLProgram_initWithByteArrays1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_std_string(L, 4))) {
            // bool initWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray, const std::string &compileTimeDefines)
            return _cocos2d_GLProgram_initWithByteArrays2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_std_string(L, 4)) && (olua_is_std_string(L, 5))) {
            // bool initWithByteArrays(const GLchar *vShaderByteArray, const GLchar *fShaderByteArray, const std::string &compileTimeHeaders, const std::string &compileTimeDefines)
            return _cocos2d_GLProgram_initWithByteArrays3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::initWithByteArrays' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_initWithFilenames1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool initWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename)
    bool ret = (bool)self->initWithFilenames(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_initWithFilenames2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */
    std::string arg3;       /** compileTimeDefines */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    // bool initWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename, const std::string &compileTimeDefines)
    bool ret = (bool)self->initWithFilenames(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_initWithFilenames3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */
    std::string arg3;       /** compileTimeHeaders */
    std::string arg4;       /** compileTimeDefines */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);
    olua_check_std_string(L, 5, &arg4);

    // bool initWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename, const std::string &compileTimeHeaders, const std::string &compileTimeDefines)
    bool ret = (bool)self->initWithFilenames(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_initWithFilenames(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3))) {
            // bool initWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename)
            return _cocos2d_GLProgram_initWithFilenames1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_std_string(L, 4))) {
            // bool initWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename, const std::string &compileTimeDefines)
            return _cocos2d_GLProgram_initWithFilenames2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_std_string(L, 4)) && (olua_is_std_string(L, 5))) {
            // bool initWithFilenames(const std::string &vShaderFilename, const std::string &fShaderFilename, const std::string &compileTimeHeaders, const std::string &compileTimeDefines)
            return _cocos2d_GLProgram_initWithFilenames3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::initWithFilenames' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_link(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // bool link()
    bool ret = (bool)self->link();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_new(lua_State *L)
{
    olua_startinvoke(L);

    // GLProgram()
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)new cocos2d::GLProgram();
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_reset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void reset()
    self->reset();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith1f(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;       /** location */
    lua_Number arg2 = 0;       /** f1 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setUniformLocationWith1f(GLint location, GLfloat f1)
    self->setUniformLocationWith1f((GLint)arg1, (GLfloat)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith1i(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;       /** location */
    lua_Integer arg2 = 0;       /** i1 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setUniformLocationWith1i(GLint location, GLint i1)
    self->setUniformLocationWith1i((GLint)arg1, (GLint)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith2f(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;       /** location */
    lua_Number arg2 = 0;       /** f1 */
    lua_Number arg3 = 0;       /** f2 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)
    self->setUniformLocationWith2f((GLint)arg1, (GLfloat)arg2, (GLfloat)arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith2i(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;       /** location */
    lua_Integer arg2 = 0;       /** i1 */
    lua_Integer arg3 = 0;       /** i2 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void setUniformLocationWith2i(GLint location, GLint i1, GLint i2)
    self->setUniformLocationWith2i((GLint)arg1, (GLint)arg2, (GLint)arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith3f(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;       /** location */
    lua_Number arg2 = 0;       /** f1 */
    lua_Number arg3 = 0;       /** f2 */
    lua_Number arg4 = 0;       /** f3 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)
    self->setUniformLocationWith3f((GLint)arg1, (GLfloat)arg2, (GLfloat)arg3, (GLfloat)arg4);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith3i(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;       /** location */
    lua_Integer arg2 = 0;       /** i1 */
    lua_Integer arg3 = 0;       /** i2 */
    lua_Integer arg4 = 0;       /** i3 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // void setUniformLocationWith3i(GLint location, GLint i1, GLint i2, GLint i3)
    self->setUniformLocationWith3i((GLint)arg1, (GLint)arg2, (GLint)arg3, (GLint)arg4);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith4f(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;       /** location */
    lua_Number arg2 = 0;       /** f1 */
    lua_Number arg3 = 0;       /** f2 */
    lua_Number arg4 = 0;       /** f3 */
    lua_Number arg5 = 0;       /** f4 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)
    self->setUniformLocationWith4f((GLint)arg1, (GLfloat)arg2, (GLfloat)arg3, (GLfloat)arg4, (GLfloat)arg5);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith4i(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;       /** location */
    lua_Integer arg2 = 0;       /** i1 */
    lua_Integer arg3 = 0;       /** i2 */
    lua_Integer arg4 = 0;       /** i3 */
    lua_Integer arg5 = 0;       /** i4 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);

    // void setUniformLocationWith4i(GLint location, GLint i1, GLint i2, GLint i3, GLint i4)
    self->setUniformLocationWith4i((GLint)arg1, (GLint)arg2, (GLint)arg3, (GLint)arg4, (GLint)arg5);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformsForBuiltins1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;
    cocos2d::Mat4 arg1;       /** modelView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);

    // void setUniformsForBuiltins(const cocos2d::Mat4 &modelView)
    self->setUniformsForBuiltins(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformsForBuiltins2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void setUniformsForBuiltins()
    self->setUniformsForBuiltins();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_setUniformsForBuiltins(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // void setUniformsForBuiltins()
        return _cocos2d_GLProgram_setUniformsForBuiltins2(L);
    }

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Mat4(L, 2))) {
            // void setUniformsForBuiltins(const cocos2d::Mat4 &modelView)
            return _cocos2d_GLProgram_setUniformsForBuiltins1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::setUniformsForBuiltins' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_updateUniforms(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void updateUniforms()
    self->updateUniforms();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_use(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void use()
    self->use();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_BINORMAL(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_BINORMAL
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_BINORMAL;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_BINORMAL(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_BINORMAL */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_BINORMAL
    cocos2d::GLProgram::ATTRIBUTE_NAME_BINORMAL = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_BLEND_INDEX(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_BLEND_INDEX
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_BLEND_INDEX;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_BLEND_INDEX(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_BLEND_INDEX */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_BLEND_INDEX
    cocos2d::GLProgram::ATTRIBUTE_NAME_BLEND_INDEX = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_BLEND_WEIGHT(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_BLEND_WEIGHT
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_BLEND_WEIGHT;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_BLEND_WEIGHT(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_BLEND_WEIGHT */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_BLEND_WEIGHT
    cocos2d::GLProgram::ATTRIBUTE_NAME_BLEND_WEIGHT = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_COLOR
    cocos2d::GLProgram::ATTRIBUTE_NAME_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_NORMAL(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_NORMAL
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_NORMAL;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_NORMAL(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_NORMAL */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_NORMAL
    cocos2d::GLProgram::ATTRIBUTE_NAME_NORMAL = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_POSITION(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_POSITION
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_POSITION;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_POSITION(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_POSITION */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_POSITION
    cocos2d::GLProgram::ATTRIBUTE_NAME_POSITION = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TANGENT(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_TANGENT
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_TANGENT;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TANGENT(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_TANGENT */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_TANGENT
    cocos2d::GLProgram::ATTRIBUTE_NAME_TANGENT = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TEX_COORD(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_TEX_COORD
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TEX_COORD(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_TEX_COORD */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_TEX_COORD
    cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TEX_COORD1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_TEX_COORD1
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD1;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TEX_COORD1(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_TEX_COORD1 */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_TEX_COORD1
    cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD1 = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TEX_COORD2(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_TEX_COORD2
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD2;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TEX_COORD2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_TEX_COORD2 */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_TEX_COORD2
    cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD2 = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TEX_COORD3(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *ATTRIBUTE_NAME_TEX_COORD3
    const char *ret = (const char *)cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD3;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TEX_COORD3(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** ATTRIBUTE_NAME_TEX_COORD3 */

    olua_check_string(L, 1, &arg1);

    // static const char *ATTRIBUTE_NAME_TEX_COORD3
    cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD3 = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_PARTICLE_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_PARTICLE_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_PARTICLE_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_PARTICLE_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_PARTICLE_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_PARTICLE_COLOR
    cocos2d::GLProgram::SHADER_3D_PARTICLE_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_PARTICLE_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_PARTICLE_TEXTURE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_PARTICLE_TEXTURE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_PARTICLE_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_PARTICLE_TEXTURE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_PARTICLE_TEXTURE
    cocos2d::GLProgram::SHADER_3D_PARTICLE_TEXTURE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_POSITION(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_POSITION
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_POSITION;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_POSITION(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_POSITION */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_POSITION
    cocos2d::GLProgram::SHADER_3D_POSITION = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE
    cocos2d::GLProgram::SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_POSITION_NORMAL(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_POSITION_NORMAL
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_POSITION_NORMAL;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_POSITION_NORMAL(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_POSITION_NORMAL */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_POSITION_NORMAL
    cocos2d::GLProgram::SHADER_3D_POSITION_NORMAL = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_POSITION_NORMAL_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_POSITION_NORMAL_TEXTURE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_POSITION_NORMAL_TEXTURE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_POSITION_NORMAL_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_POSITION_NORMAL_TEXTURE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_POSITION_NORMAL_TEXTURE
    cocos2d::GLProgram::SHADER_3D_POSITION_NORMAL_TEXTURE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_POSITION_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_POSITION_TEXTURE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_POSITION_TEXTURE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_POSITION_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_POSITION_TEXTURE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_POSITION_TEXTURE
    cocos2d::GLProgram::SHADER_3D_POSITION_TEXTURE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE
    cocos2d::GLProgram::SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_SKINPOSITION_NORMAL_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_SKINPOSITION_NORMAL_TEXTURE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_SKINPOSITION_NORMAL_TEXTURE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_SKINPOSITION_NORMAL_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_SKINPOSITION_NORMAL_TEXTURE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_SKINPOSITION_NORMAL_TEXTURE
    cocos2d::GLProgram::SHADER_3D_SKINPOSITION_NORMAL_TEXTURE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_SKINPOSITION_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_SKINPOSITION_TEXTURE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_SKINPOSITION_TEXTURE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_SKINPOSITION_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_SKINPOSITION_TEXTURE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_SKINPOSITION_TEXTURE
    cocos2d::GLProgram::SHADER_3D_SKINPOSITION_TEXTURE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_SKYBOX(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_SKYBOX
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_SKYBOX;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_SKYBOX(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_SKYBOX */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_SKYBOX
    cocos2d::GLProgram::SHADER_3D_SKYBOX = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_3D_TERRAIN(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_3D_TERRAIN
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_3D_TERRAIN;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_3D_TERRAIN(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_3D_TERRAIN */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_3D_TERRAIN
    cocos2d::GLProgram::SHADER_3D_TERRAIN = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_CAMERA_CLEAR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_CAMERA_CLEAR
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_CAMERA_CLEAR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_CAMERA_CLEAR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_CAMERA_CLEAR */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_CAMERA_CLEAR
    cocos2d::GLProgram::SHADER_CAMERA_CLEAR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_LAYER_RADIAL_GRADIENT(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_LAYER_RADIAL_GRADIENT
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_LAYER_RADIAL_GRADIENT;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_LAYER_RADIAL_GRADIENT(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_LAYER_RADIAL_GRADIENT */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_LAYER_RADIAL_GRADIENT
    cocos2d::GLProgram::SHADER_LAYER_RADIAL_GRADIENT = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR
    cocos2d::GLProgram::SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP
    cocos2d::GLProgram::SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY
    cocos2d::GLProgram::SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP
    cocos2d::GLProgram::SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_LABEL_DISTANCEFIELD_GLOW(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_LABEL_DISTANCEFIELD_GLOW
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_LABEL_DISTANCEFIELD_GLOW;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_LABEL_DISTANCEFIELD_GLOW(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_LABEL_DISTANCEFIELD_GLOW */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_LABEL_DISTANCEFIELD_GLOW
    cocos2d::GLProgram::SHADER_NAME_LABEL_DISTANCEFIELD_GLOW = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL
    cocos2d::GLProgram::SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_LABEL_NORMAL(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_LABEL_NORMAL
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_LABEL_NORMAL;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_LABEL_NORMAL(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_LABEL_NORMAL */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_LABEL_NORMAL
    cocos2d::GLProgram::SHADER_NAME_LABEL_NORMAL = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_LABEL_OUTLINE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_LABEL_OUTLINE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_LABEL_OUTLINE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_LABEL_OUTLINE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_LABEL_OUTLINE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_LABEL_OUTLINE
    cocos2d::GLProgram::SHADER_NAME_LABEL_OUTLINE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_COLOR
    cocos2d::GLProgram::SHADER_NAME_POSITION_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_COLOR_NO_MVP(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_COLOR_NO_MVP
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_COLOR_NO_MVP;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_COLOR_NO_MVP(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_COLOR_NO_MVP */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_COLOR_NO_MVP
    cocos2d::GLProgram::SHADER_NAME_POSITION_COLOR_NO_MVP = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE
    cocos2d::GLProgram::SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_GRAYSCALE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_GRAYSCALE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_GRAYSCALE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_GRAYSCALE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_GRAYSCALE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_GRAYSCALE
    cocos2d::GLProgram::SHADER_NAME_POSITION_GRAYSCALE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR
    cocos2d::GLProgram::SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_TEXTURE
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_TEXTURE */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_TEXTURE
    cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_A8_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_TEXTURE_A8_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_A8_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_A8_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_TEXTURE_A8_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_TEXTURE_A8_COLOR
    cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_A8_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST
    cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV
    cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_TEXTURE_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_TEXTURE_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_TEXTURE_COLOR
    cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP
    cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_U_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_TEXTURE_U_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_U_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_U_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_TEXTURE_U_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_TEXTURE_U_COLOR
    cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_U_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_SHADER_NAME_POSITION_U_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *SHADER_NAME_POSITION_U_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::SHADER_NAME_POSITION_U_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_SHADER_NAME_POSITION_U_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** SHADER_NAME_POSITION_U_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *SHADER_NAME_POSITION_U_COLOR
    cocos2d::GLProgram::SHADER_NAME_POSITION_U_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_ALPHA_TEST_VALUE(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_ALPHA_TEST_VALUE
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_ALPHA_TEST_VALUE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_ALPHA_TEST_VALUE(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_ALPHA_TEST_VALUE */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_ALPHA_TEST_VALUE
    cocos2d::GLProgram::UNIFORM_NAME_ALPHA_TEST_VALUE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_AMBIENT_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_AMBIENT_COLOR
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_AMBIENT_COLOR;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_AMBIENT_COLOR(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_AMBIENT_COLOR */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_AMBIENT_COLOR
    cocos2d::GLProgram::UNIFORM_NAME_AMBIENT_COLOR = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_COS_TIME(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_COS_TIME
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_COS_TIME;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_COS_TIME(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_COS_TIME */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_COS_TIME
    cocos2d::GLProgram::UNIFORM_NAME_COS_TIME = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_MULTIVIEW_MVP_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_MULTIVIEW_MVP_MATRIX
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_MULTIVIEW_MVP_MATRIX;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_MULTIVIEW_MVP_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_MULTIVIEW_MVP_MATRIX */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_MULTIVIEW_MVP_MATRIX
    cocos2d::GLProgram::UNIFORM_NAME_MULTIVIEW_MVP_MATRIX = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_MULTIVIEW_P_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_MULTIVIEW_P_MATRIX
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_MULTIVIEW_P_MATRIX;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_MULTIVIEW_P_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_MULTIVIEW_P_MATRIX */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_MULTIVIEW_P_MATRIX
    cocos2d::GLProgram::UNIFORM_NAME_MULTIVIEW_P_MATRIX = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_MVP_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_MVP_MATRIX
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_MVP_MATRIX;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_MVP_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_MVP_MATRIX */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_MVP_MATRIX
    cocos2d::GLProgram::UNIFORM_NAME_MVP_MATRIX = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_MV_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_MV_MATRIX
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_MV_MATRIX;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_MV_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_MV_MATRIX */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_MV_MATRIX
    cocos2d::GLProgram::UNIFORM_NAME_MV_MATRIX = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_NORMAL_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_NORMAL_MATRIX
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_NORMAL_MATRIX;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_NORMAL_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_NORMAL_MATRIX */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_NORMAL_MATRIX
    cocos2d::GLProgram::UNIFORM_NAME_NORMAL_MATRIX = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_P_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_P_MATRIX
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_P_MATRIX;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_P_MATRIX(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_P_MATRIX */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_P_MATRIX
    cocos2d::GLProgram::UNIFORM_NAME_P_MATRIX = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_RANDOM01(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_RANDOM01
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_RANDOM01;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_RANDOM01(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_RANDOM01 */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_RANDOM01
    cocos2d::GLProgram::UNIFORM_NAME_RANDOM01 = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_SAMPLER0(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_SAMPLER0
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_SAMPLER0;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_SAMPLER0(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_SAMPLER0 */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_SAMPLER0
    cocos2d::GLProgram::UNIFORM_NAME_SAMPLER0 = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_SAMPLER1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_SAMPLER1
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_SAMPLER1;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_SAMPLER1(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_SAMPLER1 */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_SAMPLER1
    cocos2d::GLProgram::UNIFORM_NAME_SAMPLER1 = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_SAMPLER2(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_SAMPLER2
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_SAMPLER2;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_SAMPLER2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_SAMPLER2 */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_SAMPLER2
    cocos2d::GLProgram::UNIFORM_NAME_SAMPLER2 = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_SAMPLER3(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_SAMPLER3
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_SAMPLER3;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_SAMPLER3(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_SAMPLER3 */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_SAMPLER3
    cocos2d::GLProgram::UNIFORM_NAME_SAMPLER3 = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_SIN_TIME(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_SIN_TIME
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_SIN_TIME;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_SIN_TIME(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_SIN_TIME */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_SIN_TIME
    cocos2d::GLProgram::UNIFORM_NAME_SIN_TIME = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgram_get_UNIFORM_NAME_TIME(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *UNIFORM_NAME_TIME
    const char *ret = (const char *)cocos2d::GLProgram::UNIFORM_NAME_TIME;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgram_set_UNIFORM_NAME_TIME(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** UNIFORM_NAME_TIME */

    olua_check_string(L, 1, &arg1);

    // static const char *UNIFORM_NAME_TIME
    cocos2d::GLProgram::UNIFORM_NAME_TIME = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_GLProgram(lua_State *L)
{
    oluacls_class(L, "cc.GLProgram", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_GLProgram___move);
    oluacls_func(L, "bindAttribLocation", _cocos2d_GLProgram_bindAttribLocation);
    oluacls_func(L, "createWithByteArrays", _cocos2d_GLProgram_createWithByteArrays);
    oluacls_func(L, "createWithFilenames", _cocos2d_GLProgram_createWithFilenames);
    oluacls_func(L, "getAttribLocation", _cocos2d_GLProgram_getAttribLocation);
    oluacls_func(L, "getFragmentShaderLog", _cocos2d_GLProgram_getFragmentShaderLog);
    oluacls_func(L, "getProgram", _cocos2d_GLProgram_getProgram);
    oluacls_func(L, "getProgramLog", _cocos2d_GLProgram_getProgramLog);
    oluacls_func(L, "getUniform", _cocos2d_GLProgram_getUniform);
    oluacls_func(L, "getUniformLocation", _cocos2d_GLProgram_getUniformLocation);
    oluacls_func(L, "getUniformLocationForName", _cocos2d_GLProgram_getUniformLocationForName);
    oluacls_func(L, "getVertexAttrib", _cocos2d_GLProgram_getVertexAttrib);
    oluacls_func(L, "getVertexShaderLog", _cocos2d_GLProgram_getVertexShaderLog);
    oluacls_func(L, "initWithByteArrays", _cocos2d_GLProgram_initWithByteArrays);
    oluacls_func(L, "initWithFilenames", _cocos2d_GLProgram_initWithFilenames);
    oluacls_func(L, "link", _cocos2d_GLProgram_link);
    oluacls_func(L, "new", _cocos2d_GLProgram_new);
    oluacls_func(L, "reset", _cocos2d_GLProgram_reset);
    oluacls_func(L, "setUniformLocationWith1f", _cocos2d_GLProgram_setUniformLocationWith1f);
    oluacls_func(L, "setUniformLocationWith1i", _cocos2d_GLProgram_setUniformLocationWith1i);
    oluacls_func(L, "setUniformLocationWith2f", _cocos2d_GLProgram_setUniformLocationWith2f);
    oluacls_func(L, "setUniformLocationWith2i", _cocos2d_GLProgram_setUniformLocationWith2i);
    oluacls_func(L, "setUniformLocationWith3f", _cocos2d_GLProgram_setUniformLocationWith3f);
    oluacls_func(L, "setUniformLocationWith3i", _cocos2d_GLProgram_setUniformLocationWith3i);
    oluacls_func(L, "setUniformLocationWith4f", _cocos2d_GLProgram_setUniformLocationWith4f);
    oluacls_func(L, "setUniformLocationWith4i", _cocos2d_GLProgram_setUniformLocationWith4i);
    oluacls_func(L, "setUniformsForBuiltins", _cocos2d_GLProgram_setUniformsForBuiltins);
    oluacls_func(L, "updateUniforms", _cocos2d_GLProgram_updateUniforms);
    oluacls_func(L, "use", _cocos2d_GLProgram_use);
    oluacls_prop(L, "fragmentShaderLog", _cocos2d_GLProgram_getFragmentShaderLog, nullptr);
    oluacls_prop(L, "program", _cocos2d_GLProgram_getProgram, nullptr);
    oluacls_prop(L, "programLog", _cocos2d_GLProgram_getProgramLog, nullptr);
    oluacls_prop(L, "vertexShaderLog", _cocos2d_GLProgram_getVertexShaderLog, nullptr);
    oluacls_prop(L, "ATTRIBUTE_NAME_BINORMAL", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_BINORMAL, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_BINORMAL);
    oluacls_prop(L, "ATTRIBUTE_NAME_BLEND_INDEX", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_BLEND_INDEX, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_BLEND_INDEX);
    oluacls_prop(L, "ATTRIBUTE_NAME_BLEND_WEIGHT", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_BLEND_WEIGHT, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_BLEND_WEIGHT);
    oluacls_prop(L, "ATTRIBUTE_NAME_COLOR", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_COLOR, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_COLOR);
    oluacls_prop(L, "ATTRIBUTE_NAME_NORMAL", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_NORMAL, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_NORMAL);
    oluacls_prop(L, "ATTRIBUTE_NAME_POSITION", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_POSITION, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_POSITION);
    oluacls_prop(L, "ATTRIBUTE_NAME_TANGENT", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TANGENT, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TANGENT);
    oluacls_prop(L, "ATTRIBUTE_NAME_TEX_COORD", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TEX_COORD, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TEX_COORD);
    oluacls_prop(L, "ATTRIBUTE_NAME_TEX_COORD1", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TEX_COORD1, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TEX_COORD1);
    oluacls_prop(L, "ATTRIBUTE_NAME_TEX_COORD2", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TEX_COORD2, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TEX_COORD2);
    oluacls_prop(L, "ATTRIBUTE_NAME_TEX_COORD3", _cocos2d_GLProgram_get_ATTRIBUTE_NAME_TEX_COORD3, _cocos2d_GLProgram_set_ATTRIBUTE_NAME_TEX_COORD3);
    oluacls_prop(L, "SHADER_3D_PARTICLE_COLOR", _cocos2d_GLProgram_get_SHADER_3D_PARTICLE_COLOR, _cocos2d_GLProgram_set_SHADER_3D_PARTICLE_COLOR);
    oluacls_prop(L, "SHADER_3D_PARTICLE_TEXTURE", _cocos2d_GLProgram_get_SHADER_3D_PARTICLE_TEXTURE, _cocos2d_GLProgram_set_SHADER_3D_PARTICLE_TEXTURE);
    oluacls_prop(L, "SHADER_3D_POSITION", _cocos2d_GLProgram_get_SHADER_3D_POSITION, _cocos2d_GLProgram_set_SHADER_3D_POSITION);
    oluacls_prop(L, "SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE", _cocos2d_GLProgram_get_SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE, _cocos2d_GLProgram_set_SHADER_3D_POSITION_BUMPEDNORMAL_TEXTURE);
    oluacls_prop(L, "SHADER_3D_POSITION_NORMAL", _cocos2d_GLProgram_get_SHADER_3D_POSITION_NORMAL, _cocos2d_GLProgram_set_SHADER_3D_POSITION_NORMAL);
    oluacls_prop(L, "SHADER_3D_POSITION_NORMAL_TEXTURE", _cocos2d_GLProgram_get_SHADER_3D_POSITION_NORMAL_TEXTURE, _cocos2d_GLProgram_set_SHADER_3D_POSITION_NORMAL_TEXTURE);
    oluacls_prop(L, "SHADER_3D_POSITION_TEXTURE", _cocos2d_GLProgram_get_SHADER_3D_POSITION_TEXTURE, _cocos2d_GLProgram_set_SHADER_3D_POSITION_TEXTURE);
    oluacls_prop(L, "SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE", _cocos2d_GLProgram_get_SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE, _cocos2d_GLProgram_set_SHADER_3D_SKINPOSITION_BUMPEDNORMAL_TEXTURE);
    oluacls_prop(L, "SHADER_3D_SKINPOSITION_NORMAL_TEXTURE", _cocos2d_GLProgram_get_SHADER_3D_SKINPOSITION_NORMAL_TEXTURE, _cocos2d_GLProgram_set_SHADER_3D_SKINPOSITION_NORMAL_TEXTURE);
    oluacls_prop(L, "SHADER_3D_SKINPOSITION_TEXTURE", _cocos2d_GLProgram_get_SHADER_3D_SKINPOSITION_TEXTURE, _cocos2d_GLProgram_set_SHADER_3D_SKINPOSITION_TEXTURE);
    oluacls_prop(L, "SHADER_3D_SKYBOX", _cocos2d_GLProgram_get_SHADER_3D_SKYBOX, _cocos2d_GLProgram_set_SHADER_3D_SKYBOX);
    oluacls_prop(L, "SHADER_3D_TERRAIN", _cocos2d_GLProgram_get_SHADER_3D_TERRAIN, _cocos2d_GLProgram_set_SHADER_3D_TERRAIN);
    oluacls_prop(L, "SHADER_CAMERA_CLEAR", _cocos2d_GLProgram_get_SHADER_CAMERA_CLEAR, _cocos2d_GLProgram_set_SHADER_CAMERA_CLEAR);
    oluacls_prop(L, "SHADER_LAYER_RADIAL_GRADIENT", _cocos2d_GLProgram_get_SHADER_LAYER_RADIAL_GRADIENT, _cocos2d_GLProgram_set_SHADER_LAYER_RADIAL_GRADIENT);
    oluacls_prop(L, "SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR", _cocos2d_GLProgram_get_SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR, _cocos2d_GLProgram_set_SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR);
    oluacls_prop(L, "SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP", _cocos2d_GLProgram_get_SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP, _cocos2d_GLProgram_set_SHADER_NAME_ETC1AS_POSITION_TEXTURE_COLOR_NO_MVP);
    oluacls_prop(L, "SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY", _cocos2d_GLProgram_get_SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY, _cocos2d_GLProgram_set_SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY);
    oluacls_prop(L, "SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP", _cocos2d_GLProgram_get_SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP, _cocos2d_GLProgram_set_SHADER_NAME_ETC1AS_POSITION_TEXTURE_GRAY_NO_MVP);
    oluacls_prop(L, "SHADER_NAME_LABEL_DISTANCEFIELD_GLOW", _cocos2d_GLProgram_get_SHADER_NAME_LABEL_DISTANCEFIELD_GLOW, _cocos2d_GLProgram_set_SHADER_NAME_LABEL_DISTANCEFIELD_GLOW);
    oluacls_prop(L, "SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL", _cocos2d_GLProgram_get_SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL, _cocos2d_GLProgram_set_SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL);
    oluacls_prop(L, "SHADER_NAME_LABEL_NORMAL", _cocos2d_GLProgram_get_SHADER_NAME_LABEL_NORMAL, _cocos2d_GLProgram_set_SHADER_NAME_LABEL_NORMAL);
    oluacls_prop(L, "SHADER_NAME_LABEL_OUTLINE", _cocos2d_GLProgram_get_SHADER_NAME_LABEL_OUTLINE, _cocos2d_GLProgram_set_SHADER_NAME_LABEL_OUTLINE);
    oluacls_prop(L, "SHADER_NAME_POSITION_COLOR", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_COLOR, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_COLOR);
    oluacls_prop(L, "SHADER_NAME_POSITION_COLOR_NO_MVP", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_COLOR_NO_MVP, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_COLOR_NO_MVP);
    oluacls_prop(L, "SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_COLOR_TEXASPOINTSIZE);
    oluacls_prop(L, "SHADER_NAME_POSITION_GRAYSCALE", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_GRAYSCALE, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_GRAYSCALE);
    oluacls_prop(L, "SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR);
    oluacls_prop(L, "SHADER_NAME_POSITION_TEXTURE", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE);
    oluacls_prop(L, "SHADER_NAME_POSITION_TEXTURE_A8_COLOR", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_A8_COLOR, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_A8_COLOR);
    oluacls_prop(L, "SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST);
    oluacls_prop(L, "SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV);
    oluacls_prop(L, "SHADER_NAME_POSITION_TEXTURE_COLOR", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_COLOR, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_COLOR);
    oluacls_prop(L, "SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP);
    oluacls_prop(L, "SHADER_NAME_POSITION_TEXTURE_U_COLOR", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_TEXTURE_U_COLOR, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_TEXTURE_U_COLOR);
    oluacls_prop(L, "SHADER_NAME_POSITION_U_COLOR", _cocos2d_GLProgram_get_SHADER_NAME_POSITION_U_COLOR, _cocos2d_GLProgram_set_SHADER_NAME_POSITION_U_COLOR);
    oluacls_prop(L, "UNIFORM_NAME_ALPHA_TEST_VALUE", _cocos2d_GLProgram_get_UNIFORM_NAME_ALPHA_TEST_VALUE, _cocos2d_GLProgram_set_UNIFORM_NAME_ALPHA_TEST_VALUE);
    oluacls_prop(L, "UNIFORM_NAME_AMBIENT_COLOR", _cocos2d_GLProgram_get_UNIFORM_NAME_AMBIENT_COLOR, _cocos2d_GLProgram_set_UNIFORM_NAME_AMBIENT_COLOR);
    oluacls_prop(L, "UNIFORM_NAME_COS_TIME", _cocos2d_GLProgram_get_UNIFORM_NAME_COS_TIME, _cocos2d_GLProgram_set_UNIFORM_NAME_COS_TIME);
    oluacls_prop(L, "UNIFORM_NAME_MULTIVIEW_MVP_MATRIX", _cocos2d_GLProgram_get_UNIFORM_NAME_MULTIVIEW_MVP_MATRIX, _cocos2d_GLProgram_set_UNIFORM_NAME_MULTIVIEW_MVP_MATRIX);
    oluacls_prop(L, "UNIFORM_NAME_MULTIVIEW_P_MATRIX", _cocos2d_GLProgram_get_UNIFORM_NAME_MULTIVIEW_P_MATRIX, _cocos2d_GLProgram_set_UNIFORM_NAME_MULTIVIEW_P_MATRIX);
    oluacls_prop(L, "UNIFORM_NAME_MVP_MATRIX", _cocos2d_GLProgram_get_UNIFORM_NAME_MVP_MATRIX, _cocos2d_GLProgram_set_UNIFORM_NAME_MVP_MATRIX);
    oluacls_prop(L, "UNIFORM_NAME_MV_MATRIX", _cocos2d_GLProgram_get_UNIFORM_NAME_MV_MATRIX, _cocos2d_GLProgram_set_UNIFORM_NAME_MV_MATRIX);
    oluacls_prop(L, "UNIFORM_NAME_NORMAL_MATRIX", _cocos2d_GLProgram_get_UNIFORM_NAME_NORMAL_MATRIX, _cocos2d_GLProgram_set_UNIFORM_NAME_NORMAL_MATRIX);
    oluacls_prop(L, "UNIFORM_NAME_P_MATRIX", _cocos2d_GLProgram_get_UNIFORM_NAME_P_MATRIX, _cocos2d_GLProgram_set_UNIFORM_NAME_P_MATRIX);
    oluacls_prop(L, "UNIFORM_NAME_RANDOM01", _cocos2d_GLProgram_get_UNIFORM_NAME_RANDOM01, _cocos2d_GLProgram_set_UNIFORM_NAME_RANDOM01);
    oluacls_prop(L, "UNIFORM_NAME_SAMPLER0", _cocos2d_GLProgram_get_UNIFORM_NAME_SAMPLER0, _cocos2d_GLProgram_set_UNIFORM_NAME_SAMPLER0);
    oluacls_prop(L, "UNIFORM_NAME_SAMPLER1", _cocos2d_GLProgram_get_UNIFORM_NAME_SAMPLER1, _cocos2d_GLProgram_set_UNIFORM_NAME_SAMPLER1);
    oluacls_prop(L, "UNIFORM_NAME_SAMPLER2", _cocos2d_GLProgram_get_UNIFORM_NAME_SAMPLER2, _cocos2d_GLProgram_set_UNIFORM_NAME_SAMPLER2);
    oluacls_prop(L, "UNIFORM_NAME_SAMPLER3", _cocos2d_GLProgram_get_UNIFORM_NAME_SAMPLER3, _cocos2d_GLProgram_set_UNIFORM_NAME_SAMPLER3);
    oluacls_prop(L, "UNIFORM_NAME_SIN_TIME", _cocos2d_GLProgram_get_UNIFORM_NAME_SIN_TIME, _cocos2d_GLProgram_set_UNIFORM_NAME_SIN_TIME);
    oluacls_prop(L, "UNIFORM_NAME_TIME", _cocos2d_GLProgram_get_UNIFORM_NAME_TIME, _cocos2d_GLProgram_set_UNIFORM_NAME_TIME);

    olua_registerluatype<cocos2d::GLProgram>(L, "cc.GLProgram");

    return 1;
}

static int _cocos2d_GLProgramCache___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::GLProgramCache *)olua_toobj(L, 1, "cc.GLProgramCache");
    olua_push_cppobj(L, self, "cc.GLProgramCache");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_GLProgramCache_addGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramCache *self = nullptr;
    cocos2d::GLProgram *arg1 = nullptr;       /** program */
    std::string arg2;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgram");
    olua_check_std_string(L, 3, &arg2);

    // void addGLProgram(cocos2d::GLProgram *program, const std::string &key)
    self->addGLProgram(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramCache_destroyInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static void destroyInstance()
    cocos2d::GLProgramCache::destroyInstance();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramCache_getGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramCache *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramCache");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::GLProgram *getGLProgram(const std::string &key)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)self->getGLProgram(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramCache_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::GLProgramCache *getInstance()
    cocos2d::GLProgramCache *ret = (cocos2d::GLProgramCache *)cocos2d::GLProgramCache::getInstance();
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgramCache");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramCache_loadDefaultGLPrograms(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramCache");

    // void loadDefaultGLPrograms()
    self->loadDefaultGLPrograms();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramCache_new(lua_State *L)
{
    olua_startinvoke(L);

    // GLProgramCache()
    cocos2d::GLProgramCache *ret = (cocos2d::GLProgramCache *)new cocos2d::GLProgramCache();
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgramCache");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramCache_reloadDefaultGLPrograms(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramCache");

    // void reloadDefaultGLPrograms()
    self->reloadDefaultGLPrograms();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramCache_reloadDefaultGLProgramsRelativeToLights(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramCache");

    // void reloadDefaultGLProgramsRelativeToLights()
    self->reloadDefaultGLProgramsRelativeToLights();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_GLProgramCache(lua_State *L)
{
    oluacls_class(L, "cc.GLProgramCache", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_GLProgramCache___move);
    oluacls_func(L, "addGLProgram", _cocos2d_GLProgramCache_addGLProgram);
    oluacls_func(L, "destroyInstance", _cocos2d_GLProgramCache_destroyInstance);
    oluacls_func(L, "getGLProgram", _cocos2d_GLProgramCache_getGLProgram);
    oluacls_func(L, "getInstance", _cocos2d_GLProgramCache_getInstance);
    oluacls_func(L, "loadDefaultGLPrograms", _cocos2d_GLProgramCache_loadDefaultGLPrograms);
    oluacls_func(L, "new", _cocos2d_GLProgramCache_new);
    oluacls_func(L, "reloadDefaultGLPrograms", _cocos2d_GLProgramCache_reloadDefaultGLPrograms);
    oluacls_func(L, "reloadDefaultGLProgramsRelativeToLights", _cocos2d_GLProgramCache_reloadDefaultGLProgramsRelativeToLights);
    oluacls_prop(L, "instance", _cocos2d_GLProgramCache_getInstance, nullptr);

    olua_registerluatype<cocos2d::GLProgramCache>(L, "cc.GLProgramCache");

    return 1;
}

static int _cocos2d_GLProgramState___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::GLProgramState *)olua_toobj(L, 1, "cc.GLProgramState");
    olua_push_cppobj(L, self, "cc.GLProgramState");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_GLProgramState_apply(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    cocos2d::Mat4 arg1;       /** modelView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);

    // void apply(const cocos2d::Mat4 &modelView)
    self->apply(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_applyAttributes1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    bool arg1 = false;       /** applyAttribFlags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_bool(L, 2, &arg1);

    // void applyAttributes(@optional bool applyAttribFlags)
    self->applyAttributes(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_applyAttributes2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // void applyAttributes(@optional bool applyAttribFlags)
    self->applyAttributes();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_applyAttributes(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // void applyAttributes(@optional bool applyAttribFlags)
        return _cocos2d_GLProgramState_applyAttributes2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_bool(L, 2))) {
            // void applyAttributes(@optional bool applyAttribFlags)
            return _cocos2d_GLProgramState_applyAttributes1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::applyAttributes' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_applyAutoBinding(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    std::string arg2;       /** autoBinding */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void applyAutoBinding(const std::string &uniformName, const std::string &autoBinding)
    self->applyAutoBinding(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_applyGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    cocos2d::Mat4 arg1;       /** modelView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);

    // void applyGLProgram(const cocos2d::Mat4 &modelView)
    self->applyGLProgram(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_applyUniforms(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // void applyUniforms()
    self->applyUniforms();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // cocos2d::GLProgramState *clone()
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)self->clone();
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgramState");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *arg1 = nullptr;       /** glprogram */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.GLProgram");

    // static cocos2d::GLProgramState *create(cocos2d::GLProgram *glprogram)
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgramState");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_getGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // @ref(single glProgram) cocos2d::GLProgram *getGLProgram()
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)self->getGLProgram();
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    // inject code after call
    olua_singleref(L, 1, "glProgram", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_getNodeBinding(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // @ref(single nodeBinding) cocos2d::Node *getNodeBinding()
    cocos2d::Node *ret = (cocos2d::Node *)self->getNodeBinding();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    // inject code after call
    olua_singleref(L, 1, "nodeBinding", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_getOrCreateWithGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgram *arg1 = nullptr;       /** glprogram */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.GLProgram");

    // static cocos2d::GLProgramState *getOrCreateWithGLProgram(cocos2d::GLProgram *glprogram)
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::getOrCreateWithGLProgram(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgramState");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_getOrCreateWithGLProgramName1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** glProgramName */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::GLProgramState *getOrCreateWithGLProgramName(const std::string &glProgramName)
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::getOrCreateWithGLProgramName(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgramState");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_getOrCreateWithGLProgramName2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** glProgramName */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */

    olua_check_std_string(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Texture2D");

    // static cocos2d::GLProgramState *getOrCreateWithGLProgramName(const std::string &glProgramName, cocos2d::Texture2D *texture)
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::getOrCreateWithGLProgramName(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgramState");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_getOrCreateWithGLProgramName(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 1))) {
            // static cocos2d::GLProgramState *getOrCreateWithGLProgramName(const std::string &glProgramName)
            return _cocos2d_GLProgramState_getOrCreateWithGLProgramName1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_cppobj(L, 2, "cc.Texture2D"))) {
            // static cocos2d::GLProgramState *getOrCreateWithGLProgramName(const std::string &glProgramName, cocos2d::Texture2D *texture)
            return _cocos2d_GLProgramState_getOrCreateWithGLProgramName2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::getOrCreateWithGLProgramName' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_getOrCreateWithShaders(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** vertexShader */
    std::string arg2;       /** fragShader */
    std::string arg3;       /** compileTimeDefines */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);

    // static cocos2d::GLProgramState *getOrCreateWithShaders(const std::string &vertexShader, const std::string &fragShader, const std::string &compileTimeDefines)
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::getOrCreateWithShaders(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgramState");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_getUniformCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // ssize_t getUniformCount()
    ssize_t ret = (ssize_t)self->getUniformCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_getVertexAttribCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // ssize_t getVertexAttribCount()
    ssize_t ret = (ssize_t)self->getVertexAttribCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_getVertexAttribsFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // uint32_t getVertexAttribsFlags()
    uint32_t ret = (uint32_t)self->getVertexAttribsFlags();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GLProgramState_setGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    cocos2d::GLProgram *arg1 = nullptr;       /** glprogram */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgram");

    // void setGLProgram(@ref(single glProgram) cocos2d::GLProgram *glprogram)
    self->setGLProgram(arg1);

    // inject code after call
    olua_singleref(L, 1, "glProgram", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setNodeBinding(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** node */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setNodeBinding(@ref(single nodeBinding) cocos2d::Node *node)
    self->setNodeBinding(arg1);

    // inject code after call
    olua_singleref(L, 1, "nodeBinding", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setParameterAutoBinding(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    std::string arg2;       /** autoBinding */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void setParameterAutoBinding(const std::string &uniformName, const std::string &autoBinding)
    self->setParameterAutoBinding(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformFloat1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    lua_Number arg2 = 0;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setUniformFloat(const std::string &uniformName, float value)
    self->setUniformFloat(arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformFloat2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;       /** uniformLocation */
    lua_Number arg2 = 0;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setUniformFloat(GLint uniformLocation, float value)
    self->setUniformFloat((GLint)arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformFloat(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if ((olua_is_std_string(L, 2)) && (olua_is_number(L, 3))) {
            // void setUniformFloat(const std::string &uniformName, float value)
            return _cocos2d_GLProgramState_setUniformFloat1(L);
        }

        // if ((olua_is_int(L, 2)) && (olua_is_number(L, 3))) {
            // void setUniformFloat(GLint uniformLocation, float value)
            return _cocos2d_GLProgramState_setUniformFloat2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformFloat' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformInt1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    lua_Integer arg2 = 0;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setUniformInt(const std::string &uniformName, int value)
    self->setUniformInt(arg1, (int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformInt2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;       /** uniformLocation */
    lua_Integer arg2 = 0;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setUniformInt(GLint uniformLocation, int value)
    self->setUniformInt((GLint)arg1, (int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformInt(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if ((olua_is_std_string(L, 2)) && (olua_is_int(L, 3))) {
            // void setUniformInt(const std::string &uniformName, int value)
            return _cocos2d_GLProgramState_setUniformInt1(L);
        }

        // if ((olua_is_int(L, 2)) && (olua_is_int(L, 3))) {
            // void setUniformInt(GLint uniformLocation, int value)
            return _cocos2d_GLProgramState_setUniformInt2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformInt' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformMat41(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Mat4 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    manual_olua_check_cocos2d_Mat4(L, 3, &arg2);

    // void setUniformMat4(const std::string &uniformName, const cocos2d::Mat4 &value)
    self->setUniformMat4(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformMat42(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;       /** uniformLocation */
    cocos2d::Mat4 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    manual_olua_check_cocos2d_Mat4(L, 3, &arg2);

    // void setUniformMat4(GLint uniformLocation, const cocos2d::Mat4 &value)
    self->setUniformMat4((GLint)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformMat4(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if ((olua_is_std_string(L, 2)) && (manual_olua_is_cocos2d_Mat4(L, 3))) {
            // void setUniformMat4(const std::string &uniformName, const cocos2d::Mat4 &value)
            return _cocos2d_GLProgramState_setUniformMat41(L);
        }

        // if ((olua_is_int(L, 2)) && (manual_olua_is_cocos2d_Mat4(L, 3))) {
            // void setUniformMat4(GLint uniformLocation, const cocos2d::Mat4 &value)
            return _cocos2d_GLProgramState_setUniformMat42(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformMat4' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformTexture1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Texture2D");

    // void setUniformTexture(const std::string &uniformName, cocos2d::Texture2D *texture)
    self->setUniformTexture(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformTexture2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;       /** uniformLocation */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Texture2D");

    // void setUniformTexture(GLint uniformLocation, cocos2d::Texture2D *texture)
    self->setUniformTexture((GLint)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformTexture(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if ((olua_is_std_string(L, 2)) && (olua_is_cppobj(L, 3, "cc.Texture2D"))) {
            // void setUniformTexture(const std::string &uniformName, cocos2d::Texture2D *texture)
            return _cocos2d_GLProgramState_setUniformTexture1(L);
        }

        // if ((olua_is_int(L, 2)) && (olua_is_cppobj(L, 3, "cc.Texture2D"))) {
            // void setUniformTexture(GLint uniformLocation, cocos2d::Texture2D *texture)
            return _cocos2d_GLProgramState_setUniformTexture2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec21(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Vec2 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);

    // void setUniformVec2(const std::string &uniformName, const cocos2d::Vec2 &value)
    self->setUniformVec2(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec22(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;       /** uniformLocation */
    cocos2d::Vec2 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);

    // void setUniformVec2(GLint uniformLocation, const cocos2d::Vec2 &value)
    self->setUniformVec2((GLint)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec2(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if ((olua_is_std_string(L, 2)) && (auto_olua_is_cocos2d_Vec2(L, 3))) {
            // void setUniformVec2(const std::string &uniformName, const cocos2d::Vec2 &value)
            return _cocos2d_GLProgramState_setUniformVec21(L);
        }

        // if ((olua_is_int(L, 2)) && (auto_olua_is_cocos2d_Vec2(L, 3))) {
            // void setUniformVec2(GLint uniformLocation, const cocos2d::Vec2 &value)
            return _cocos2d_GLProgramState_setUniformVec22(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformVec2' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec31(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Vec3 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 3, &arg2);

    // void setUniformVec3(const std::string &uniformName, const cocos2d::Vec3 &value)
    self->setUniformVec3(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec32(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;       /** uniformLocation */
    cocos2d::Vec3 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 3, &arg2);

    // void setUniformVec3(GLint uniformLocation, const cocos2d::Vec3 &value)
    self->setUniformVec3((GLint)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec3(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if ((olua_is_std_string(L, 2)) && (auto_olua_is_cocos2d_Vec3(L, 3))) {
            // void setUniformVec3(const std::string &uniformName, const cocos2d::Vec3 &value)
            return _cocos2d_GLProgramState_setUniformVec31(L);
        }

        // if ((olua_is_int(L, 2)) && (auto_olua_is_cocos2d_Vec3(L, 3))) {
            // void setUniformVec3(GLint uniformLocation, const cocos2d::Vec3 &value)
            return _cocos2d_GLProgramState_setUniformVec32(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformVec3' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec41(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Vec4 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec4(L, 3, &arg2);

    // void setUniformVec4(const std::string &uniformName, const cocos2d::Vec4 &value)
    self->setUniformVec4(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec42(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;       /** uniformLocation */
    cocos2d::Vec4 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec4(L, 3, &arg2);

    // void setUniformVec4(GLint uniformLocation, const cocos2d::Vec4 &value)
    self->setUniformVec4((GLint)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec4(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if ((olua_is_std_string(L, 2)) && (auto_olua_is_cocos2d_Vec4(L, 3))) {
            // void setUniformVec4(const std::string &uniformName, const cocos2d::Vec4 &value)
            return _cocos2d_GLProgramState_setUniformVec41(L);
        }

        // if ((olua_is_int(L, 2)) && (auto_olua_is_cocos2d_Vec4(L, 3))) {
            // void setUniformVec4(GLint uniformLocation, const cocos2d::Vec4 &value)
            return _cocos2d_GLProgramState_setUniformVec42(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformVec4' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setVertexAttribPointer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** name */
    lua_Integer arg2 = 0;       /** size */
    lua_Unsigned arg3 = 0;       /** type */
    lua_Unsigned arg4 = 0;       /** normalized */
    lua_Integer arg5 = 0;       /** stride */
    GLvoid *arg6 = nullptr;       /** pointer */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);
    olua_check_obj(L, 7, (void **)&arg6, "void *");

    // void setVertexAttribPointer(const std::string &name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)
    self->setVertexAttribPointer(arg1, (GLint)arg2, (GLenum)arg3, (GLboolean)arg4, (GLsizei)arg5, arg6);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_GLProgramState(lua_State *L)
{
    oluacls_class(L, "cc.GLProgramState", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_GLProgramState___move);
    oluacls_func(L, "apply", _cocos2d_GLProgramState_apply);
    oluacls_func(L, "applyAttributes", _cocos2d_GLProgramState_applyAttributes);
    oluacls_func(L, "applyAutoBinding", _cocos2d_GLProgramState_applyAutoBinding);
    oluacls_func(L, "applyGLProgram", _cocos2d_GLProgramState_applyGLProgram);
    oluacls_func(L, "applyUniforms", _cocos2d_GLProgramState_applyUniforms);
    oluacls_func(L, "clone", _cocos2d_GLProgramState_clone);
    oluacls_func(L, "create", _cocos2d_GLProgramState_create);
    oluacls_func(L, "getGLProgram", _cocos2d_GLProgramState_getGLProgram);
    oluacls_func(L, "getNodeBinding", _cocos2d_GLProgramState_getNodeBinding);
    oluacls_func(L, "getOrCreateWithGLProgram", _cocos2d_GLProgramState_getOrCreateWithGLProgram);
    oluacls_func(L, "getOrCreateWithGLProgramName", _cocos2d_GLProgramState_getOrCreateWithGLProgramName);
    oluacls_func(L, "getOrCreateWithShaders", _cocos2d_GLProgramState_getOrCreateWithShaders);
    oluacls_func(L, "getUniformCount", _cocos2d_GLProgramState_getUniformCount);
    oluacls_func(L, "getVertexAttribCount", _cocos2d_GLProgramState_getVertexAttribCount);
    oluacls_func(L, "getVertexAttribsFlags", _cocos2d_GLProgramState_getVertexAttribsFlags);
    oluacls_func(L, "setGLProgram", _cocos2d_GLProgramState_setGLProgram);
    oluacls_func(L, "setNodeBinding", _cocos2d_GLProgramState_setNodeBinding);
    oluacls_func(L, "setParameterAutoBinding", _cocos2d_GLProgramState_setParameterAutoBinding);
    oluacls_func(L, "setUniformFloat", _cocos2d_GLProgramState_setUniformFloat);
    oluacls_func(L, "setUniformInt", _cocos2d_GLProgramState_setUniformInt);
    oluacls_func(L, "setUniformMat4", _cocos2d_GLProgramState_setUniformMat4);
    oluacls_func(L, "setUniformTexture", _cocos2d_GLProgramState_setUniformTexture);
    oluacls_func(L, "setUniformVec2", _cocos2d_GLProgramState_setUniformVec2);
    oluacls_func(L, "setUniformVec3", _cocos2d_GLProgramState_setUniformVec3);
    oluacls_func(L, "setUniformVec4", _cocos2d_GLProgramState_setUniformVec4);
    oluacls_func(L, "setVertexAttribPointer", _cocos2d_GLProgramState_setVertexAttribPointer);
    oluacls_prop(L, "glProgram", _cocos2d_GLProgramState_getGLProgram, _cocos2d_GLProgramState_setGLProgram);
    oluacls_prop(L, "nodeBinding", _cocos2d_GLProgramState_getNodeBinding, _cocos2d_GLProgramState_setNodeBinding);
    oluacls_prop(L, "uniformCount", _cocos2d_GLProgramState_getUniformCount, nullptr);
    oluacls_prop(L, "vertexAttribCount", _cocos2d_GLProgramState_getVertexAttribCount, nullptr);
    oluacls_prop(L, "vertexAttribsFlags", _cocos2d_GLProgramState_getVertexAttribsFlags, nullptr);

    olua_registerluatype<cocos2d::GLProgramState>(L, "cc.GLProgramState");

    return 1;
}

static const std::string makeTextureCacheCallbackTag(const std::string &key)
{
    return "addImageAsync." + key;
}

static int _cocos2d_TextureCache___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TextureCache *)olua_toobj(L, 1, "cc.TextureCache");
    olua_push_cppobj(L, self, "cc.TextureCache");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TextureCache_addImage1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::Texture2D *addImage(const std::string &filepath)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->addImage(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCache_addImage2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Image *arg1 = nullptr;       /** image */
    std::string arg2;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Image");
    olua_check_std_string(L, 3, &arg2);

    // cocos2d::Texture2D *addImage(cocos2d::Image *image, const std::string &key)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->addImage(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCache_addImage(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // cocos2d::Texture2D *addImage(const std::string &filepath)
            return _cocos2d_TextureCache_addImage1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Image")) && (olua_is_std_string(L, 3))) {
            // cocos2d::Texture2D *addImage(cocos2d::Image *image, const std::string &key)
            return _cocos2d_TextureCache_addImage2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureCache::addImage' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextureCache_addImageAsync1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filepath */
    std::function<void(cocos2d::Texture2D *)> arg2;       /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    void *callback_store_obj = (void *)self;
    std::string tag = makeTextureCacheCallbackTag(arg1);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 3, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg2 = [callback_store_obj, func, MT](cocos2d::Texture2D *arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_cppobj(L, arg1, "cc.Texture2D");

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void addImageAsync(const std::string &filepath, const std::function<void(Texture2D*)>& callback)
    self->addImageAsync(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_addImageAsync2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** path */
    std::function<void(cocos2d::Texture2D *)> arg2;       /** callback */
    std::string arg3;       /** callbackKey */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 4, &arg3);

    void *callback_store_obj = (void *)self;
    std::string tag = makeTextureCacheCallbackTag(arg3);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 3, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg2 = [callback_store_obj, func, MT](cocos2d::Texture2D *arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_cppobj(L, arg1, "cc.Texture2D");

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void addImageAsync(const std::string &path, const std::function<void(Texture2D*)>& callback, const std::string& callbackKey)
    self->addImageAsync(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_addImageAsync(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_function(L, 3))) {
            // void addImageAsync(const std::string &filepath, const std::function<void(Texture2D*)>& callback)
            return _cocos2d_TextureCache_addImageAsync1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_function(L, 3)) && (olua_is_std_string(L, 4))) {
            // void addImageAsync(const std::string &path, const std::function<void(Texture2D*)>& callback, const std::string& callbackKey)
            return _cocos2d_TextureCache_addImageAsync2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureCache::addImageAsync' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextureCache_getCachedTextureInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // std::string getCachedTextureInfo()
    std::string ret = (std::string)self->getCachedTextureInfo();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCache_getDescription(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCache_getETC1AlphaFileSuffix(lua_State *L)
{
    olua_startinvoke(L);

    // static std::string getETC1AlphaFileSuffix()
    std::string ret = (std::string)cocos2d::TextureCache::getETC1AlphaFileSuffix();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCache_getTextureFilePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // std::string getTextureFilePath(cocos2d::Texture2D *texture)
    std::string ret = (std::string)self->getTextureFilePath(arg1);
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCache_getTextureForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::Texture2D *getTextureForKey(const std::string &key)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTextureForKey(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCache_new(lua_State *L)
{
    olua_startinvoke(L);

    // TextureCache()
    cocos2d::TextureCache *ret = (cocos2d::TextureCache *)new cocos2d::TextureCache();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureCache");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCache_reloadTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** fileName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // bool reloadTexture(const std::string &fileName)
    bool ret = (bool)self->reloadTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCache_removeAllTextures(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // void removeAllTextures()
    self->removeAllTextures();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_removeTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void removeTexture(cocos2d::Texture2D *texture)
    self->removeTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_removeTextureForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // void removeTextureForKey(const std::string &key)
    self->removeTextureForKey(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_removeUnusedTextures(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // void removeUnusedTextures()
    self->removeUnusedTextures();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_renameTextureWithKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** srcName */
    std::string arg2;       /** dstName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void renameTextureWithKey(const std::string &srcName, const std::string &dstName)
    self->renameTextureWithKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_setETC1AlphaFileSuffix(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** suffix */

    olua_check_std_string(L, 1, &arg1);

    // static void setETC1AlphaFileSuffix(const std::string &suffix)
    cocos2d::TextureCache::setETC1AlphaFileSuffix(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_unbindAllImageAsync(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    std::string tag = makeTextureCacheCallbackTag("");
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBSTARTWITH);

    // void unbindAllImageAsync()
    self->unbindAllImageAsync();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_unbindImageAsync(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    std::string tag = makeTextureCacheCallbackTag(arg1);
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // void unbindImageAsync(const std::string &filename)
    self->unbindImageAsync(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureCache_waitForQuit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // void waitForQuit()
    self->waitForQuit();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_TextureCache(lua_State *L)
{
    oluacls_class(L, "cc.TextureCache", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_TextureCache___move);
    oluacls_func(L, "addImage", _cocos2d_TextureCache_addImage);
    oluacls_func(L, "addImageAsync", _cocos2d_TextureCache_addImageAsync);
    oluacls_func(L, "getCachedTextureInfo", _cocos2d_TextureCache_getCachedTextureInfo);
    oluacls_func(L, "getDescription", _cocos2d_TextureCache_getDescription);
    oluacls_func(L, "getETC1AlphaFileSuffix", _cocos2d_TextureCache_getETC1AlphaFileSuffix);
    oluacls_func(L, "getTextureFilePath", _cocos2d_TextureCache_getTextureFilePath);
    oluacls_func(L, "getTextureForKey", _cocos2d_TextureCache_getTextureForKey);
    oluacls_func(L, "new", _cocos2d_TextureCache_new);
    oluacls_func(L, "reloadTexture", _cocos2d_TextureCache_reloadTexture);
    oluacls_func(L, "removeAllTextures", _cocos2d_TextureCache_removeAllTextures);
    oluacls_func(L, "removeTexture", _cocos2d_TextureCache_removeTexture);
    oluacls_func(L, "removeTextureForKey", _cocos2d_TextureCache_removeTextureForKey);
    oluacls_func(L, "removeUnusedTextures", _cocos2d_TextureCache_removeUnusedTextures);
    oluacls_func(L, "renameTextureWithKey", _cocos2d_TextureCache_renameTextureWithKey);
    oluacls_func(L, "setETC1AlphaFileSuffix", _cocos2d_TextureCache_setETC1AlphaFileSuffix);
    oluacls_func(L, "unbindAllImageAsync", _cocos2d_TextureCache_unbindAllImageAsync);
    oluacls_func(L, "unbindImageAsync", _cocos2d_TextureCache_unbindImageAsync);
    oluacls_func(L, "waitForQuit", _cocos2d_TextureCache_waitForQuit);
    oluacls_prop(L, "cachedTextureInfo", _cocos2d_TextureCache_getCachedTextureInfo, nullptr);
    oluacls_prop(L, "description", _cocos2d_TextureCache_getDescription, nullptr);
    oluacls_prop(L, "etC1AlphaFileSuffix", _cocos2d_TextureCache_getETC1AlphaFileSuffix, _cocos2d_TextureCache_setETC1AlphaFileSuffix);

    olua_registerluatype<cocos2d::TextureCache>(L, "cc.TextureCache");

    return 1;
}

static int luaopen_cocos2d_Texture2D_PixelFormat(lua_State *L)
{
    oluacls_class(L, "cc.Texture2D.PixelFormat", nullptr);
    oluacls_const_integer(L, "A8", (lua_Integer)cocos2d::Texture2D::PixelFormat::A8);
    oluacls_const_integer(L, "AI88", (lua_Integer)cocos2d::Texture2D::PixelFormat::AI88);
    oluacls_const_integer(L, "ATC_EXPLICIT_ALPHA", (lua_Integer)cocos2d::Texture2D::PixelFormat::ATC_EXPLICIT_ALPHA);
    oluacls_const_integer(L, "ATC_INTERPOLATED_ALPHA", (lua_Integer)cocos2d::Texture2D::PixelFormat::ATC_INTERPOLATED_ALPHA);
    oluacls_const_integer(L, "ATC_RGB", (lua_Integer)cocos2d::Texture2D::PixelFormat::ATC_RGB);
    oluacls_const_integer(L, "AUTO", (lua_Integer)cocos2d::Texture2D::PixelFormat::AUTO);
    oluacls_const_integer(L, "BGRA8888", (lua_Integer)cocos2d::Texture2D::PixelFormat::BGRA8888);
    oluacls_const_integer(L, "DEFAULT", (lua_Integer)cocos2d::Texture2D::PixelFormat::DEFAULT);
    oluacls_const_integer(L, "ETC", (lua_Integer)cocos2d::Texture2D::PixelFormat::ETC);
    oluacls_const_integer(L, "I8", (lua_Integer)cocos2d::Texture2D::PixelFormat::I8);
    oluacls_const_integer(L, "NONE", (lua_Integer)cocos2d::Texture2D::PixelFormat::NONE);
    oluacls_const_integer(L, "PVRTC2", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC2);
    oluacls_const_integer(L, "PVRTC2A", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC2A);
    oluacls_const_integer(L, "PVRTC4", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC4);
    oluacls_const_integer(L, "PVRTC4A", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC4A);
    oluacls_const_integer(L, "RGB565", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGB565);
    oluacls_const_integer(L, "RGB5A1", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGB5A1);
    oluacls_const_integer(L, "RGB888", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGB888);
    oluacls_const_integer(L, "RGBA4444", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGBA4444);
    oluacls_const_integer(L, "RGBA8888", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGBA8888);
    oluacls_const_integer(L, "S3TC_DXT1", (lua_Integer)cocos2d::Texture2D::PixelFormat::S3TC_DXT1);
    oluacls_const_integer(L, "S3TC_DXT3", (lua_Integer)cocos2d::Texture2D::PixelFormat::S3TC_DXT3);
    oluacls_const_integer(L, "S3TC_DXT5", (lua_Integer)cocos2d::Texture2D::PixelFormat::S3TC_DXT5);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_Texture2D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Texture2D *)olua_toobj(L, 1, "cc.Texture2D");
    olua_push_cppobj(L, self, "cc.Texture2D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Texture2D_drawAtPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void drawAtPoint(const cocos2d::Vec2 &point)
    self->drawAtPoint(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_drawInRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void drawInRect(const cocos2d::Rect &rect)
    self->drawInRect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_generateMipmap(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void generateMipmap()
    self->generateMipmap();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_getAlphaTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // cocos2d::Texture2D *getAlphaTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getAlphaTexture();
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getAlphaTextureName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLuint getAlphaTextureName()
    GLuint ret = (GLuint)self->getAlphaTextureName();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getBitsPerPixelForFormat1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // unsigned int getBitsPerPixelForFormat()
    unsigned int ret = (unsigned int)self->getBitsPerPixelForFormat();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getBitsPerPixelForFormat2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    lua_Unsigned arg1 = 0;       /** format */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_uint(L, 2, &arg1);

    // unsigned int getBitsPerPixelForFormat(Texture2D::PixelFormat format)
    unsigned int ret = (unsigned int)self->getBitsPerPixelForFormat((cocos2d::Texture2D::PixelFormat)arg1);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getBitsPerPixelForFormat(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // unsigned int getBitsPerPixelForFormat()
        return _cocos2d_Texture2D_getBitsPerPixelForFormat1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_uint(L, 2))) {
            // unsigned int getBitsPerPixelForFormat(Texture2D::PixelFormat format)
            return _cocos2d_Texture2D_getBitsPerPixelForFormat2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::getBitsPerPixelForFormat' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Texture2D_getContentSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // cocos2d::Size getContentSize()
    cocos2d::Size ret = (cocos2d::Size)self->getContentSize();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getContentSizeInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // const cocos2d::Size &getContentSizeInPixels()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getContentSizeInPixels();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getDefaultAlphaPixelFormat(lua_State *L)
{
    olua_startinvoke(L);

    // static Texture2D::PixelFormat getDefaultAlphaPixelFormat()
    cocos2d::Texture2D::PixelFormat ret = (cocos2d::Texture2D::PixelFormat)cocos2d::Texture2D::getDefaultAlphaPixelFormat();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getDescription(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // cocos2d::GLProgram *getGLProgram()
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)self->getGLProgram();
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getMaxS(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLfloat getMaxS()
    GLfloat ret = (GLfloat)self->getMaxS();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getMaxT(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLfloat getMaxT()
    GLfloat ret = (GLfloat)self->getMaxT();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLuint getName()
    GLuint ret = (GLuint)self->getName();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getPath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // std::string getPath()
    std::string ret = (std::string)self->getPath();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getPixelFormat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // Texture2D::PixelFormat getPixelFormat()
    cocos2d::Texture2D::PixelFormat ret = (cocos2d::Texture2D::PixelFormat)self->getPixelFormat();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getPixelsHigh(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // int getPixelsHigh()
    int ret = (int)self->getPixelsHigh();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getPixelsWide(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // int getPixelsWide()
    int ret = (int)self->getPixelsWide();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_getStringForFormat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // const char *getStringForFormat()
    const char *ret = (const char *)self->getStringForFormat();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_hasMipmaps(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // bool hasMipmaps()
    bool ret = (bool)self->hasMipmaps();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_hasPremultipliedAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // bool hasPremultipliedAlpha()
    bool ret = (bool)self->hasPremultipliedAlpha();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithData1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    void *arg1 = nullptr;       /** data */
    lua_Integer arg2 = 0;       /** dataLen */
    lua_Unsigned arg3 = 0;       /** pixelFormat */
    lua_Integer arg4 = 0;       /** pixelsWide */
    lua_Integer arg5 = 0;       /** pixelsHigh */
    cocos2d::Size arg6;       /** contentSize */
    bool arg7 = false;       /** preMultipliedAlpha */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_obj(L, 2, (void **)&arg1, "void *");
    olua_check_int(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);
    auto_olua_check_cocos2d_Size(L, 7, &arg6);
    olua_check_bool(L, 8, &arg7);

    // bool initWithData(const void *data, ssize_t dataLen, Texture2D::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize, @optional bool preMultipliedAlpha)
    bool ret = (bool)self->initWithData(arg1, (ssize_t)arg2, (cocos2d::Texture2D::PixelFormat)arg3, (int)arg4, (int)arg5, arg6, arg7);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithData2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    void *arg1 = nullptr;       /** data */
    lua_Integer arg2 = 0;       /** dataLen */
    lua_Unsigned arg3 = 0;       /** pixelFormat */
    lua_Integer arg4 = 0;       /** pixelsWide */
    lua_Integer arg5 = 0;       /** pixelsHigh */
    cocos2d::Size arg6;       /** contentSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_obj(L, 2, (void **)&arg1, "void *");
    olua_check_int(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);
    auto_olua_check_cocos2d_Size(L, 7, &arg6);

    // bool initWithData(const void *data, ssize_t dataLen, Texture2D::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize, @optional bool preMultipliedAlpha)
    bool ret = (bool)self->initWithData(arg1, (ssize_t)arg2, (cocos2d::Texture2D::PixelFormat)arg3, (int)arg4, (int)arg5, arg6);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithData(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 6) {
        // if ((olua_is_obj(L, 2, "void *")) && (olua_is_int(L, 3)) && (olua_is_uint(L, 4)) && (olua_is_int(L, 5)) && (olua_is_int(L, 6)) && (auto_olua_is_cocos2d_Size(L, 7))) {
            // bool initWithData(const void *data, ssize_t dataLen, Texture2D::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize, @optional bool preMultipliedAlpha)
            return _cocos2d_Texture2D_initWithData2(L);
        // }
    }

    if (num_args == 7) {
        // if ((olua_is_obj(L, 2, "void *")) && (olua_is_int(L, 3)) && (olua_is_uint(L, 4)) && (olua_is_int(L, 5)) && (olua_is_int(L, 6)) && (auto_olua_is_cocos2d_Size(L, 7)) && (olua_is_bool(L, 8))) {
            // bool initWithData(const void *data, ssize_t dataLen, Texture2D::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize, @optional bool preMultipliedAlpha)
            return _cocos2d_Texture2D_initWithData1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::initWithData' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Texture2D_initWithImage1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Image *arg1 = nullptr;       /** image */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Image");

    // bool initWithImage(cocos2d::Image *image)
    bool ret = (bool)self->initWithImage(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithImage2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Image *arg1 = nullptr;       /** image */
    lua_Unsigned arg2 = 0;       /** format */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Image");
    olua_check_uint(L, 3, &arg2);

    // bool initWithImage(cocos2d::Image *image, cocos2d::Texture2D::PixelFormat format)
    bool ret = (bool)self->initWithImage(arg1, (cocos2d::Texture2D::PixelFormat)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithImage(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Image"))) {
            // bool initWithImage(cocos2d::Image *image)
            return _cocos2d_Texture2D_initWithImage1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Image")) && (olua_is_uint(L, 3))) {
            // bool initWithImage(cocos2d::Image *image, cocos2d::Texture2D::PixelFormat format)
            return _cocos2d_Texture2D_initWithImage2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::initWithImage' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Texture2D_initWithString1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */
    lua_Unsigned arg6 = 0;       /** vAlignment */
    bool arg7 = false;       /** enableWrap */
    lua_Integer arg8 = 0;       /** overflow */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    auto_olua_check_cocos2d_Size(L, 5, &arg4);
    olua_check_uint(L, 6, &arg5);
    olua_check_uint(L, 7, &arg6);
    olua_check_bool(L, 8, &arg7);
    olua_check_int(L, 9, &arg8);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
    bool ret = (bool)self->initWithString(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5, (cocos2d::TextVAlignment)arg6, arg7, (int)arg8);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithString2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    lua_Number arg3 = 0;       /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
    bool ret = (bool)self->initWithString(arg1, arg2, (float)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithString3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    auto_olua_check_cocos2d_Size(L, 5, &arg4);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
    bool ret = (bool)self->initWithString(arg1, arg2, (float)arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithString4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    auto_olua_check_cocos2d_Size(L, 5, &arg4);
    olua_check_uint(L, 6, &arg5);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
    bool ret = (bool)self->initWithString(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithString5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */
    lua_Unsigned arg6 = 0;       /** vAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    auto_olua_check_cocos2d_Size(L, 5, &arg4);
    olua_check_uint(L, 6, &arg5);
    olua_check_uint(L, 7, &arg6);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
    bool ret = (bool)self->initWithString(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5, (cocos2d::TextVAlignment)arg6);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithString6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */
    lua_Unsigned arg6 = 0;       /** vAlignment */
    bool arg7 = false;       /** enableWrap */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    auto_olua_check_cocos2d_Size(L, 5, &arg4);
    olua_check_uint(L, 6, &arg5);
    olua_check_uint(L, 7, &arg6);
    olua_check_bool(L, 8, &arg7);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
    bool ret = (bool)self->initWithString(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5, (cocos2d::TextVAlignment)arg6, arg7);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithString(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 3) {
        // if ((olua_is_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
            return _cocos2d_Texture2D_initWithString2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
            return _cocos2d_Texture2D_initWithString3(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5)) && (olua_is_uint(L, 6))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
            return _cocos2d_Texture2D_initWithString4(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5)) && (olua_is_uint(L, 6)) && (olua_is_uint(L, 7))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
            return _cocos2d_Texture2D_initWithString5(L);
        // }
    }

    if (num_args == 7) {
        // if ((olua_is_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5)) && (olua_is_uint(L, 6)) && (olua_is_uint(L, 7)) && (olua_is_bool(L, 8))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
            return _cocos2d_Texture2D_initWithString6(L);
        // }
    }

    if (num_args == 8) {
        // if ((olua_is_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5)) && (olua_is_uint(L, 6)) && (olua_is_uint(L, 7)) && (olua_is_bool(L, 8)) && (olua_is_int(L, 9))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
            return _cocos2d_Texture2D_initWithString1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::initWithString' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Texture2D_new(lua_State *L)
{
    olua_startinvoke(L);

    // Texture2D()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)new cocos2d::Texture2D();
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Texture2D_releaseGLTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void releaseGLTexture()
    self->releaseGLTexture();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_setAliasTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void setAliasTexParameters()
    self->setAliasTexParameters();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_setAlphaTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** alphaTexture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setAlphaTexture(cocos2d::Texture2D *alphaTexture)
    self->setAlphaTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_setAntiAliasTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void setAntiAliasTexParameters()
    self->setAntiAliasTexParameters();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_setDefaultAlphaPixelFormat(lua_State *L)
{
    olua_startinvoke(L);

    lua_Unsigned arg1 = 0;       /** format */

    olua_check_uint(L, 1, &arg1);

    // static void setDefaultAlphaPixelFormat(Texture2D::PixelFormat format)
    cocos2d::Texture2D::setDefaultAlphaPixelFormat((cocos2d::Texture2D::PixelFormat)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_setGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::GLProgram *arg1 = nullptr;       /** program */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgram");

    // void setGLProgram(cocos2d::GLProgram *program)
    self->setGLProgram(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_setMaxS(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    lua_Number arg1 = 0;       /** maxS */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_number(L, 2, &arg1);

    // void setMaxS(GLfloat maxS)
    self->setMaxS((GLfloat)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_setMaxT(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    lua_Number arg1 = 0;       /** maxT */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_number(L, 2, &arg1);

    // void setMaxT(GLfloat maxT)
    self->setMaxT((GLfloat)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_setTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Texture2D::TexParams arg1;       /** texParams */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    auto_olua_check_cocos2d_Texture2D_TexParams(L, 2, &arg1);

    // void setTexParameters(const cocos2d::Texture2D::TexParams &texParams)
    self->setTexParameters(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Texture2D_updateWithData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    void *arg1 = nullptr;       /** data */
    lua_Integer arg2 = 0;       /** offsetX */
    lua_Integer arg3 = 0;       /** offsetY */
    lua_Integer arg4 = 0;       /** width */
    lua_Integer arg5 = 0;       /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_obj(L, 2, (void **)&arg1, "void *");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);

    // bool updateWithData(const void *data, int offsetX, int offsetY, int width, int height)
    bool ret = (bool)self->updateWithData(arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Texture2D(lua_State *L)
{
    oluacls_class(L, "cc.Texture2D", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Texture2D___move);
    oluacls_func(L, "drawAtPoint", _cocos2d_Texture2D_drawAtPoint);
    oluacls_func(L, "drawInRect", _cocos2d_Texture2D_drawInRect);
    oluacls_func(L, "generateMipmap", _cocos2d_Texture2D_generateMipmap);
    oluacls_func(L, "getAlphaTexture", _cocos2d_Texture2D_getAlphaTexture);
    oluacls_func(L, "getAlphaTextureName", _cocos2d_Texture2D_getAlphaTextureName);
    oluacls_func(L, "getBitsPerPixelForFormat", _cocos2d_Texture2D_getBitsPerPixelForFormat);
    oluacls_func(L, "getContentSize", _cocos2d_Texture2D_getContentSize);
    oluacls_func(L, "getContentSizeInPixels", _cocos2d_Texture2D_getContentSizeInPixels);
    oluacls_func(L, "getDefaultAlphaPixelFormat", _cocos2d_Texture2D_getDefaultAlphaPixelFormat);
    oluacls_func(L, "getDescription", _cocos2d_Texture2D_getDescription);
    oluacls_func(L, "getGLProgram", _cocos2d_Texture2D_getGLProgram);
    oluacls_func(L, "getMaxS", _cocos2d_Texture2D_getMaxS);
    oluacls_func(L, "getMaxT", _cocos2d_Texture2D_getMaxT);
    oluacls_func(L, "getName", _cocos2d_Texture2D_getName);
    oluacls_func(L, "getPath", _cocos2d_Texture2D_getPath);
    oluacls_func(L, "getPixelFormat", _cocos2d_Texture2D_getPixelFormat);
    oluacls_func(L, "getPixelsHigh", _cocos2d_Texture2D_getPixelsHigh);
    oluacls_func(L, "getPixelsWide", _cocos2d_Texture2D_getPixelsWide);
    oluacls_func(L, "getStringForFormat", _cocos2d_Texture2D_getStringForFormat);
    oluacls_func(L, "hasMipmaps", _cocos2d_Texture2D_hasMipmaps);
    oluacls_func(L, "hasPremultipliedAlpha", _cocos2d_Texture2D_hasPremultipliedAlpha);
    oluacls_func(L, "initWithData", _cocos2d_Texture2D_initWithData);
    oluacls_func(L, "initWithImage", _cocos2d_Texture2D_initWithImage);
    oluacls_func(L, "initWithString", _cocos2d_Texture2D_initWithString);
    oluacls_func(L, "new", _cocos2d_Texture2D_new);
    oluacls_func(L, "releaseGLTexture", _cocos2d_Texture2D_releaseGLTexture);
    oluacls_func(L, "setAliasTexParameters", _cocos2d_Texture2D_setAliasTexParameters);
    oluacls_func(L, "setAlphaTexture", _cocos2d_Texture2D_setAlphaTexture);
    oluacls_func(L, "setAntiAliasTexParameters", _cocos2d_Texture2D_setAntiAliasTexParameters);
    oluacls_func(L, "setDefaultAlphaPixelFormat", _cocos2d_Texture2D_setDefaultAlphaPixelFormat);
    oluacls_func(L, "setGLProgram", _cocos2d_Texture2D_setGLProgram);
    oluacls_func(L, "setMaxS", _cocos2d_Texture2D_setMaxS);
    oluacls_func(L, "setMaxT", _cocos2d_Texture2D_setMaxT);
    oluacls_func(L, "setTexParameters", _cocos2d_Texture2D_setTexParameters);
    oluacls_func(L, "updateWithData", _cocos2d_Texture2D_updateWithData);
    oluacls_prop(L, "alphaTexture", _cocos2d_Texture2D_getAlphaTexture, _cocos2d_Texture2D_setAlphaTexture);
    oluacls_prop(L, "alphaTextureName", _cocos2d_Texture2D_getAlphaTextureName, nullptr);
    oluacls_prop(L, "contentSize", _cocos2d_Texture2D_getContentSize, nullptr);
    oluacls_prop(L, "contentSizeInPixels", _cocos2d_Texture2D_getContentSizeInPixels, nullptr);
    oluacls_prop(L, "defaultAlphaPixelFormat", _cocos2d_Texture2D_getDefaultAlphaPixelFormat, _cocos2d_Texture2D_setDefaultAlphaPixelFormat);
    oluacls_prop(L, "description", _cocos2d_Texture2D_getDescription, nullptr);
    oluacls_prop(L, "glProgram", _cocos2d_Texture2D_getGLProgram, _cocos2d_Texture2D_setGLProgram);
    oluacls_prop(L, "maxS", _cocos2d_Texture2D_getMaxS, _cocos2d_Texture2D_setMaxS);
    oluacls_prop(L, "maxT", _cocos2d_Texture2D_getMaxT, _cocos2d_Texture2D_setMaxT);
    oluacls_prop(L, "name", _cocos2d_Texture2D_getName, nullptr);
    oluacls_prop(L, "path", _cocos2d_Texture2D_getPath, nullptr);
    oluacls_prop(L, "pixelFormat", _cocos2d_Texture2D_getPixelFormat, nullptr);
    oluacls_prop(L, "pixelsHigh", _cocos2d_Texture2D_getPixelsHigh, nullptr);
    oluacls_prop(L, "pixelsWide", _cocos2d_Texture2D_getPixelsWide, nullptr);
    oluacls_prop(L, "stringForFormat", _cocos2d_Texture2D_getStringForFormat, nullptr);

    olua_registerluatype<cocos2d::Texture2D>(L, "cc.Texture2D");

    return 1;
}

static int _cocos2d_TextureCube___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TextureCube *)olua_toobj(L, 1, "cc.TextureCube");
    olua_push_cppobj(L, self, "cc.TextureCube");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TextureCube_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** positive_x */
    std::string arg2;       /** negative_x */
    std::string arg3;       /** positive_y */
    std::string arg4;       /** negative_y */
    std::string arg5;       /** positive_z */
    std::string arg6;       /** negative_z */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);
    olua_check_std_string(L, 5, &arg5);
    olua_check_std_string(L, 6, &arg6);

    // static cocos2d::TextureCube *create(const std::string &positive_x, const std::string &negative_x, const std::string &positive_y, const std::string &negative_y, const std::string &positive_z, const std::string &negative_z)
    cocos2d::TextureCube *ret = (cocos2d::TextureCube *)cocos2d::TextureCube::create(arg1, arg2, arg3, arg4, arg5, arg6);
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureCube");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCube_new(lua_State *L)
{
    olua_startinvoke(L);

    // TextureCube()
    cocos2d::TextureCube *ret = (cocos2d::TextureCube *)new cocos2d::TextureCube();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureCube");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureCube_reloadTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCube *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCube");

    // bool reloadTexture()
    bool ret = (bool)self->reloadTexture();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TextureCube(lua_State *L)
{
    oluacls_class(L, "cc.TextureCube", "cc.Texture2D");
    oluacls_func(L, "__move", _cocos2d_TextureCube___move);
    oluacls_func(L, "create", _cocos2d_TextureCube_create);
    oluacls_func(L, "new", _cocos2d_TextureCube_new);
    oluacls_func(L, "reloadTexture", _cocos2d_TextureCube_reloadTexture);

    olua_registerluatype<cocos2d::TextureCube>(L, "cc.TextureCube");

    return 1;
}

static int _cocos2d_TextureAtlas___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TextureAtlas *)olua_toobj(L, 1, "cc.TextureAtlas");
    olua_push_cppobj(L, self, "cc.TextureAtlas");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TextureAtlas_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** file */
    lua_Integer arg2 = 0;       /** capacity */

    olua_check_std_string(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);

    // static cocos2d::TextureAtlas *create(const std::string &file, ssize_t capacity)
    cocos2d::TextureAtlas *ret = (cocos2d::TextureAtlas *)cocos2d::TextureAtlas::create(arg1, (ssize_t)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_createWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    lua_Integer arg2 = 0;       /** capacity */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 2, &arg2);

    // static cocos2d::TextureAtlas *createWithTexture(cocos2d::Texture2D *texture, ssize_t capacity)
    cocos2d::TextureAtlas *ret = (cocos2d::TextureAtlas *)cocos2d::TextureAtlas::createWithTexture(arg1, (ssize_t)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_drawNumberOfQuads1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** n */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);

    // void drawNumberOfQuads(ssize_t n)
    self->drawNumberOfQuads((ssize_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_drawNumberOfQuads2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** numberOfQuads */
    lua_Integer arg2 = 0;       /** start */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void drawNumberOfQuads(ssize_t numberOfQuads, ssize_t start)
    self->drawNumberOfQuads((ssize_t)arg1, (ssize_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_drawNumberOfQuads(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_int(L, 2))) {
            // void drawNumberOfQuads(ssize_t n)
            return _cocos2d_TextureAtlas_drawNumberOfQuads1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_int(L, 2)) && (olua_is_int(L, 3))) {
            // void drawNumberOfQuads(ssize_t numberOfQuads, ssize_t start)
            return _cocos2d_TextureAtlas_drawNumberOfQuads2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureAtlas::drawNumberOfQuads' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextureAtlas_drawQuads(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");

    // void drawQuads()
    self->drawQuads();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_fillWithEmptyQuadsFromIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** index */
    lua_Integer arg2 = 0;       /** amount */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void fillWithEmptyQuadsFromIndex(ssize_t index, ssize_t amount)
    self->fillWithEmptyQuadsFromIndex((ssize_t)arg1, (ssize_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_getCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");

    // ssize_t getCapacity()
    ssize_t ret = (ssize_t)self->getCapacity();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_getDescription(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture();
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_getTotalQuads(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");

    // ssize_t getTotalQuads()
    ssize_t ret = (ssize_t)self->getTotalQuads();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_increaseTotalQuadsWith(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** amount */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);

    // void increaseTotalQuadsWith(ssize_t amount)
    self->increaseTotalQuadsWith((ssize_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_initWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    std::string arg1;       /** file */
    lua_Integer arg2 = 0;       /** capacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // bool initWithFile(const std::string &file, ssize_t capacity)
    bool ret = (bool)self->initWithFile(arg1, (ssize_t)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_initWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    lua_Integer arg2 = 0;       /** capacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 3, &arg2);

    // bool initWithTexture(cocos2d::Texture2D *texture, ssize_t capacity)
    bool ret = (bool)self->initWithTexture(arg1, (ssize_t)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_insertQuadFromIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** fromIndex */
    lua_Integer arg2 = 0;       /** newIndex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void insertQuadFromIndex(ssize_t fromIndex, ssize_t newIndex)
    self->insertQuadFromIndex((ssize_t)arg1, (ssize_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_isDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");

    // bool isDirty()
    bool ret = (bool)self->isDirty();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_listenRendererRecreated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventCustom");

    // void listenRendererRecreated(cocos2d::EventCustom *event)
    self->listenRendererRecreated(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_moveQuadsFromIndex1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** oldIndex */
    lua_Integer arg2 = 0;       /** amount */
    lua_Integer arg3 = 0;       /** newIndex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void moveQuadsFromIndex(ssize_t oldIndex, ssize_t amount, ssize_t newIndex)
    self->moveQuadsFromIndex((ssize_t)arg1, (ssize_t)arg2, (ssize_t)arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_moveQuadsFromIndex2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** index */
    lua_Integer arg2 = 0;       /** newIndex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void moveQuadsFromIndex(ssize_t index, ssize_t newIndex)
    self->moveQuadsFromIndex((ssize_t)arg1, (ssize_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_moveQuadsFromIndex(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((olua_is_int(L, 2)) && (olua_is_int(L, 3))) {
            // void moveQuadsFromIndex(ssize_t index, ssize_t newIndex)
            return _cocos2d_TextureAtlas_moveQuadsFromIndex2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_int(L, 2)) && (olua_is_int(L, 3)) && (olua_is_int(L, 4))) {
            // void moveQuadsFromIndex(ssize_t oldIndex, ssize_t amount, ssize_t newIndex)
            return _cocos2d_TextureAtlas_moveQuadsFromIndex1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureAtlas::moveQuadsFromIndex' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextureAtlas_new(lua_State *L)
{
    olua_startinvoke(L);

    // TextureAtlas()
    cocos2d::TextureAtlas *ret = (cocos2d::TextureAtlas *)new cocos2d::TextureAtlas();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureAtlas");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_removeAllQuads(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");

    // void removeAllQuads()
    self->removeAllQuads();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_removeQuadAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);

    // void removeQuadAtIndex(ssize_t index)
    self->removeQuadAtIndex((ssize_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_removeQuadsAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** index */
    lua_Integer arg2 = 0;       /** amount */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void removeQuadsAtIndex(ssize_t index, ssize_t amount)
    self->removeQuadsAtIndex((ssize_t)arg1, (ssize_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_resizeCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** capacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_int(L, 2, &arg1);

    // bool resizeCapacity(ssize_t capacity)
    bool ret = (bool)self->resizeCapacity((ssize_t)arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextureAtlas_setDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    bool arg1 = false;       /** bDirty */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_bool(L, 2, &arg1);

    // void setDirty(bool bDirty)
    self->setDirty(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextureAtlas_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureAtlas");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_TextureAtlas(lua_State *L)
{
    oluacls_class(L, "cc.TextureAtlas", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_TextureAtlas___move);
    oluacls_func(L, "create", _cocos2d_TextureAtlas_create);
    oluacls_func(L, "createWithTexture", _cocos2d_TextureAtlas_createWithTexture);
    oluacls_func(L, "drawNumberOfQuads", _cocos2d_TextureAtlas_drawNumberOfQuads);
    oluacls_func(L, "drawQuads", _cocos2d_TextureAtlas_drawQuads);
    oluacls_func(L, "fillWithEmptyQuadsFromIndex", _cocos2d_TextureAtlas_fillWithEmptyQuadsFromIndex);
    oluacls_func(L, "getCapacity", _cocos2d_TextureAtlas_getCapacity);
    oluacls_func(L, "getDescription", _cocos2d_TextureAtlas_getDescription);
    oluacls_func(L, "getTexture", _cocos2d_TextureAtlas_getTexture);
    oluacls_func(L, "getTotalQuads", _cocos2d_TextureAtlas_getTotalQuads);
    oluacls_func(L, "increaseTotalQuadsWith", _cocos2d_TextureAtlas_increaseTotalQuadsWith);
    oluacls_func(L, "initWithFile", _cocos2d_TextureAtlas_initWithFile);
    oluacls_func(L, "initWithTexture", _cocos2d_TextureAtlas_initWithTexture);
    oluacls_func(L, "insertQuadFromIndex", _cocos2d_TextureAtlas_insertQuadFromIndex);
    oluacls_func(L, "isDirty", _cocos2d_TextureAtlas_isDirty);
    oluacls_func(L, "listenRendererRecreated", _cocos2d_TextureAtlas_listenRendererRecreated);
    oluacls_func(L, "moveQuadsFromIndex", _cocos2d_TextureAtlas_moveQuadsFromIndex);
    oluacls_func(L, "new", _cocos2d_TextureAtlas_new);
    oluacls_func(L, "removeAllQuads", _cocos2d_TextureAtlas_removeAllQuads);
    oluacls_func(L, "removeQuadAtIndex", _cocos2d_TextureAtlas_removeQuadAtIndex);
    oluacls_func(L, "removeQuadsAtIndex", _cocos2d_TextureAtlas_removeQuadsAtIndex);
    oluacls_func(L, "resizeCapacity", _cocos2d_TextureAtlas_resizeCapacity);
    oluacls_func(L, "setDirty", _cocos2d_TextureAtlas_setDirty);
    oluacls_func(L, "setTexture", _cocos2d_TextureAtlas_setTexture);
    oluacls_prop(L, "capacity", _cocos2d_TextureAtlas_getCapacity, nullptr);
    oluacls_prop(L, "description", _cocos2d_TextureAtlas_getDescription, nullptr);
    oluacls_prop(L, "dirty", _cocos2d_TextureAtlas_isDirty, _cocos2d_TextureAtlas_setDirty);
    oluacls_prop(L, "texture", _cocos2d_TextureAtlas_getTexture, _cocos2d_TextureAtlas_setTexture);
    oluacls_prop(L, "totalQuads", _cocos2d_TextureAtlas_getTotalQuads, nullptr);

    olua_registerluatype<cocos2d::TextureAtlas>(L, "cc.TextureAtlas");

    return 1;
}

static int _cocos2d_VRIHeadTracker___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::VRIHeadTracker *)olua_toobj(L, 1, "cc.VRIHeadTracker");
    olua_push_cppobj(L, self, "cc.VRIHeadTracker");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_VRIHeadTracker_getLocalPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VRIHeadTracker *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIHeadTracker");

    // cocos2d::Vec3 getLocalPosition()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getLocalPosition();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_VRIHeadTracker_getLocalRotation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VRIHeadTracker *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIHeadTracker");

    // cocos2d::Mat4 getLocalRotation()
    cocos2d::Mat4 ret = (cocos2d::Mat4)self->getLocalRotation();
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_VRIHeadTracker(lua_State *L)
{
    oluacls_class(L, "cc.VRIHeadTracker", nullptr);
    oluacls_func(L, "__move", _cocos2d_VRIHeadTracker___move);
    oluacls_func(L, "getLocalPosition", _cocos2d_VRIHeadTracker_getLocalPosition);
    oluacls_func(L, "getLocalRotation", _cocos2d_VRIHeadTracker_getLocalRotation);
    oluacls_prop(L, "localPosition", _cocos2d_VRIHeadTracker_getLocalPosition, nullptr);
    oluacls_prop(L, "localRotation", _cocos2d_VRIHeadTracker_getLocalRotation, nullptr);

    olua_registerluatype<cocos2d::VRIHeadTracker>(L, "cc.VRIHeadTracker");

    return 1;
}

static int _cocos2d_VRIRenderer___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::VRIRenderer *)olua_toobj(L, 1, "cc.VRIRenderer");
    olua_push_cppobj(L, self, "cc.VRIRenderer");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_VRIRenderer_cleanup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VRIRenderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIRenderer");

    // void cleanup()
    self->cleanup();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_VRIRenderer_getHeadTracker(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VRIRenderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIRenderer");

    // cocos2d::VRIHeadTracker *getHeadTracker()
    cocos2d::VRIHeadTracker *ret = (cocos2d::VRIHeadTracker *)self->getHeadTracker();
    int num_ret = olua_push_cppobj(L, ret, "cc.VRIHeadTracker");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_VRIRenderer_render(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VRIRenderer *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */
    cocos2d::Renderer *arg2 = nullptr;       /** renderer */

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIRenderer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Renderer");

    // void render(cocos2d::Scene *scene, cocos2d::Renderer *renderer)
    self->render(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_VRIRenderer_setup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::VRIRenderer *self = nullptr;
    cocos2d::GLView *arg1 = nullptr;       /** glview */

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIRenderer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLView");

    // void setup(cocos2d::GLView *glview)
    self->setup(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_VRIRenderer(lua_State *L)
{
    oluacls_class(L, "cc.VRIRenderer", nullptr);
    oluacls_func(L, "__move", _cocos2d_VRIRenderer___move);
    oluacls_func(L, "cleanup", _cocos2d_VRIRenderer_cleanup);
    oluacls_func(L, "getHeadTracker", _cocos2d_VRIRenderer_getHeadTracker);
    oluacls_func(L, "render", _cocos2d_VRIRenderer_render);
    oluacls_func(L, "setup", _cocos2d_VRIRenderer_setup);
    oluacls_prop(L, "headTracker", _cocos2d_VRIRenderer_getHeadTracker, nullptr);

    olua_registerluatype<cocos2d::VRIRenderer>(L, "cc.VRIRenderer");

    return 1;
}

static int _cocos2d_VRGenericRenderer___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::VRGenericRenderer *)olua_toobj(L, 1, "cc.VRGenericRenderer");
    lua_pushstring(L, ".ownership");
    olua_getvariable(L, 1);
    if (lua_toboolean(L, -1) && self) {
        olua_setrawdata(L, 1, nullptr);
        delete self;
    }

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_VRGenericRenderer___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::VRGenericRenderer *)olua_toobj(L, 1, "cc.VRGenericRenderer");
    olua_push_cppobj(L, self, "cc.VRGenericRenderer");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_VRGenericRenderer_new(lua_State *L)
{
    olua_startinvoke(L);

    // VRGenericRenderer()
    cocos2d::VRGenericRenderer *ret = (cocos2d::VRGenericRenderer *)new cocos2d::VRGenericRenderer();
    int num_ret = olua_push_cppobj(L, ret, "cc.VRGenericRenderer");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_VRGenericRenderer(lua_State *L)
{
    oluacls_class(L, "cc.VRGenericRenderer", "cc.VRIRenderer");
    oluacls_func(L, "__gc", _cocos2d_VRGenericRenderer___gc);
    oluacls_func(L, "__move", _cocos2d_VRGenericRenderer___move);
    oluacls_func(L, "new", _cocos2d_VRGenericRenderer_new);

    olua_registerluatype<cocos2d::VRGenericRenderer>(L, "cc.VRGenericRenderer");

    return 1;
}

static int _cocos2d_VRGenericHeadTracker___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::VRGenericHeadTracker *)olua_toobj(L, 1, "cc.VRGenericHeadTracker");
    lua_pushstring(L, ".ownership");
    olua_getvariable(L, 1);
    if (lua_toboolean(L, -1) && self) {
        olua_setrawdata(L, 1, nullptr);
        delete self;
    }

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_VRGenericHeadTracker___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::VRGenericHeadTracker *)olua_toobj(L, 1, "cc.VRGenericHeadTracker");
    olua_push_cppobj(L, self, "cc.VRGenericHeadTracker");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_VRGenericHeadTracker_new(lua_State *L)
{
    olua_startinvoke(L);

    // VRGenericHeadTracker()
    cocos2d::VRGenericHeadTracker *ret = (cocos2d::VRGenericHeadTracker *)new cocos2d::VRGenericHeadTracker();
    int num_ret = olua_push_cppobj(L, ret, "cc.VRGenericHeadTracker");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_VRGenericHeadTracker(lua_State *L)
{
    oluacls_class(L, "cc.VRGenericHeadTracker", "cc.VRIHeadTracker");
    oluacls_func(L, "__gc", _cocos2d_VRGenericHeadTracker___gc);
    oluacls_func(L, "__move", _cocos2d_VRGenericHeadTracker___move);
    oluacls_func(L, "new", _cocos2d_VRGenericHeadTracker_new);

    olua_registerluatype<cocos2d::VRGenericHeadTracker>(L, "cc.VRGenericHeadTracker");

    return 1;
}

static int luaopen_cocos2d_network_WebSocket_ErrorCode(lua_State *L)
{
    oluacls_class(L, "cc.WebSocket.ErrorCode", nullptr);
    oluacls_const_integer(L, "CONNECTION_FAILURE", (lua_Integer)cocos2d::network::WebSocket::ErrorCode::CONNECTION_FAILURE);
    oluacls_const_integer(L, "TIME_OUT", (lua_Integer)cocos2d::network::WebSocket::ErrorCode::TIME_OUT);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)cocos2d::network::WebSocket::ErrorCode::UNKNOWN);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_network_WebSocket_State(lua_State *L)
{
    oluacls_class(L, "cc.WebSocket.State", nullptr);
    oluacls_const_integer(L, "CLOSED", (lua_Integer)cocos2d::network::WebSocket::State::CLOSED);
    oluacls_const_integer(L, "CLOSING", (lua_Integer)cocos2d::network::WebSocket::State::CLOSING);
    oluacls_const_integer(L, "CONNECTING", (lua_Integer)cocos2d::network::WebSocket::State::CONNECTING);
    oluacls_const_integer(L, "OPEN", (lua_Integer)cocos2d::network::WebSocket::State::OPEN);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_network_WebSocket_Delegate___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::network::WebSocket::Delegate *)olua_toobj(L, 1, "cc.WebSocket.Delegate");
    olua_push_cppobj(L, self, "cc.WebSocket.Delegate");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_network_WebSocket_Delegate_onClose(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket::Delegate *self = nullptr;
    cocos2d::network::WebSocket *arg1 = nullptr;       /** ws */

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket.Delegate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.WebSocket");

    // void onClose(cocos2d::network::WebSocket *ws)
    self->onClose(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_network_WebSocket_Delegate_onError(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket::Delegate *self = nullptr;
    cocos2d::network::WebSocket *arg1 = nullptr;       /** ws */
    lua_Unsigned arg2 = 0;       /** error */

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket.Delegate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.WebSocket");
    olua_check_uint(L, 3, &arg2);

    // void onError(cocos2d::network::WebSocket *ws, const cocos2d::network::WebSocket::ErrorCode &error)
    self->onError(arg1, (cocos2d::network::WebSocket::ErrorCode)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_network_WebSocket_Delegate_onMessage(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket::Delegate *self = nullptr;
    cocos2d::network::WebSocket *arg1 = nullptr;       /** ws */
    cocos2d::network::WebSocket::Data arg2;       /** data */

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket.Delegate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.WebSocket");
    auto_olua_check_cocos2d_network_WebSocket_Data(L, 3, &arg2);

    // void onMessage(cocos2d::network::WebSocket *ws, const cocos2d::network::WebSocket::Data &data)
    self->onMessage(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_network_WebSocket_Delegate_onOpen(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket::Delegate *self = nullptr;
    cocos2d::network::WebSocket *arg1 = nullptr;       /** ws */

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket.Delegate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.WebSocket");

    // void onOpen(cocos2d::network::WebSocket *ws)
    self->onOpen(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_network_WebSocket_Delegate(lua_State *L)
{
    oluacls_class(L, "cc.WebSocket.Delegate", nullptr);
    oluacls_func(L, "__move", _cocos2d_network_WebSocket_Delegate___move);
    oluacls_func(L, "onClose", _cocos2d_network_WebSocket_Delegate_onClose);
    oluacls_func(L, "onError", _cocos2d_network_WebSocket_Delegate_onError);
    oluacls_func(L, "onMessage", _cocos2d_network_WebSocket_Delegate_onMessage);
    oluacls_func(L, "onOpen", _cocos2d_network_WebSocket_Delegate_onOpen);

    olua_registerluatype<cocos2d::network::WebSocket::Delegate>(L, "cc.WebSocket.Delegate");

    return 1;
}

static int _cocos2d_network_WebSocket___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::network::WebSocket *)olua_toobj(L, 1, "cc.WebSocket");
    lua_pushstring(L, ".ownership");
    olua_getvariable(L, 1);
    if (lua_toboolean(L, -1) && self) {
        olua_setrawdata(L, 1, nullptr);
        delete self;
    }

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_network_WebSocket___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::network::WebSocket *)olua_toobj(L, 1, "cc.WebSocket");
    olua_push_cppobj(L, self, "cc.WebSocket");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_network_WebSocket_close(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket");

    // void close()
    self->close();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_network_WebSocket_closeAllConnections(lua_State *L)
{
    olua_startinvoke(L);

    // static void closeAllConnections()
    cocos2d::network::WebSocket::closeAllConnections();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_network_WebSocket_closeAsync(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket");

    // void closeAsync()
    self->closeAsync();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_network_WebSocket_getProtocol(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket");

    // const std::string &getProtocol()
    const std::string &ret = (const std::string &)self->getProtocol();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_network_WebSocket_getReadyState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket");

    // cocos2d::network::WebSocket::State getReadyState()
    cocos2d::network::WebSocket::State ret = (cocos2d::network::WebSocket::State)self->getReadyState();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_network_WebSocket_getUrl(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket");

    // const std::string &getUrl()
    const std::string &ret = (const std::string &)self->getUrl();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_network_WebSocket_init(lua_State *L)
{
    olua_startinvoke(L);

    std::vector<std::string> protocols;
    auto self = olua_toobj<cocos2d::network::WebSocket>(L, 1);
    auto delegate = olua_checkobj<cocos2d::network::WebSocket::Delegate>(L, 2);
    std::string url = olua_tostring(L, 3);
    std::string cafile = olua_optstring(L, 5, "");

    if (!lua_isnil(L, 4)) {
        luaL_checktype(L, 4, LUA_TTABLE);
        int len = (int)lua_rawlen(L, 4);
        protocols.reserve(len);
        for (int i = 1; i <= len; i++) {
            lua_rawgeti(L, 4, i);
            protocols.push_back(olua_checkstring(L, -1));
            lua_pop(L, 1);
        }
    }

    self->init(*delegate, url, protocols.size() > 0 ? &protocols : nullptr, cafile);

    olua_singleref(L, 1, "delegate", 2);

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_network_WebSocket_new(lua_State *L)
{
    olua_startinvoke(L);

    // WebSocket()
    cocos2d::network::WebSocket *ret = (cocos2d::network::WebSocket *)new cocos2d::network::WebSocket();
    int num_ret = olua_push_cppobj(L, ret, "cc.WebSocket");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_network_WebSocket_send1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;
    std::string arg1;       /** message */

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket");
    olua_check_std_string(L, 2, &arg1);

    // void send(const std::string &message)
    self->send(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_network_WebSocket_send2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;
    const char *arg1 = nullptr;       /** binaryMsg */
    lua_Unsigned arg2 = 0;       /** len */

    olua_to_cppobj(L, 1, (void **)&self, "cc.WebSocket");
    olua_check_string(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void send(const unsigned char *binaryMsg, unsigned int len)
    self->send((const unsigned char *)arg1, (unsigned int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_network_WebSocket_send(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // void send(const std::string &message)
            return _cocos2d_network_WebSocket_send1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 2)) && (olua_is_uint(L, 3))) {
            // void send(const unsigned char *binaryMsg, unsigned int len)
            return _cocos2d_network_WebSocket_send2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::network::WebSocket::send' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_network_WebSocket(lua_State *L)
{
    oluacls_class(L, "cc.WebSocket", nullptr);
    oluacls_func(L, "__gc", _cocos2d_network_WebSocket___gc);
    oluacls_func(L, "__move", _cocos2d_network_WebSocket___move);
    oluacls_func(L, "close", _cocos2d_network_WebSocket_close);
    oluacls_func(L, "closeAllConnections", _cocos2d_network_WebSocket_closeAllConnections);
    oluacls_func(L, "closeAsync", _cocos2d_network_WebSocket_closeAsync);
    oluacls_func(L, "getProtocol", _cocos2d_network_WebSocket_getProtocol);
    oluacls_func(L, "getReadyState", _cocos2d_network_WebSocket_getReadyState);
    oluacls_func(L, "getUrl", _cocos2d_network_WebSocket_getUrl);
    oluacls_func(L, "init", _cocos2d_network_WebSocket_init);
    oluacls_func(L, "new", _cocos2d_network_WebSocket_new);
    oluacls_func(L, "send", _cocos2d_network_WebSocket_send);
    oluacls_prop(L, "protocol", _cocos2d_network_WebSocket_getProtocol, nullptr);
    oluacls_prop(L, "readyState", _cocos2d_network_WebSocket_getReadyState, nullptr);
    oluacls_prop(L, "url", _cocos2d_network_WebSocket_getUrl, nullptr);

    olua_registerluatype<cocos2d::network::WebSocket>(L, "cc.WebSocket");

    return 1;
}

static int _cocos2d_LuaWebSocketDelegate___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::LuaWebSocketDelegate *)olua_toobj(L, 1, "cc.LuaWebSocketDelegate");
    lua_pushstring(L, ".ownership");
    olua_getvariable(L, 1);
    if (lua_toboolean(L, -1) && self) {
        olua_setrawdata(L, 1, nullptr);
        delete self;
    }

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LuaWebSocketDelegate___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::LuaWebSocketDelegate *)olua_toobj(L, 1, "cc.LuaWebSocketDelegate");
    olua_push_cppobj(L, self, "cc.LuaWebSocketDelegate");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_LuaWebSocketDelegate_new(lua_State *L)
{
    olua_startinvoke(L);

    // LuaWebSocketDelegate()
    cocos2d::LuaWebSocketDelegate *ret = (cocos2d::LuaWebSocketDelegate *)new cocos2d::LuaWebSocketDelegate();
    int num_ret = olua_push_cppobj(L, ret, "cc.LuaWebSocketDelegate");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaWebSocketDelegate_get_onCloseCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaWebSocketDelegate");

    void *callback_store_obj = (void *)self;
    std::string tag = "onClose";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (network::WebSocket *)> onCloseCallback
    std::function<void(cocos2d::network::WebSocket *)> ret = (std::function<void(cocos2d::network::WebSocket *)>)self->onCloseCallback;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::network::WebSocket *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaWebSocketDelegate_set_onCloseCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;
    std::function<void(cocos2d::network::WebSocket *)> arg1;       /** onCloseCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaWebSocketDelegate");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onClose";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::network::WebSocket *arg1) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.WebSocket");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onClose";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (network::WebSocket *)> onCloseCallback
    self->onCloseCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LuaWebSocketDelegate_get_onErrorCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaWebSocketDelegate");

    void *callback_store_obj = (void *)self;
    std::string tag = "onError";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (network::WebSocket *, const network::WebSocket::ErrorCode &)> onErrorCallback
    std::function<void(cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)> ret = (std::function<void(cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)>)self->onErrorCallback;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaWebSocketDelegate_set_onErrorCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;
    std::function<void(cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)> arg1;       /** onErrorCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaWebSocketDelegate");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onError";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::network::WebSocket *arg1, const cocos2d::network::WebSocket::ErrorCode &arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.WebSocket");
                olua_push_uint(L, (lua_Unsigned)arg2);
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onError";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (network::WebSocket *, const network::WebSocket::ErrorCode &)> onErrorCallback
    self->onErrorCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LuaWebSocketDelegate_get_onMessageCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaWebSocketDelegate");

    void *callback_store_obj = (void *)self;
    std::string tag = "onMessage";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (network::WebSocket *, const network::WebSocket::Data &)> onMessageCallback
    std::function<void(cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)> ret = (std::function<void(cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)>)self->onMessageCallback;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaWebSocketDelegate_set_onMessageCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;
    std::function<void(cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)> arg1;       /** onMessageCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaWebSocketDelegate");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMessage";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::network::WebSocket *arg1, const cocos2d::network::WebSocket::Data &arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.WebSocket");
                auto_olua_push_cocos2d_network_WebSocket_Data(L, &arg2);
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onMessage";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (network::WebSocket *, const network::WebSocket::Data &)> onMessageCallback
    self->onMessageCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LuaWebSocketDelegate_get_onOpenCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaWebSocketDelegate");

    void *callback_store_obj = (void *)self;
    std::string tag = "onOpen";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (network::WebSocket *)> onOpenCallback
    std::function<void(cocos2d::network::WebSocket *)> ret = (std::function<void(cocos2d::network::WebSocket *)>)self->onOpenCallback;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::network::WebSocket *)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaWebSocketDelegate_set_onOpenCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;
    std::function<void(cocos2d::network::WebSocket *)> arg1;       /** onOpenCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaWebSocketDelegate");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onOpen";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](cocos2d::network::WebSocket *arg1) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_cppobj(L, arg1, "cc.WebSocket");
                olua_disable_objpool(L);

                olua_callback(L, callback_store_obj, func.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onOpen";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (network::WebSocket *)> onOpenCallback
    self->onOpenCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_LuaWebSocketDelegate(lua_State *L)
{
    oluacls_class(L, "cc.LuaWebSocketDelegate", "cc.WebSocket.Delegate");
    oluacls_func(L, "__gc", _cocos2d_LuaWebSocketDelegate___gc);
    oluacls_func(L, "__move", _cocos2d_LuaWebSocketDelegate___move);
    oluacls_func(L, "new", _cocos2d_LuaWebSocketDelegate_new);
    oluacls_prop(L, "onClose", _cocos2d_LuaWebSocketDelegate_get_onCloseCallback, _cocos2d_LuaWebSocketDelegate_set_onCloseCallback);
    oluacls_prop(L, "onError", _cocos2d_LuaWebSocketDelegate_get_onErrorCallback, _cocos2d_LuaWebSocketDelegate_set_onErrorCallback);
    oluacls_prop(L, "onMessage", _cocos2d_LuaWebSocketDelegate_get_onMessageCallback, _cocos2d_LuaWebSocketDelegate_set_onMessageCallback);
    oluacls_prop(L, "onOpen", _cocos2d_LuaWebSocketDelegate_get_onOpenCallback, _cocos2d_LuaWebSocketDelegate_set_onOpenCallback);

    olua_registerluatype<cocos2d::LuaWebSocketDelegate>(L, "cc.LuaWebSocketDelegate");

    return 1;
}

static int _cocos2d_ActionManager___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ActionManager *)olua_toobj(L, 1, "cc.ActionManager");
    olua_push_cppobj(L, self, "cc.ActionManager");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ActionManager_addAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;       /** action */
    cocos2d::Node *arg2 = nullptr;       /** target */
    bool arg3 = false;       /** paused */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");
    olua_check_bool(L, 4, &arg3);

    // void addAction(cocos2d::Action *action, cocos2d::Node *target, bool paused)
    self->addAction(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_getActionByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */
    cocos2d::Node *arg2 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // cocos2d::Action *getActionByTag(int tag, const cocos2d::Node *target)
    cocos2d::Action *ret = (cocos2d::Action *)self->getActionByTag((int)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Action");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionManager_getNumberOfRunningActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");

    // ssize_t getNumberOfRunningActions()
    ssize_t ret = (ssize_t)self->getNumberOfRunningActions();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionManager_getNumberOfRunningActionsInTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // ssize_t getNumberOfRunningActionsInTarget(const cocos2d::Node *target)
    ssize_t ret = (ssize_t)self->getNumberOfRunningActionsInTarget(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */
    lua_Integer arg2 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // size_t getNumberOfRunningActionsInTargetByTag(const cocos2d::Node *target, int tag)
    size_t ret = (size_t)self->getNumberOfRunningActionsInTargetByTag(arg1, (int)arg2);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionManager_new(lua_State *L)
{
    olua_startinvoke(L);

    // ActionManager()
    cocos2d::ActionManager *ret = (cocos2d::ActionManager *)new cocos2d::ActionManager();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionManager");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionManager_pauseAllRunningActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");

    // Vector<cocos2d::Node *> pauseAllRunningActions()
    cocos2d::Vector<cocos2d::Node *> ret = (cocos2d::Vector<cocos2d::Node *>)self->pauseAllRunningActions();
    int num_ret = manual_olua_push_cocos2d_Vector(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionManager_pauseTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void pauseTarget(cocos2d::Node *target)
    self->pauseTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_removeAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");

    // void removeAction(cocos2d::Action *action)
    self->removeAction(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_removeActionByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */
    cocos2d::Node *arg2 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void removeActionByTag(int tag, cocos2d::Node *target)
    self->removeActionByTag((int)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_removeActionsByFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    lua_Unsigned arg1 = 0;       /** flags */
    cocos2d::Node *arg2 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_uint(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void removeActionsByFlags(unsigned int flags, cocos2d::Node *target)
    self->removeActionsByFlags((unsigned int)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_removeAllActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");

    // void removeAllActions()
    self->removeAllActions();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_removeAllActionsByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */
    cocos2d::Node *arg2 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void removeAllActionsByTag(int tag, cocos2d::Node *target)
    self->removeAllActionsByTag((int)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_removeAllActionsFromTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void removeAllActionsFromTarget(cocos2d::Node *target)
    self->removeAllActionsFromTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_resumeTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void resumeTarget(cocos2d::Node *target)
    self->resumeTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_resumeTargets(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Vector<cocos2d::Node *> arg1;       /** targetsToResume */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    manual_olua_check_cocos2d_Vector(L, 2, arg1, "cc.Node");

    // void resumeTargets(const Vector<cocos2d::Node *> &targetsToResume)
    self->resumeTargets(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionManager_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    lua_Number arg1 = 0;       /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_number(L, 2, &arg1);

    // void update(float dt)
    self->update((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ActionManager(lua_State *L)
{
    oluacls_class(L, "cc.ActionManager", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_ActionManager___move);
    oluacls_func(L, "addAction", _cocos2d_ActionManager_addAction);
    oluacls_func(L, "getActionByTag", _cocos2d_ActionManager_getActionByTag);
    oluacls_func(L, "getNumberOfRunningActions", _cocos2d_ActionManager_getNumberOfRunningActions);
    oluacls_func(L, "getNumberOfRunningActionsInTarget", _cocos2d_ActionManager_getNumberOfRunningActionsInTarget);
    oluacls_func(L, "getNumberOfRunningActionsInTargetByTag", _cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag);
    oluacls_func(L, "new", _cocos2d_ActionManager_new);
    oluacls_func(L, "pauseAllRunningActions", _cocos2d_ActionManager_pauseAllRunningActions);
    oluacls_func(L, "pauseTarget", _cocos2d_ActionManager_pauseTarget);
    oluacls_func(L, "removeAction", _cocos2d_ActionManager_removeAction);
    oluacls_func(L, "removeActionByTag", _cocos2d_ActionManager_removeActionByTag);
    oluacls_func(L, "removeActionsByFlags", _cocos2d_ActionManager_removeActionsByFlags);
    oluacls_func(L, "removeAllActions", _cocos2d_ActionManager_removeAllActions);
    oluacls_func(L, "removeAllActionsByTag", _cocos2d_ActionManager_removeAllActionsByTag);
    oluacls_func(L, "removeAllActionsFromTarget", _cocos2d_ActionManager_removeAllActionsFromTarget);
    oluacls_func(L, "resumeTarget", _cocos2d_ActionManager_resumeTarget);
    oluacls_func(L, "resumeTargets", _cocos2d_ActionManager_resumeTargets);
    oluacls_func(L, "update", _cocos2d_ActionManager_update);
    oluacls_prop(L, "numberOfRunningActions", _cocos2d_ActionManager_getNumberOfRunningActions, nullptr);

    olua_registerluatype<cocos2d::ActionManager>(L, "cc.ActionManager");

    return 1;
}

static int _cocos2d_Action___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Action *)olua_toobj(L, 1, "cc.Action");
    olua_push_cppobj(L, self, "cc.Action");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Action_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // cocos2d::Action *clone()
    cocos2d::Action *ret = (cocos2d::Action *)self->clone();
    int num_ret = olua_push_cppobj(L, ret, "cc.Action");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Action_description(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // std::string description()
    std::string ret = (std::string)self->description();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Action_getFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // unsigned int getFlags()
    unsigned int ret = (unsigned int)self->getFlags();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Action_getOriginalTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // cocos2d::Node *getOriginalTarget()
    cocos2d::Node *ret = (cocos2d::Node *)self->getOriginalTarget();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Action_getTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // int getTag()
    int ret = (int)self->getTag();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Action_getTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // cocos2d::Node *getTarget()
    cocos2d::Node *ret = (cocos2d::Node *)self->getTarget();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Action_isDone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // bool isDone()
    bool ret = (bool)self->isDone();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Action_new(lua_State *L)
{
    olua_startinvoke(L);

    // Action()
    cocos2d::Action *ret = (cocos2d::Action *)new cocos2d::Action();
    int num_ret = olua_push_cppobj(L, ret, "cc.Action");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Action_reverse(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // cocos2d::Action *reverse()
    cocos2d::Action *ret = (cocos2d::Action *)self->reverse();
    int num_ret = olua_push_cppobj(L, ret, "cc.Action");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Action_setFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;
    lua_Unsigned arg1 = 0;       /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_uint(L, 2, &arg1);

    // void setFlags(unsigned int flags)
    self->setFlags((unsigned int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Action_setOriginalTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** originalTarget */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setOriginalTarget(cocos2d::Node *originalTarget)
    self->setOriginalTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Action_setTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_int(L, 2, &arg1);

    // void setTag(int tag)
    self->setTag((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Action_setTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setTarget(cocos2d::Node *target)
    self->setTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Action_startWithTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void startWithTarget(cocos2d::Node *target)
    self->startWithTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Action_step(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;
    lua_Number arg1 = 0;       /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_number(L, 2, &arg1);

    // void step(float dt)
    self->step((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Action_stop(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // void stop()
    self->stop();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Action_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *self = nullptr;
    lua_Number arg1 = 0;       /** time */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_number(L, 2, &arg1);

    // void update(float time)
    self->update((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Action(lua_State *L)
{
    oluacls_class(L, "cc.Action", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Action___move);
    oluacls_func(L, "clone", _cocos2d_Action_clone);
    oluacls_func(L, "description", _cocos2d_Action_description);
    oluacls_func(L, "getFlags", _cocos2d_Action_getFlags);
    oluacls_func(L, "getOriginalTarget", _cocos2d_Action_getOriginalTarget);
    oluacls_func(L, "getTag", _cocos2d_Action_getTag);
    oluacls_func(L, "getTarget", _cocos2d_Action_getTarget);
    oluacls_func(L, "isDone", _cocos2d_Action_isDone);
    oluacls_func(L, "new", _cocos2d_Action_new);
    oluacls_func(L, "reverse", _cocos2d_Action_reverse);
    oluacls_func(L, "setFlags", _cocos2d_Action_setFlags);
    oluacls_func(L, "setOriginalTarget", _cocos2d_Action_setOriginalTarget);
    oluacls_func(L, "setTag", _cocos2d_Action_setTag);
    oluacls_func(L, "setTarget", _cocos2d_Action_setTarget);
    oluacls_func(L, "startWithTarget", _cocos2d_Action_startWithTarget);
    oluacls_func(L, "step", _cocos2d_Action_step);
    oluacls_func(L, "stop", _cocos2d_Action_stop);
    oluacls_func(L, "update", _cocos2d_Action_update);
    oluacls_prop(L, "done", _cocos2d_Action_isDone, nullptr);
    oluacls_prop(L, "flags", _cocos2d_Action_getFlags, _cocos2d_Action_setFlags);
    oluacls_prop(L, "originalTarget", _cocos2d_Action_getOriginalTarget, _cocos2d_Action_setOriginalTarget);
    oluacls_prop(L, "tag", _cocos2d_Action_getTag, _cocos2d_Action_setTag);
    oluacls_prop(L, "target", _cocos2d_Action_getTarget, _cocos2d_Action_setTarget);
    oluacls_const_integer(L, "INVALID_TAG", (lua_Integer)cocos2d::Action::INVALID_TAG);

    olua_registerluatype<cocos2d::Action>(L, "cc.Action");

    return 1;
}

static int _cocos2d_FiniteTimeAction___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FiniteTimeAction *)olua_toobj(L, 1, "cc.FiniteTimeAction");
    olua_push_cppobj(L, self, "cc.FiniteTimeAction");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FiniteTimeAction_getDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FiniteTimeAction *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FiniteTimeAction");

    // float getDuration()
    float ret = (float)self->getDuration();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FiniteTimeAction_new(lua_State *L)
{
    olua_startinvoke(L);

    // FiniteTimeAction()
    cocos2d::FiniteTimeAction *ret = (cocos2d::FiniteTimeAction *)new cocos2d::FiniteTimeAction();
    int num_ret = olua_push_cppobj(L, ret, "cc.FiniteTimeAction");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FiniteTimeAction_setDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FiniteTimeAction *self = nullptr;
    lua_Number arg1 = 0;       /** duration */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FiniteTimeAction");
    olua_check_number(L, 2, &arg1);

    // void setDuration(float duration)
    self->setDuration((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_FiniteTimeAction(lua_State *L)
{
    oluacls_class(L, "cc.FiniteTimeAction", "cc.Action");
    oluacls_func(L, "__move", _cocos2d_FiniteTimeAction___move);
    oluacls_func(L, "getDuration", _cocos2d_FiniteTimeAction_getDuration);
    oluacls_func(L, "new", _cocos2d_FiniteTimeAction_new);
    oluacls_func(L, "setDuration", _cocos2d_FiniteTimeAction_setDuration);
    oluacls_prop(L, "duration", _cocos2d_FiniteTimeAction_getDuration, _cocos2d_FiniteTimeAction_setDuration);

    olua_registerluatype<cocos2d::FiniteTimeAction>(L, "cc.FiniteTimeAction");

    return 1;
}

static int _cocos2d_Speed___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Speed *)olua_toobj(L, 1, "cc.Speed");
    olua_push_cppobj(L, self, "cc.Speed");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Speed_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** speed */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::Speed *create(@ref(single innerAction) cocos2d::ActionInterval *action, float speed)
    cocos2d::Speed *ret = (cocos2d::Speed *)cocos2d::Speed::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Speed");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Speed_getInnerAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Speed *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Speed");

    // @ref(single innerAction) cocos2d::ActionInterval *getInnerAction()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->getInnerAction();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    // inject code after call
    olua_singleref(L, 1, "innerAction", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Speed_getSpeed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Speed *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Speed");

    // float getSpeed()
    float ret = (float)self->getSpeed();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Speed_new(lua_State *L)
{
    olua_startinvoke(L);

    // Speed()
    cocos2d::Speed *ret = (cocos2d::Speed *)new cocos2d::Speed();
    int num_ret = olua_push_cppobj(L, ret, "cc.Speed");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Speed_setInnerAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Speed *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Speed");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // void setInnerAction(@ref(single innerAction) cocos2d::ActionInterval *action)
    self->setInnerAction(arg1);

    // inject code after call
    olua_singleref(L, 1, "innerAction", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Speed_setSpeed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Speed *self = nullptr;
    lua_Number arg1 = 0;       /** speed */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Speed");
    olua_check_number(L, 2, &arg1);

    // void setSpeed(float speed)
    self->setSpeed((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Speed(lua_State *L)
{
    oluacls_class(L, "cc.Speed", "cc.Action");
    oluacls_func(L, "__move", _cocos2d_Speed___move);
    oluacls_func(L, "create", _cocos2d_Speed_create);
    oluacls_func(L, "getInnerAction", _cocos2d_Speed_getInnerAction);
    oluacls_func(L, "getSpeed", _cocos2d_Speed_getSpeed);
    oluacls_func(L, "new", _cocos2d_Speed_new);
    oluacls_func(L, "setInnerAction", _cocos2d_Speed_setInnerAction);
    oluacls_func(L, "setSpeed", _cocos2d_Speed_setSpeed);
    oluacls_prop(L, "innerAction", _cocos2d_Speed_getInnerAction, _cocos2d_Speed_setInnerAction);
    oluacls_prop(L, "speed", _cocos2d_Speed_getSpeed, _cocos2d_Speed_setSpeed);

    olua_registerluatype<cocos2d::Speed>(L, "cc.Speed");

    return 1;
}

static int _cocos2d_Follow___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Follow *)olua_toobj(L, 1, "cc.Follow");
    olua_push_cppobj(L, self, "cc.Follow");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Follow_create1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** followedNode */
    cocos2d::Rect arg2;       /** rect */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Node");
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);

    // static cocos2d::Follow *create(cocos2d::Node *followedNode, @optional const cocos2d::Rect &rect)
    cocos2d::Follow *ret = (cocos2d::Follow *)cocos2d::Follow::create(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Follow");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** followedNode */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Node");

    // static cocos2d::Follow *create(cocos2d::Node *followedNode, @optional const cocos2d::Rect &rect)
    cocos2d::Follow *ret = (cocos2d::Follow *)cocos2d::Follow::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Follow");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 1, "cc.Node"))) {
            // static cocos2d::Follow *create(cocos2d::Node *followedNode, @optional const cocos2d::Rect &rect)
            return _cocos2d_Follow_create2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 1, "cc.Node")) && (manual_olua_is_cocos2d_Rect(L, 2))) {
            // static cocos2d::Follow *create(cocos2d::Node *followedNode, @optional const cocos2d::Rect &rect)
            return _cocos2d_Follow_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Follow::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Follow_createWithOffset1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** followedNode */
    lua_Number arg2 = 0;       /** xOffset */
    lua_Number arg3 = 0;       /** yOffset */
    cocos2d::Rect arg4;       /** rect */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Node");
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    manual_olua_check_cocos2d_Rect(L, 4, &arg4);

    // static cocos2d::Follow *createWithOffset(cocos2d::Node *followedNode, float xOffset, float yOffset, @optional const cocos2d::Rect &rect)
    cocos2d::Follow *ret = (cocos2d::Follow *)cocos2d::Follow::createWithOffset(arg1, (float)arg2, (float)arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Follow");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_createWithOffset2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** followedNode */
    lua_Number arg2 = 0;       /** xOffset */
    lua_Number arg3 = 0;       /** yOffset */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Node");
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::Follow *createWithOffset(cocos2d::Node *followedNode, float xOffset, float yOffset, @optional const cocos2d::Rect &rect)
    cocos2d::Follow *ret = (cocos2d::Follow *)cocos2d::Follow::createWithOffset(arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.Follow");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_createWithOffset(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_cppobj(L, 1, "cc.Node")) && (olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::Follow *createWithOffset(cocos2d::Node *followedNode, float xOffset, float yOffset, @optional const cocos2d::Rect &rect)
            return _cocos2d_Follow_createWithOffset2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_cppobj(L, 1, "cc.Node")) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (manual_olua_is_cocos2d_Rect(L, 4))) {
            // static cocos2d::Follow *createWithOffset(cocos2d::Node *followedNode, float xOffset, float yOffset, @optional const cocos2d::Rect &rect)
            return _cocos2d_Follow_createWithOffset1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Follow::createWithOffset' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Follow_initWithTarget1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Follow *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** followedNode */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Follow");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);

    // bool initWithTarget(cocos2d::Node *followedNode, @optional const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithTarget(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_initWithTarget2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Follow *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** followedNode */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Follow");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // bool initWithTarget(cocos2d::Node *followedNode, @optional const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithTarget(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_initWithTarget(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // bool initWithTarget(cocos2d::Node *followedNode, @optional const cocos2d::Rect &rect)
            return _cocos2d_Follow_initWithTarget2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (manual_olua_is_cocos2d_Rect(L, 3))) {
            // bool initWithTarget(cocos2d::Node *followedNode, @optional const cocos2d::Rect &rect)
            return _cocos2d_Follow_initWithTarget1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Follow::initWithTarget' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Follow_initWithTargetAndOffset1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Follow *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** followedNode */
    lua_Number arg2 = 0;       /** xOffset */
    lua_Number arg3 = 0;       /** yOffset */
    cocos2d::Rect arg4;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Follow");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    manual_olua_check_cocos2d_Rect(L, 5, &arg4);

    // bool initWithTargetAndOffset(cocos2d::Node *followedNode, float xOffset, float yOffset, @optional const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithTargetAndOffset(arg1, (float)arg2, (float)arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_initWithTargetAndOffset2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Follow *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** followedNode */
    lua_Number arg2 = 0;       /** xOffset */
    lua_Number arg3 = 0;       /** yOffset */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Follow");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool initWithTargetAndOffset(cocos2d::Node *followedNode, float xOffset, float yOffset, @optional const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithTargetAndOffset(arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_initWithTargetAndOffset(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 3) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_number(L, 3)) && (olua_is_number(L, 4))) {
            // bool initWithTargetAndOffset(cocos2d::Node *followedNode, float xOffset, float yOffset, @optional const cocos2d::Rect &rect)
            return _cocos2d_Follow_initWithTargetAndOffset2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (manual_olua_is_cocos2d_Rect(L, 5))) {
            // bool initWithTargetAndOffset(cocos2d::Node *followedNode, float xOffset, float yOffset, @optional const cocos2d::Rect &rect)
            return _cocos2d_Follow_initWithTargetAndOffset1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Follow::initWithTargetAndOffset' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Follow_isBoundarySet(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Follow *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Follow");

    // bool isBoundarySet()
    bool ret = (bool)self->isBoundarySet();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_new(lua_State *L)
{
    olua_startinvoke(L);

    // Follow()
    cocos2d::Follow *ret = (cocos2d::Follow *)new cocos2d::Follow();
    int num_ret = olua_push_cppobj(L, ret, "cc.Follow");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Follow_setBoundarySet(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Follow *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Follow");
    olua_check_bool(L, 2, &arg1);

    // void setBoundarySet(bool value)
    self->setBoundarySet(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Follow(lua_State *L)
{
    oluacls_class(L, "cc.Follow", "cc.Action");
    oluacls_func(L, "__move", _cocos2d_Follow___move);
    oluacls_func(L, "create", _cocos2d_Follow_create);
    oluacls_func(L, "createWithOffset", _cocos2d_Follow_createWithOffset);
    oluacls_func(L, "initWithTarget", _cocos2d_Follow_initWithTarget);
    oluacls_func(L, "initWithTargetAndOffset", _cocos2d_Follow_initWithTargetAndOffset);
    oluacls_func(L, "isBoundarySet", _cocos2d_Follow_isBoundarySet);
    oluacls_func(L, "new", _cocos2d_Follow_new);
    oluacls_func(L, "setBoundarySet", _cocos2d_Follow_setBoundarySet);
    oluacls_prop(L, "boundarySet", _cocos2d_Follow_isBoundarySet, _cocos2d_Follow_setBoundarySet);

    olua_registerluatype<cocos2d::Follow>(L, "cc.Follow");

    return 1;
}

static int _cocos2d_tweenfunc_backEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float backEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::backEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_backEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float backEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::backEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_backEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float backEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::backEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_bezieratFunction(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** a */
    lua_Number arg2 = 0;       /** b */
    lua_Number arg3 = 0;       /** c */
    lua_Number arg4 = 0;       /** d */
    lua_Number arg5 = 0;       /** t */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);

    // static float bezieratFunction(float a, float b, float c, float d, float t)
    float ret = (float)cocos2d::tweenfunc::bezieratFunction((float)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_bounceEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float bounceEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::bounceEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_bounceEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float bounceEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::bounceEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_bounceEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float bounceEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::bounceEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_circEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float circEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::circEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_circEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float circEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::circEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_circEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float circEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::circEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_cubicEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float cubicEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::cubicEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_cubicEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float cubicEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::cubicEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_cubicEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float cubicEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::cubicEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_easeIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */
    lua_Number arg2 = 0;       /** rate */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float easeIn(float time, float rate)
    float ret = (float)cocos2d::tweenfunc::easeIn((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_easeInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */
    lua_Number arg2 = 0;       /** rate */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float easeInOut(float time, float rate)
    float ret = (float)cocos2d::tweenfunc::easeInOut((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_easeOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */
    lua_Number arg2 = 0;       /** rate */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float easeOut(float time, float rate)
    float ret = (float)cocos2d::tweenfunc::easeOut((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_elasticEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */
    lua_Number arg2 = 0;       /** period */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float elasticEaseIn(float time, float period)
    float ret = (float)cocos2d::tweenfunc::elasticEaseIn((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_elasticEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */
    lua_Number arg2 = 0;       /** period */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float elasticEaseInOut(float time, float period)
    float ret = (float)cocos2d::tweenfunc::elasticEaseInOut((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_elasticEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */
    lua_Number arg2 = 0;       /** period */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float elasticEaseOut(float time, float period)
    float ret = (float)cocos2d::tweenfunc::elasticEaseOut((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_expoEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float expoEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::expoEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_expoEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float expoEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::expoEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_expoEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float expoEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::expoEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_linear(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float linear(float time)
    float ret = (float)cocos2d::tweenfunc::linear((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::quadEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::quadEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::quadEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadraticIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadraticIn(float time)
    float ret = (float)cocos2d::tweenfunc::quadraticIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadraticInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadraticInOut(float time)
    float ret = (float)cocos2d::tweenfunc::quadraticInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadraticOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadraticOut(float time)
    float ret = (float)cocos2d::tweenfunc::quadraticOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quartEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quartEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::quartEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quartEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quartEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::quartEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quartEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quartEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::quartEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quintEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quintEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::quintEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quintEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quintEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::quintEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_quintEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float quintEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::quintEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_sineEaseIn(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float sineEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::sineEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_sineEaseInOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float sineEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::sineEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_tweenfunc_sineEaseOut(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** time */

    olua_check_number(L, 1, &arg1);

    // static float sineEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::sineEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_tweenfunc(lua_State *L)
{
    oluacls_class(L, "cc.tweenfunc", nullptr);
    oluacls_func(L, "backEaseIn", _cocos2d_tweenfunc_backEaseIn);
    oluacls_func(L, "backEaseInOut", _cocos2d_tweenfunc_backEaseInOut);
    oluacls_func(L, "backEaseOut", _cocos2d_tweenfunc_backEaseOut);
    oluacls_func(L, "bezieratFunction", _cocos2d_tweenfunc_bezieratFunction);
    oluacls_func(L, "bounceEaseIn", _cocos2d_tweenfunc_bounceEaseIn);
    oluacls_func(L, "bounceEaseInOut", _cocos2d_tweenfunc_bounceEaseInOut);
    oluacls_func(L, "bounceEaseOut", _cocos2d_tweenfunc_bounceEaseOut);
    oluacls_func(L, "circEaseIn", _cocos2d_tweenfunc_circEaseIn);
    oluacls_func(L, "circEaseInOut", _cocos2d_tweenfunc_circEaseInOut);
    oluacls_func(L, "circEaseOut", _cocos2d_tweenfunc_circEaseOut);
    oluacls_func(L, "cubicEaseIn", _cocos2d_tweenfunc_cubicEaseIn);
    oluacls_func(L, "cubicEaseInOut", _cocos2d_tweenfunc_cubicEaseInOut);
    oluacls_func(L, "cubicEaseOut", _cocos2d_tweenfunc_cubicEaseOut);
    oluacls_func(L, "easeIn", _cocos2d_tweenfunc_easeIn);
    oluacls_func(L, "easeInOut", _cocos2d_tweenfunc_easeInOut);
    oluacls_func(L, "easeOut", _cocos2d_tweenfunc_easeOut);
    oluacls_func(L, "elasticEaseIn", _cocos2d_tweenfunc_elasticEaseIn);
    oluacls_func(L, "elasticEaseInOut", _cocos2d_tweenfunc_elasticEaseInOut);
    oluacls_func(L, "elasticEaseOut", _cocos2d_tweenfunc_elasticEaseOut);
    oluacls_func(L, "expoEaseIn", _cocos2d_tweenfunc_expoEaseIn);
    oluacls_func(L, "expoEaseInOut", _cocos2d_tweenfunc_expoEaseInOut);
    oluacls_func(L, "expoEaseOut", _cocos2d_tweenfunc_expoEaseOut);
    oluacls_func(L, "linear", _cocos2d_tweenfunc_linear);
    oluacls_func(L, "quadEaseIn", _cocos2d_tweenfunc_quadEaseIn);
    oluacls_func(L, "quadEaseInOut", _cocos2d_tweenfunc_quadEaseInOut);
    oluacls_func(L, "quadEaseOut", _cocos2d_tweenfunc_quadEaseOut);
    oluacls_func(L, "quadraticIn", _cocos2d_tweenfunc_quadraticIn);
    oluacls_func(L, "quadraticInOut", _cocos2d_tweenfunc_quadraticInOut);
    oluacls_func(L, "quadraticOut", _cocos2d_tweenfunc_quadraticOut);
    oluacls_func(L, "quartEaseIn", _cocos2d_tweenfunc_quartEaseIn);
    oluacls_func(L, "quartEaseInOut", _cocos2d_tweenfunc_quartEaseInOut);
    oluacls_func(L, "quartEaseOut", _cocos2d_tweenfunc_quartEaseOut);
    oluacls_func(L, "quintEaseIn", _cocos2d_tweenfunc_quintEaseIn);
    oluacls_func(L, "quintEaseInOut", _cocos2d_tweenfunc_quintEaseInOut);
    oluacls_func(L, "quintEaseOut", _cocos2d_tweenfunc_quintEaseOut);
    oluacls_func(L, "sineEaseIn", _cocos2d_tweenfunc_sineEaseIn);
    oluacls_func(L, "sineEaseInOut", _cocos2d_tweenfunc_sineEaseInOut);
    oluacls_func(L, "sineEaseOut", _cocos2d_tweenfunc_sineEaseOut);

    return 1;
}

static int _cocos2d_ActionInterval___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ActionInterval *)olua_toobj(L, 1, "cc.ActionInterval");
    olua_push_cppobj(L, self, "cc.ActionInterval");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ActionInterval_getAmplitudeRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionInterval");

    // float getAmplitudeRate()
    float ret = (float)self->getAmplitudeRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionInterval_getElapsed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionInterval");

    // float getElapsed()
    float ret = (float)self->getElapsed();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionInterval_setAmplitudeRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *self = nullptr;
    lua_Number arg1 = 0;       /** amp */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionInterval");
    olua_check_number(L, 2, &arg1);

    // void setAmplitudeRate(float amp)
    self->setAmplitudeRate((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ActionInterval(lua_State *L)
{
    oluacls_class(L, "cc.ActionInterval", "cc.FiniteTimeAction");
    oluacls_func(L, "__move", _cocos2d_ActionInterval___move);
    oluacls_func(L, "getAmplitudeRate", _cocos2d_ActionInterval_getAmplitudeRate);
    oluacls_func(L, "getElapsed", _cocos2d_ActionInterval_getElapsed);
    oluacls_func(L, "setAmplitudeRate", _cocos2d_ActionInterval_setAmplitudeRate);
    oluacls_prop(L, "amplitudeRate", _cocos2d_ActionInterval_getAmplitudeRate, _cocos2d_ActionInterval_setAmplitudeRate);
    oluacls_prop(L, "elapsed", _cocos2d_ActionInterval_getElapsed, nullptr);

    olua_registerluatype<cocos2d::ActionInterval>(L, "cc.ActionInterval");

    return 1;
}

static int _cocos2d_Sequence___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Sequence *)olua_toobj(L, 1, "cc.Sequence");
    olua_push_cppobj(L, self, "cc.Sequence");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Sequence_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::FiniteTimeAction *> actions;
    int n = lua_gettop(L);
    actions.reserve(n);

    auto ret = new cocos2d::Sequence();
    ret->autorelease();
    olua_push_cppobj<cocos2d::Sequence>(L, ret);

    for (int i = 1; i <= n; i++) {
        auto obj = olua_checkobj<cocos2d::FiniteTimeAction>(L, i);
        actions.pushBack(obj);
        olua_mapref(L, -1, ".autoref", i);
    }

    ret->init(actions);

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Sequence_createWithTwoActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FiniteTimeAction *arg1 = nullptr;       /** actionOne */
    cocos2d::FiniteTimeAction *arg2 = nullptr;       /** actionTwo */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FiniteTimeAction");
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.FiniteTimeAction");

    // static cocos2d::Sequence *createWithTwoActions(@ref(map autoref) cocos2d::FiniteTimeAction *actionOne, @ref(map autoref) cocos2d::FiniteTimeAction *actionTwo)
    cocos2d::Sequence *ret = (cocos2d::Sequence *)cocos2d::Sequence::createWithTwoActions(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Sequence");

    // inject code after call
    olua_mapref(L, -1, "autoref", 1);
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sequence_new(lua_State *L)
{
    olua_startinvoke(L);

    // Sequence()
    cocos2d::Sequence *ret = (cocos2d::Sequence *)new cocos2d::Sequence();
    int num_ret = olua_push_cppobj(L, ret, "cc.Sequence");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Sequence(lua_State *L)
{
    oluacls_class(L, "cc.Sequence", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_Sequence___move);
    oluacls_func(L, "create", _cocos2d_Sequence_create);
    oluacls_func(L, "createWithTwoActions", _cocos2d_Sequence_createWithTwoActions);
    oluacls_func(L, "new", _cocos2d_Sequence_new);

    olua_registerluatype<cocos2d::Sequence>(L, "cc.Sequence");

    return 1;
}

static int _cocos2d_Repeat___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Repeat *)olua_toobj(L, 1, "cc.Repeat");
    olua_push_cppobj(L, self, "cc.Repeat");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Repeat_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FiniteTimeAction *arg1 = nullptr;       /** action */
    lua_Unsigned arg2 = 0;       /** times */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FiniteTimeAction");
    olua_check_uint(L, 2, &arg2);

    // static cocos2d::Repeat *create(@ref(single innerAction) cocos2d::FiniteTimeAction *action, unsigned int times)
    cocos2d::Repeat *ret = (cocos2d::Repeat *)cocos2d::Repeat::create(arg1, (unsigned int)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Repeat");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Repeat_getInnerAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Repeat *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Repeat");

    // @ref(single innerAction) cocos2d::FiniteTimeAction *getInnerAction()
    cocos2d::FiniteTimeAction *ret = (cocos2d::FiniteTimeAction *)self->getInnerAction();
    int num_ret = olua_push_cppobj(L, ret, "cc.FiniteTimeAction");

    // inject code after call
    olua_singleref(L, 1, "innerAction", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Repeat_new(lua_State *L)
{
    olua_startinvoke(L);

    // Repeat()
    cocos2d::Repeat *ret = (cocos2d::Repeat *)new cocos2d::Repeat();
    int num_ret = olua_push_cppobj(L, ret, "cc.Repeat");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Repeat_setInnerAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Repeat *self = nullptr;
    cocos2d::FiniteTimeAction *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Repeat");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.FiniteTimeAction");

    // void setInnerAction(@ref(single innerAction) cocos2d::FiniteTimeAction *action)
    self->setInnerAction(arg1);

    // inject code after call
    olua_singleref(L, 1, "innerAction", 2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Repeat(lua_State *L)
{
    oluacls_class(L, "cc.Repeat", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_Repeat___move);
    oluacls_func(L, "create", _cocos2d_Repeat_create);
    oluacls_func(L, "getInnerAction", _cocos2d_Repeat_getInnerAction);
    oluacls_func(L, "new", _cocos2d_Repeat_new);
    oluacls_func(L, "setInnerAction", _cocos2d_Repeat_setInnerAction);
    oluacls_prop(L, "innerAction", _cocos2d_Repeat_getInnerAction, _cocos2d_Repeat_setInnerAction);

    olua_registerluatype<cocos2d::Repeat>(L, "cc.Repeat");

    return 1;
}

static int _cocos2d_RepeatForever___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::RepeatForever *)olua_toobj(L, 1, "cc.RepeatForever");
    olua_push_cppobj(L, self, "cc.RepeatForever");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_RepeatForever_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::RepeatForever *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::RepeatForever *ret = (cocos2d::RepeatForever *)cocos2d::RepeatForever::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.RepeatForever");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RepeatForever_getInnerAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RepeatForever *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RepeatForever");

    // @ref(single innerAction) cocos2d::ActionInterval *getInnerAction()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->getInnerAction();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    // inject code after call
    olua_singleref(L, 1, "innerAction", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RepeatForever_new(lua_State *L)
{
    olua_startinvoke(L);

    // RepeatForever()
    cocos2d::RepeatForever *ret = (cocos2d::RepeatForever *)new cocos2d::RepeatForever();
    int num_ret = olua_push_cppobj(L, ret, "cc.RepeatForever");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RepeatForever_setInnerAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RepeatForever *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RepeatForever");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // void setInnerAction(@ref(single innerAction) cocos2d::ActionInterval *action)
    self->setInnerAction(arg1);

    // inject code after call
    olua_singleref(L, 1, "innerAction", 2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_RepeatForever(lua_State *L)
{
    oluacls_class(L, "cc.RepeatForever", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_RepeatForever___move);
    oluacls_func(L, "create", _cocos2d_RepeatForever_create);
    oluacls_func(L, "getInnerAction", _cocos2d_RepeatForever_getInnerAction);
    oluacls_func(L, "new", _cocos2d_RepeatForever_new);
    oluacls_func(L, "setInnerAction", _cocos2d_RepeatForever_setInnerAction);
    oluacls_prop(L, "innerAction", _cocos2d_RepeatForever_getInnerAction, _cocos2d_RepeatForever_setInnerAction);

    olua_registerluatype<cocos2d::RepeatForever>(L, "cc.RepeatForever");

    return 1;
}

static int _cocos2d_Spawn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Spawn *)olua_toobj(L, 1, "cc.Spawn");
    olua_push_cppobj(L, self, "cc.Spawn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Spawn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::FiniteTimeAction *> actions;
    int n = lua_gettop(L);
    actions.reserve(n);

    auto ret = new cocos2d::Spawn();
    ret->autorelease();
    olua_push_cppobj<cocos2d::Spawn>(L, ret);

    for (int i = 1; i <= n; i++) {
        auto obj = olua_checkobj<cocos2d::FiniteTimeAction>(L, i);
        actions.pushBack(obj);
        olua_mapref(L, -1, ".autoref", i);
    }

    ret->init(actions);

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Spawn_createWithTwoActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FiniteTimeAction *arg1 = nullptr;       /** action1 */
    cocos2d::FiniteTimeAction *arg2 = nullptr;       /** action2 */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FiniteTimeAction");
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.FiniteTimeAction");

    // static cocos2d::Spawn *createWithTwoActions(@ref(map autoref) cocos2d::FiniteTimeAction *action1, @ref(map autoref) cocos2d::FiniteTimeAction *action2)
    cocos2d::Spawn *ret = (cocos2d::Spawn *)cocos2d::Spawn::createWithTwoActions(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Spawn");

    // inject code after call
    olua_mapref(L, -1, "autoref", 1);
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Spawn_new(lua_State *L)
{
    olua_startinvoke(L);

    // Spawn()
    cocos2d::Spawn *ret = (cocos2d::Spawn *)new cocos2d::Spawn();
    int num_ret = olua_push_cppobj(L, ret, "cc.Spawn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Spawn(lua_State *L)
{
    oluacls_class(L, "cc.Spawn", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_Spawn___move);
    oluacls_func(L, "create", _cocos2d_Spawn_create);
    oluacls_func(L, "createWithTwoActions", _cocos2d_Spawn_createWithTwoActions);
    oluacls_func(L, "new", _cocos2d_Spawn_new);

    olua_registerluatype<cocos2d::Spawn>(L, "cc.Spawn");

    return 1;
}

static int _cocos2d_RotateTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::RotateTo *)olua_toobj(L, 1, "cc.RotateTo");
    olua_push_cppobj(L, self, "cc.RotateTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_RotateTo_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** dstAngleX */
    lua_Number arg3 = 0;       /** dstAngleY */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::RotateTo *create(float duration, float dstAngleX, float dstAngleY)
    cocos2d::RotateTo *ret = (cocos2d::RotateTo *)cocos2d::RotateTo::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.RotateTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RotateTo_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** dstAngle */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::RotateTo *create(float duration, float dstAngle)
    cocos2d::RotateTo *ret = (cocos2d::RotateTo *)cocos2d::RotateTo::create((float)arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.RotateTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RotateTo_create3(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec3 arg2;       /** dstAngle3D */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 2, &arg2);

    // static cocos2d::RotateTo *create(float duration, const cocos2d::Vec3 &dstAngle3D)
    cocos2d::RotateTo *ret = (cocos2d::RotateTo *)cocos2d::RotateTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.RotateTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RotateTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Vec3(L, 2))) {
            // static cocos2d::RotateTo *create(float duration, const cocos2d::Vec3 &dstAngle3D)
            return _cocos2d_RotateTo_create3(L);
        }

        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2))) {
            // static cocos2d::RotateTo *create(float duration, float dstAngle)
            return _cocos2d_RotateTo_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::RotateTo *create(float duration, float dstAngleX, float dstAngleY)
            return _cocos2d_RotateTo_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RotateTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_RotateTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // RotateTo()
    cocos2d::RotateTo *ret = (cocos2d::RotateTo *)new cocos2d::RotateTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.RotateTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_RotateTo(lua_State *L)
{
    oluacls_class(L, "cc.RotateTo", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_RotateTo___move);
    oluacls_func(L, "create", _cocos2d_RotateTo_create);
    oluacls_func(L, "new", _cocos2d_RotateTo_new);

    olua_registerluatype<cocos2d::RotateTo>(L, "cc.RotateTo");

    return 1;
}

static int _cocos2d_RotateBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::RotateBy *)olua_toobj(L, 1, "cc.RotateBy");
    olua_push_cppobj(L, self, "cc.RotateBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_RotateBy_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** deltaAngle */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::RotateBy *create(float duration, float deltaAngle)
    cocos2d::RotateBy *ret = (cocos2d::RotateBy *)cocos2d::RotateBy::create((float)arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.RotateBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RotateBy_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** deltaAngleZ_X */
    lua_Number arg3 = 0;       /** deltaAngleZ_Y */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::RotateBy *create(float duration, float deltaAngleZ_X, float deltaAngleZ_Y)
    cocos2d::RotateBy *ret = (cocos2d::RotateBy *)cocos2d::RotateBy::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.RotateBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RotateBy_create3(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec3 arg2;       /** deltaAngle3D */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 2, &arg2);

    // static cocos2d::RotateBy *create(float duration, const cocos2d::Vec3 &deltaAngle3D)
    cocos2d::RotateBy *ret = (cocos2d::RotateBy *)cocos2d::RotateBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.RotateBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RotateBy_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Vec3(L, 2))) {
            // static cocos2d::RotateBy *create(float duration, const cocos2d::Vec3 &deltaAngle3D)
            return _cocos2d_RotateBy_create3(L);
        }

        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2))) {
            // static cocos2d::RotateBy *create(float duration, float deltaAngle)
            return _cocos2d_RotateBy_create1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::RotateBy *create(float duration, float deltaAngleZ_X, float deltaAngleZ_Y)
            return _cocos2d_RotateBy_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RotateBy::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_RotateBy_new(lua_State *L)
{
    olua_startinvoke(L);

    // RotateBy()
    cocos2d::RotateBy *ret = (cocos2d::RotateBy *)new cocos2d::RotateBy();
    int num_ret = olua_push_cppobj(L, ret, "cc.RotateBy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_RotateBy(lua_State *L)
{
    oluacls_class(L, "cc.RotateBy", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_RotateBy___move);
    oluacls_func(L, "create", _cocos2d_RotateBy_create);
    oluacls_func(L, "new", _cocos2d_RotateBy_new);

    olua_registerluatype<cocos2d::RotateBy>(L, "cc.RotateBy");

    return 1;
}

static int _cocos2d_MoveBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::MoveBy *)olua_toobj(L, 1, "cc.MoveBy");
    olua_push_cppobj(L, self, "cc.MoveBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_MoveBy_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec2 arg2;       /** deltaPosition */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 2, &arg2);

    // static cocos2d::MoveBy *create(float duration, const cocos2d::Vec2 &deltaPosition)
    cocos2d::MoveBy *ret = (cocos2d::MoveBy *)cocos2d::MoveBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_MoveBy_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec2 arg2;       /** deltaPosition */

    olua_check_number(L, 1, &arg1);
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg2);

    // static cocos2d::MoveBy *create(float duration, @pack const cocos2d::Vec2 &deltaPosition)
    cocos2d::MoveBy *ret = (cocos2d::MoveBy *)cocos2d::MoveBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_MoveBy_create3(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec3 arg2;       /** deltaPosition */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 2, &arg2);

    // static cocos2d::MoveBy *create(float duration, const cocos2d::Vec3 &deltaPosition)
    cocos2d::MoveBy *ret = (cocos2d::MoveBy *)cocos2d::MoveBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_MoveBy_create4(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec3 arg2;       /** deltaPosition */

    olua_check_number(L, 1, &arg1);
    auto_olua_pack_cocos2d_Vec3(L, 2, &arg2);

    // static cocos2d::MoveBy *create(float duration, @pack const cocos2d::Vec3 &deltaPosition)
    cocos2d::MoveBy *ret = (cocos2d::MoveBy *)cocos2d::MoveBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_MoveBy_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Vec3(L, 2))) {
            // static cocos2d::MoveBy *create(float duration, const cocos2d::Vec3 &deltaPosition)
            return _cocos2d_MoveBy_create3(L);
        }

        // if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Vec2(L, 2))) {
            // static cocos2d::MoveBy *create(float duration, const cocos2d::Vec2 &deltaPosition)
            return _cocos2d_MoveBy_create1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (auto_olua_ispack_cocos2d_Vec2(L, 2))) {
            // static cocos2d::MoveBy *create(float duration, @pack const cocos2d::Vec2 &deltaPosition)
            return _cocos2d_MoveBy_create2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_number(L, 1)) && (auto_olua_ispack_cocos2d_Vec3(L, 2))) {
            // static cocos2d::MoveBy *create(float duration, @pack const cocos2d::Vec3 &deltaPosition)
            return _cocos2d_MoveBy_create4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::MoveBy::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_MoveBy_new(lua_State *L)
{
    olua_startinvoke(L);

    // MoveBy()
    cocos2d::MoveBy *ret = (cocos2d::MoveBy *)new cocos2d::MoveBy();
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveBy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_MoveBy(lua_State *L)
{
    oluacls_class(L, "cc.MoveBy", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_MoveBy___move);
    oluacls_func(L, "create", _cocos2d_MoveBy_create);
    oluacls_func(L, "new", _cocos2d_MoveBy_new);

    olua_registerluatype<cocos2d::MoveBy>(L, "cc.MoveBy");

    return 1;
}

static int _cocos2d_MoveTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::MoveTo *)olua_toobj(L, 1, "cc.MoveTo");
    olua_push_cppobj(L, self, "cc.MoveTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_MoveTo_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec2 arg2;       /** position */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 2, &arg2);

    // static cocos2d::MoveTo *create(float duration, const cocos2d::Vec2 &position)
    cocos2d::MoveTo *ret = (cocos2d::MoveTo *)cocos2d::MoveTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_MoveTo_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec2 arg2;       /** position */

    olua_check_number(L, 1, &arg1);
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg2);

    // static cocos2d::MoveTo *create(float duration, @pack const cocos2d::Vec2 &position)
    cocos2d::MoveTo *ret = (cocos2d::MoveTo *)cocos2d::MoveTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_MoveTo_create3(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec3 arg2;       /** position */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 2, &arg2);

    // static cocos2d::MoveTo *create(float duration, const cocos2d::Vec3 &position)
    cocos2d::MoveTo *ret = (cocos2d::MoveTo *)cocos2d::MoveTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_MoveTo_create4(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec3 arg2;       /** position */

    olua_check_number(L, 1, &arg1);
    auto_olua_pack_cocos2d_Vec3(L, 2, &arg2);

    // static cocos2d::MoveTo *create(float duration, @pack const cocos2d::Vec3 &position)
    cocos2d::MoveTo *ret = (cocos2d::MoveTo *)cocos2d::MoveTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_MoveTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Vec3(L, 2))) {
            // static cocos2d::MoveTo *create(float duration, const cocos2d::Vec3 &position)
            return _cocos2d_MoveTo_create3(L);
        }

        // if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Vec2(L, 2))) {
            // static cocos2d::MoveTo *create(float duration, const cocos2d::Vec2 &position)
            return _cocos2d_MoveTo_create1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (auto_olua_ispack_cocos2d_Vec2(L, 2))) {
            // static cocos2d::MoveTo *create(float duration, @pack const cocos2d::Vec2 &position)
            return _cocos2d_MoveTo_create2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_number(L, 1)) && (auto_olua_ispack_cocos2d_Vec3(L, 2))) {
            // static cocos2d::MoveTo *create(float duration, @pack const cocos2d::Vec3 &position)
            return _cocos2d_MoveTo_create4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::MoveTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_MoveTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // MoveTo()
    cocos2d::MoveTo *ret = (cocos2d::MoveTo *)new cocos2d::MoveTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.MoveTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_MoveTo(lua_State *L)
{
    oluacls_class(L, "cc.MoveTo", "cc.MoveBy");
    oluacls_func(L, "__move", _cocos2d_MoveTo___move);
    oluacls_func(L, "create", _cocos2d_MoveTo_create);
    oluacls_func(L, "new", _cocos2d_MoveTo_new);

    olua_registerluatype<cocos2d::MoveTo>(L, "cc.MoveTo");

    return 1;
}

static int _cocos2d_SkewTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::SkewTo *)olua_toobj(L, 1, "cc.SkewTo");
    olua_push_cppobj(L, self, "cc.SkewTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_SkewTo_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    lua_Number arg2 = 0;       /** sx */
    lua_Number arg3 = 0;       /** sy */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::SkewTo *create(float t, float sx, float sy)
    cocos2d::SkewTo *ret = (cocos2d::SkewTo *)cocos2d::SkewTo::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.SkewTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SkewTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // SkewTo()
    cocos2d::SkewTo *ret = (cocos2d::SkewTo *)new cocos2d::SkewTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.SkewTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_SkewTo(lua_State *L)
{
    oluacls_class(L, "cc.SkewTo", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_SkewTo___move);
    oluacls_func(L, "create", _cocos2d_SkewTo_create);
    oluacls_func(L, "new", _cocos2d_SkewTo_new);

    olua_registerluatype<cocos2d::SkewTo>(L, "cc.SkewTo");

    return 1;
}

static int _cocos2d_SkewBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::SkewBy *)olua_toobj(L, 1, "cc.SkewBy");
    olua_push_cppobj(L, self, "cc.SkewBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_SkewBy_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    lua_Number arg2 = 0;       /** deltaSkewX */
    lua_Number arg3 = 0;       /** deltaSkewY */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::SkewBy *create(float t, float deltaSkewX, float deltaSkewY)
    cocos2d::SkewBy *ret = (cocos2d::SkewBy *)cocos2d::SkewBy::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.SkewBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SkewBy_new(lua_State *L)
{
    olua_startinvoke(L);

    // SkewBy()
    cocos2d::SkewBy *ret = (cocos2d::SkewBy *)new cocos2d::SkewBy();
    int num_ret = olua_push_cppobj(L, ret, "cc.SkewBy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_SkewBy(lua_State *L)
{
    oluacls_class(L, "cc.SkewBy", "cc.SkewTo");
    oluacls_func(L, "__move", _cocos2d_SkewBy___move);
    oluacls_func(L, "create", _cocos2d_SkewBy_create);
    oluacls_func(L, "new", _cocos2d_SkewBy_new);

    olua_registerluatype<cocos2d::SkewBy>(L, "cc.SkewBy");

    return 1;
}

static int _cocos2d_ResizeTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ResizeTo *)olua_toobj(L, 1, "cc.ResizeTo");
    olua_push_cppobj(L, self, "cc.ResizeTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ResizeTo_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** final_size */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);

    // static cocos2d::ResizeTo *create(float duration, const cocos2d::Size &final_size)
    cocos2d::ResizeTo *ret = (cocos2d::ResizeTo *)cocos2d::ResizeTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.ResizeTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ResizeTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // ResizeTo()
    cocos2d::ResizeTo *ret = (cocos2d::ResizeTo *)new cocos2d::ResizeTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.ResizeTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ResizeTo(lua_State *L)
{
    oluacls_class(L, "cc.ResizeTo", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_ResizeTo___move);
    oluacls_func(L, "create", _cocos2d_ResizeTo_create);
    oluacls_func(L, "new", _cocos2d_ResizeTo_new);

    olua_registerluatype<cocos2d::ResizeTo>(L, "cc.ResizeTo");

    return 1;
}

static int _cocos2d_ResizeBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ResizeBy *)olua_toobj(L, 1, "cc.ResizeBy");
    olua_push_cppobj(L, self, "cc.ResizeBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ResizeBy_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** deltaSize */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);

    // static cocos2d::ResizeBy *create(float duration, const cocos2d::Size &deltaSize)
    cocos2d::ResizeBy *ret = (cocos2d::ResizeBy *)cocos2d::ResizeBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.ResizeBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ResizeBy_new(lua_State *L)
{
    olua_startinvoke(L);

    // ResizeBy()
    cocos2d::ResizeBy *ret = (cocos2d::ResizeBy *)new cocos2d::ResizeBy();
    int num_ret = olua_push_cppobj(L, ret, "cc.ResizeBy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ResizeBy(lua_State *L)
{
    oluacls_class(L, "cc.ResizeBy", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_ResizeBy___move);
    oluacls_func(L, "create", _cocos2d_ResizeBy_create);
    oluacls_func(L, "new", _cocos2d_ResizeBy_new);

    olua_registerluatype<cocos2d::ResizeBy>(L, "cc.ResizeBy");

    return 1;
}

static int _cocos2d_BezierBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::BezierBy *)olua_toobj(L, 1, "cc.BezierBy");
    olua_push_cppobj(L, self, "cc.BezierBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_BezierBy_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::ccBezierConfig arg2;       /** c */

    olua_check_number(L, 1, &arg1);
    manual_olua_check_cocos2d_ccBezierConfig(L, 2, &arg2);

    // static cocos2d::BezierBy *create(float t, const cocos2d::ccBezierConfig &c)
    cocos2d::BezierBy *ret = (cocos2d::BezierBy *)cocos2d::BezierBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.BezierBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_BezierBy_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::ccBezierConfig arg2;       /** c */

    olua_check_number(L, 1, &arg1);
    manual_olua_pack_cocos2d_ccBezierConfig(L, 2, &arg2);

    // static cocos2d::BezierBy *create(float t, @pack const cocos2d::ccBezierConfig &c)
    cocos2d::BezierBy *ret = (cocos2d::BezierBy *)cocos2d::BezierBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.BezierBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_BezierBy_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (manual_olua_is_cocos2d_ccBezierConfig(L, 2))) {
            // static cocos2d::BezierBy *create(float t, const cocos2d::ccBezierConfig &c)
            return _cocos2d_BezierBy_create1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_number(L, 1)) && (manual_olua_ispack_cocos2d_ccBezierConfig(L, 2))) {
            // static cocos2d::BezierBy *create(float t, @pack const cocos2d::ccBezierConfig &c)
            return _cocos2d_BezierBy_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::BezierBy::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_BezierBy_new(lua_State *L)
{
    olua_startinvoke(L);

    // BezierBy()
    cocos2d::BezierBy *ret = (cocos2d::BezierBy *)new cocos2d::BezierBy();
    int num_ret = olua_push_cppobj(L, ret, "cc.BezierBy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_BezierBy(lua_State *L)
{
    oluacls_class(L, "cc.BezierBy", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_BezierBy___move);
    oluacls_func(L, "create", _cocos2d_BezierBy_create);
    oluacls_func(L, "new", _cocos2d_BezierBy_new);

    olua_registerluatype<cocos2d::BezierBy>(L, "cc.BezierBy");

    return 1;
}

static int _cocos2d_BezierTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::BezierTo *)olua_toobj(L, 1, "cc.BezierTo");
    olua_push_cppobj(L, self, "cc.BezierTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_BezierTo_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::ccBezierConfig arg2;       /** c */

    olua_check_number(L, 1, &arg1);
    manual_olua_check_cocos2d_ccBezierConfig(L, 2, &arg2);

    // static cocos2d::BezierTo *create(float t, const cocos2d::ccBezierConfig &c)
    cocos2d::BezierTo *ret = (cocos2d::BezierTo *)cocos2d::BezierTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.BezierTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_BezierTo_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::ccBezierConfig arg2;       /** c */

    olua_check_number(L, 1, &arg1);
    manual_olua_pack_cocos2d_ccBezierConfig(L, 2, &arg2);

    // static cocos2d::BezierTo *create(float t, @pack const cocos2d::ccBezierConfig &c)
    cocos2d::BezierTo *ret = (cocos2d::BezierTo *)cocos2d::BezierTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.BezierTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_BezierTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (manual_olua_is_cocos2d_ccBezierConfig(L, 2))) {
            // static cocos2d::BezierTo *create(float t, const cocos2d::ccBezierConfig &c)
            return _cocos2d_BezierTo_create1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_number(L, 1)) && (manual_olua_ispack_cocos2d_ccBezierConfig(L, 2))) {
            // static cocos2d::BezierTo *create(float t, @pack const cocos2d::ccBezierConfig &c)
            return _cocos2d_BezierTo_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::BezierTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_BezierTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // BezierTo()
    cocos2d::BezierTo *ret = (cocos2d::BezierTo *)new cocos2d::BezierTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.BezierTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_BezierTo(lua_State *L)
{
    oluacls_class(L, "cc.BezierTo", "cc.BezierBy");
    oluacls_func(L, "__move", _cocos2d_BezierTo___move);
    oluacls_func(L, "create", _cocos2d_BezierTo_create);
    oluacls_func(L, "new", _cocos2d_BezierTo_new);

    olua_registerluatype<cocos2d::BezierTo>(L, "cc.BezierTo");

    return 1;
}

static int _cocos2d_JumpBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::JumpBy *)olua_toobj(L, 1, "cc.JumpBy");
    olua_push_cppobj(L, self, "cc.JumpBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_JumpBy_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec2 arg2;       /** position */
    lua_Number arg3 = 0;       /** height */
    lua_Integer arg4 = 0;       /** jumps */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static cocos2d::JumpBy *create(float duration, const cocos2d::Vec2 &position, float height, int jumps)
    cocos2d::JumpBy *ret = (cocos2d::JumpBy *)cocos2d::JumpBy::create((float)arg1, arg2, (float)arg3, (int)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.JumpBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_JumpBy_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec2 arg2;       /** position */
    lua_Number arg3 = 0;       /** height */
    lua_Integer arg4 = 0;       /** jumps */

    olua_check_number(L, 1, &arg1);
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // static cocos2d::JumpBy *create(float duration, @pack const cocos2d::Vec2 &position, float height, int jumps)
    cocos2d::JumpBy *ret = (cocos2d::JumpBy *)cocos2d::JumpBy::create((float)arg1, arg2, (float)arg3, (int)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.JumpBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_JumpBy_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 4) {
        // if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Vec2(L, 2)) && (olua_is_number(L, 3)) && (olua_is_int(L, 4))) {
            // static cocos2d::JumpBy *create(float duration, const cocos2d::Vec2 &position, float height, int jumps)
            return _cocos2d_JumpBy_create1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_number(L, 1)) && (auto_olua_ispack_cocos2d_Vec2(L, 2)) && (olua_is_number(L, 3)) && (olua_is_int(L, 4))) {
            // static cocos2d::JumpBy *create(float duration, @pack const cocos2d::Vec2 &position, float height, int jumps)
            return _cocos2d_JumpBy_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::JumpBy::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_JumpBy_new(lua_State *L)
{
    olua_startinvoke(L);

    // JumpBy()
    cocos2d::JumpBy *ret = (cocos2d::JumpBy *)new cocos2d::JumpBy();
    int num_ret = olua_push_cppobj(L, ret, "cc.JumpBy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_JumpBy(lua_State *L)
{
    oluacls_class(L, "cc.JumpBy", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_JumpBy___move);
    oluacls_func(L, "create", _cocos2d_JumpBy_create);
    oluacls_func(L, "new", _cocos2d_JumpBy_new);

    olua_registerluatype<cocos2d::JumpBy>(L, "cc.JumpBy");

    return 1;
}

static int _cocos2d_JumpTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::JumpTo *)olua_toobj(L, 1, "cc.JumpTo");
    olua_push_cppobj(L, self, "cc.JumpTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_JumpTo_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec2 arg2;       /** position */
    lua_Number arg3 = 0;       /** height */
    lua_Integer arg4 = 0;       /** jumps */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static cocos2d::JumpTo *create(float duration, const cocos2d::Vec2 &position, float height, int jumps)
    cocos2d::JumpTo *ret = (cocos2d::JumpTo *)cocos2d::JumpTo::create((float)arg1, arg2, (float)arg3, (int)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.JumpTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_JumpTo_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Vec2 arg2;       /** position */
    lua_Number arg3 = 0;       /** height */
    lua_Integer arg4 = 0;       /** jumps */

    olua_check_number(L, 1, &arg1);
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // static cocos2d::JumpTo *create(float duration, @pack const cocos2d::Vec2 &position, float height, int jumps)
    cocos2d::JumpTo *ret = (cocos2d::JumpTo *)cocos2d::JumpTo::create((float)arg1, arg2, (float)arg3, (int)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.JumpTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_JumpTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 4) {
        // if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Vec2(L, 2)) && (olua_is_number(L, 3)) && (olua_is_int(L, 4))) {
            // static cocos2d::JumpTo *create(float duration, const cocos2d::Vec2 &position, float height, int jumps)
            return _cocos2d_JumpTo_create1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_number(L, 1)) && (auto_olua_ispack_cocos2d_Vec2(L, 2)) && (olua_is_number(L, 3)) && (olua_is_int(L, 4))) {
            // static cocos2d::JumpTo *create(float duration, @pack const cocos2d::Vec2 &position, float height, int jumps)
            return _cocos2d_JumpTo_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::JumpTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_JumpTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // JumpTo()
    cocos2d::JumpTo *ret = (cocos2d::JumpTo *)new cocos2d::JumpTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.JumpTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_JumpTo(lua_State *L)
{
    oluacls_class(L, "cc.JumpTo", "cc.JumpBy");
    oluacls_func(L, "__move", _cocos2d_JumpTo___move);
    oluacls_func(L, "create", _cocos2d_JumpTo_create);
    oluacls_func(L, "new", _cocos2d_JumpTo_new);

    olua_registerluatype<cocos2d::JumpTo>(L, "cc.JumpTo");

    return 1;
}

static int _cocos2d_ScaleTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ScaleTo *)olua_toobj(L, 1, "cc.ScaleTo");
    olua_push_cppobj(L, self, "cc.ScaleTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ScaleTo_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::ScaleTo *create(float duration, float s)
    cocos2d::ScaleTo *ret = (cocos2d::ScaleTo *)cocos2d::ScaleTo::create((float)arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.ScaleTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ScaleTo_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** sx */
    lua_Number arg3 = 0;       /** sy */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::ScaleTo *create(float duration, float sx, float sy)
    cocos2d::ScaleTo *ret = (cocos2d::ScaleTo *)cocos2d::ScaleTo::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.ScaleTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ScaleTo_create3(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** sx */
    lua_Number arg3 = 0;       /** sy */
    lua_Number arg4 = 0;       /** sz */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::ScaleTo *create(float duration, float sx, float sy, float sz)
    cocos2d::ScaleTo *ret = (cocos2d::ScaleTo *)cocos2d::ScaleTo::create((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.ScaleTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ScaleTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2))) {
            // static cocos2d::ScaleTo *create(float duration, float s)
            return _cocos2d_ScaleTo_create1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::ScaleTo *create(float duration, float sx, float sy)
            return _cocos2d_ScaleTo_create2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4))) {
            // static cocos2d::ScaleTo *create(float duration, float sx, float sy, float sz)
            return _cocos2d_ScaleTo_create3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ScaleTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ScaleTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // ScaleTo()
    cocos2d::ScaleTo *ret = (cocos2d::ScaleTo *)new cocos2d::ScaleTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.ScaleTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ScaleTo(lua_State *L)
{
    oluacls_class(L, "cc.ScaleTo", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_ScaleTo___move);
    oluacls_func(L, "create", _cocos2d_ScaleTo_create);
    oluacls_func(L, "new", _cocos2d_ScaleTo_new);

    olua_registerluatype<cocos2d::ScaleTo>(L, "cc.ScaleTo");

    return 1;
}

static int _cocos2d_ScaleBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ScaleBy *)olua_toobj(L, 1, "cc.ScaleBy");
    olua_push_cppobj(L, self, "cc.ScaleBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ScaleBy_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::ScaleBy *create(float duration, float s)
    cocos2d::ScaleBy *ret = (cocos2d::ScaleBy *)cocos2d::ScaleBy::create((float)arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.ScaleBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ScaleBy_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** sx */
    lua_Number arg3 = 0;       /** sy */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::ScaleBy *create(float duration, float sx, float sy)
    cocos2d::ScaleBy *ret = (cocos2d::ScaleBy *)cocos2d::ScaleBy::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.ScaleBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ScaleBy_create3(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** sx */
    lua_Number arg3 = 0;       /** sy */
    lua_Number arg4 = 0;       /** sz */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::ScaleBy *create(float duration, float sx, float sy, float sz)
    cocos2d::ScaleBy *ret = (cocos2d::ScaleBy *)cocos2d::ScaleBy::create((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.ScaleBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ScaleBy_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2))) {
            // static cocos2d::ScaleBy *create(float duration, float s)
            return _cocos2d_ScaleBy_create1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::ScaleBy *create(float duration, float sx, float sy)
            return _cocos2d_ScaleBy_create2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4))) {
            // static cocos2d::ScaleBy *create(float duration, float sx, float sy, float sz)
            return _cocos2d_ScaleBy_create3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ScaleBy::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ScaleBy_new(lua_State *L)
{
    olua_startinvoke(L);

    // ScaleBy()
    cocos2d::ScaleBy *ret = (cocos2d::ScaleBy *)new cocos2d::ScaleBy();
    int num_ret = olua_push_cppobj(L, ret, "cc.ScaleBy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ScaleBy(lua_State *L)
{
    oluacls_class(L, "cc.ScaleBy", "cc.ScaleTo");
    oluacls_func(L, "__move", _cocos2d_ScaleBy___move);
    oluacls_func(L, "create", _cocos2d_ScaleBy_create);
    oluacls_func(L, "new", _cocos2d_ScaleBy_new);

    olua_registerluatype<cocos2d::ScaleBy>(L, "cc.ScaleBy");

    return 1;
}

static int _cocos2d_Blink___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Blink *)olua_toobj(L, 1, "cc.Blink");
    olua_push_cppobj(L, self, "cc.Blink");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Blink_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Integer arg2 = 0;       /** blinks */

    olua_check_number(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);

    // static cocos2d::Blink *create(float duration, int blinks)
    cocos2d::Blink *ret = (cocos2d::Blink *)cocos2d::Blink::create((float)arg1, (int)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Blink");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Blink_new(lua_State *L)
{
    olua_startinvoke(L);

    // Blink()
    cocos2d::Blink *ret = (cocos2d::Blink *)new cocos2d::Blink();
    int num_ret = olua_push_cppobj(L, ret, "cc.Blink");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Blink(lua_State *L)
{
    oluacls_class(L, "cc.Blink", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_Blink___move);
    oluacls_func(L, "create", _cocos2d_Blink_create);
    oluacls_func(L, "new", _cocos2d_Blink_new);

    olua_registerluatype<cocos2d::Blink>(L, "cc.Blink");

    return 1;
}

static int _cocos2d_FadeTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FadeTo *)olua_toobj(L, 1, "cc.FadeTo");
    olua_push_cppobj(L, self, "cc.FadeTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FadeTo_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Unsigned arg2 = 0;       /** opacity */

    olua_check_number(L, 1, &arg1);
    olua_check_uint(L, 2, &arg2);

    // static cocos2d::FadeTo *create(float duration, GLubyte opacity)
    cocos2d::FadeTo *ret = (cocos2d::FadeTo *)cocos2d::FadeTo::create((float)arg1, (GLubyte)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FadeTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // FadeTo()
    cocos2d::FadeTo *ret = (cocos2d::FadeTo *)new cocos2d::FadeTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FadeTo(lua_State *L)
{
    oluacls_class(L, "cc.FadeTo", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_FadeTo___move);
    oluacls_func(L, "create", _cocos2d_FadeTo_create);
    oluacls_func(L, "new", _cocos2d_FadeTo_new);

    olua_registerluatype<cocos2d::FadeTo>(L, "cc.FadeTo");

    return 1;
}

static int _cocos2d_FadeIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FadeIn *)olua_toobj(L, 1, "cc.FadeIn");
    olua_push_cppobj(L, self, "cc.FadeIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FadeIn_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** d */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::FadeIn *create(float d)
    cocos2d::FadeIn *ret = (cocos2d::FadeIn *)cocos2d::FadeIn::create((float)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeIn");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FadeIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // FadeIn()
    cocos2d::FadeIn *ret = (cocos2d::FadeIn *)new cocos2d::FadeIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FadeIn(lua_State *L)
{
    oluacls_class(L, "cc.FadeIn", "cc.FadeTo");
    oluacls_func(L, "__move", _cocos2d_FadeIn___move);
    oluacls_func(L, "create", _cocos2d_FadeIn_create);
    oluacls_func(L, "new", _cocos2d_FadeIn_new);

    olua_registerluatype<cocos2d::FadeIn>(L, "cc.FadeIn");

    return 1;
}

static int _cocos2d_FadeOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FadeOut *)olua_toobj(L, 1, "cc.FadeOut");
    olua_push_cppobj(L, self, "cc.FadeOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FadeOut_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** d */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::FadeOut *create(float d)
    cocos2d::FadeOut *ret = (cocos2d::FadeOut *)cocos2d::FadeOut::create((float)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOut");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FadeOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // FadeOut()
    cocos2d::FadeOut *ret = (cocos2d::FadeOut *)new cocos2d::FadeOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FadeOut(lua_State *L)
{
    oluacls_class(L, "cc.FadeOut", "cc.FadeTo");
    oluacls_func(L, "__move", _cocos2d_FadeOut___move);
    oluacls_func(L, "create", _cocos2d_FadeOut_create);
    oluacls_func(L, "new", _cocos2d_FadeOut_new);

    olua_registerluatype<cocos2d::FadeOut>(L, "cc.FadeOut");

    return 1;
}

static int _cocos2d_TintTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TintTo *)olua_toobj(L, 1, "cc.TintTo");
    olua_push_cppobj(L, self, "cc.TintTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TintTo_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Unsigned arg2 = 0;       /** red */
    lua_Unsigned arg3 = 0;       /** green */
    lua_Unsigned arg4 = 0;       /** blue */

    olua_check_number(L, 1, &arg1);
    olua_check_uint(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_uint(L, 4, &arg4);

    // static cocos2d::TintTo *create(float duration, GLubyte red, GLubyte green, GLubyte blue)
    cocos2d::TintTo *ret = (cocos2d::TintTo *)cocos2d::TintTo::create((float)arg1, (GLubyte)arg2, (GLubyte)arg3, (GLubyte)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.TintTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TintTo_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Color3B arg2;       /** color */

    olua_check_number(L, 1, &arg1);
    manual_olua_check_cocos2d_Color3B(L, 2, &arg2);

    // static cocos2d::TintTo *create(float duration, const cocos2d::Color3B &color)
    cocos2d::TintTo *ret = (cocos2d::TintTo *)cocos2d::TintTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TintTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TintTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (manual_olua_is_cocos2d_Color3B(L, 2))) {
            // static cocos2d::TintTo *create(float duration, const cocos2d::Color3B &color)
            return _cocos2d_TintTo_create2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_number(L, 1)) && (olua_is_uint(L, 2)) && (olua_is_uint(L, 3)) && (olua_is_uint(L, 4))) {
            // static cocos2d::TintTo *create(float duration, GLubyte red, GLubyte green, GLubyte blue)
            return _cocos2d_TintTo_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TintTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TintTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // TintTo()
    cocos2d::TintTo *ret = (cocos2d::TintTo *)new cocos2d::TintTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.TintTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TintTo(lua_State *L)
{
    oluacls_class(L, "cc.TintTo", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_TintTo___move);
    oluacls_func(L, "create", _cocos2d_TintTo_create);
    oluacls_func(L, "new", _cocos2d_TintTo_new);

    olua_registerluatype<cocos2d::TintTo>(L, "cc.TintTo");

    return 1;
}

static int _cocos2d_TintBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TintBy *)olua_toobj(L, 1, "cc.TintBy");
    olua_push_cppobj(L, self, "cc.TintBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TintBy_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Integer arg2 = 0;       /** deltaRed */
    lua_Integer arg3 = 0;       /** deltaGreen */
    lua_Integer arg4 = 0;       /** deltaBlue */

    olua_check_number(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static cocos2d::TintBy *create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
    cocos2d::TintBy *ret = (cocos2d::TintBy *)cocos2d::TintBy::create((float)arg1, (GLshort)arg2, (GLshort)arg3, (GLshort)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.TintBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TintBy_new(lua_State *L)
{
    olua_startinvoke(L);

    // TintBy()
    cocos2d::TintBy *ret = (cocos2d::TintBy *)new cocos2d::TintBy();
    int num_ret = olua_push_cppobj(L, ret, "cc.TintBy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TintBy(lua_State *L)
{
    oluacls_class(L, "cc.TintBy", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_TintBy___move);
    oluacls_func(L, "create", _cocos2d_TintBy_create);
    oluacls_func(L, "new", _cocos2d_TintBy_new);

    olua_registerluatype<cocos2d::TintBy>(L, "cc.TintBy");

    return 1;
}

static int _cocos2d_DelayTime___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::DelayTime *)olua_toobj(L, 1, "cc.DelayTime");
    olua_push_cppobj(L, self, "cc.DelayTime");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_DelayTime_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** d */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::DelayTime *create(float d)
    cocos2d::DelayTime *ret = (cocos2d::DelayTime *)cocos2d::DelayTime::create((float)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.DelayTime");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DelayTime_new(lua_State *L)
{
    olua_startinvoke(L);

    // DelayTime()
    cocos2d::DelayTime *ret = (cocos2d::DelayTime *)new cocos2d::DelayTime();
    int num_ret = olua_push_cppobj(L, ret, "cc.DelayTime");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_DelayTime(lua_State *L)
{
    oluacls_class(L, "cc.DelayTime", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_DelayTime___move);
    oluacls_func(L, "create", _cocos2d_DelayTime_create);
    oluacls_func(L, "new", _cocos2d_DelayTime_new);

    olua_registerluatype<cocos2d::DelayTime>(L, "cc.DelayTime");

    return 1;
}

static int _cocos2d_ReverseTime___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ReverseTime *)olua_toobj(L, 1, "cc.ReverseTime");
    olua_push_cppobj(L, self, "cc.ReverseTime");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ReverseTime_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FiniteTimeAction *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FiniteTimeAction");

    // static cocos2d::ReverseTime *create(@ref(map autoref) cocos2d::FiniteTimeAction *action)
    cocos2d::ReverseTime *ret = (cocos2d::ReverseTime *)cocos2d::ReverseTime::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ReverseTime");

    // inject code after call
    olua_mapref(L, -1, "autoref", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ReverseTime_new(lua_State *L)
{
    olua_startinvoke(L);

    // ReverseTime()
    cocos2d::ReverseTime *ret = (cocos2d::ReverseTime *)new cocos2d::ReverseTime();
    int num_ret = olua_push_cppobj(L, ret, "cc.ReverseTime");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ReverseTime(lua_State *L)
{
    oluacls_class(L, "cc.ReverseTime", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_ReverseTime___move);
    oluacls_func(L, "create", _cocos2d_ReverseTime_create);
    oluacls_func(L, "new", _cocos2d_ReverseTime_new);

    olua_registerluatype<cocos2d::ReverseTime>(L, "cc.ReverseTime");

    return 1;
}

static int _cocos2d_Animate___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Animate *)olua_toobj(L, 1, "cc.Animate");
    olua_push_cppobj(L, self, "cc.Animate");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Animate_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *arg1 = nullptr;       /** animation */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Animation");

    // static cocos2d::Animate *create(cocos2d::Animation *animation)
    cocos2d::Animate *ret = (cocos2d::Animate *)cocos2d::Animate::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Animate");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animate_getAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animate *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animate");

    // cocos2d::Animation *getAnimation()
    cocos2d::Animation *ret = (cocos2d::Animation *)self->getAnimation();
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animate_getCurrentFrameIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animate *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animate");

    // int getCurrentFrameIndex()
    int ret = (int)self->getCurrentFrameIndex();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animate_new(lua_State *L)
{
    olua_startinvoke(L);

    // Animate()
    cocos2d::Animate *ret = (cocos2d::Animate *)new cocos2d::Animate();
    int num_ret = olua_push_cppobj(L, ret, "cc.Animate");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animate_setAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animate *self = nullptr;
    cocos2d::Animation *arg1 = nullptr;       /** animation */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Animation");

    // void setAnimation(cocos2d::Animation *animation)
    self->setAnimation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Animate(lua_State *L)
{
    oluacls_class(L, "cc.Animate", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_Animate___move);
    oluacls_func(L, "create", _cocos2d_Animate_create);
    oluacls_func(L, "getAnimation", _cocos2d_Animate_getAnimation);
    oluacls_func(L, "getCurrentFrameIndex", _cocos2d_Animate_getCurrentFrameIndex);
    oluacls_func(L, "new", _cocos2d_Animate_new);
    oluacls_func(L, "setAnimation", _cocos2d_Animate_setAnimation);
    oluacls_prop(L, "animation", _cocos2d_Animate_getAnimation, _cocos2d_Animate_setAnimation);
    oluacls_prop(L, "currentFrameIndex", _cocos2d_Animate_getCurrentFrameIndex, nullptr);

    olua_registerluatype<cocos2d::Animate>(L, "cc.Animate");

    return 1;
}

static int _cocos2d_TargetedAction___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TargetedAction *)olua_toobj(L, 1, "cc.TargetedAction");
    olua_push_cppobj(L, self, "cc.TargetedAction");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TargetedAction_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** target */
    cocos2d::FiniteTimeAction *arg2 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.FiniteTimeAction");

    // static cocos2d::TargetedAction *create(cocos2d::Node *target, @ref(map autoref) cocos2d::FiniteTimeAction *action)
    cocos2d::TargetedAction *ret = (cocos2d::TargetedAction *)cocos2d::TargetedAction::create(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TargetedAction");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TargetedAction_getForcedTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TargetedAction *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TargetedAction");

    // cocos2d::Node *getForcedTarget()
    cocos2d::Node *ret = (cocos2d::Node *)self->getForcedTarget();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TargetedAction_initWithTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TargetedAction *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */
    cocos2d::FiniteTimeAction *arg2 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TargetedAction");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.FiniteTimeAction");

    // bool initWithTarget(cocos2d::Node *target, cocos2d::FiniteTimeAction *action)
    bool ret = (bool)self->initWithTarget(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TargetedAction_new(lua_State *L)
{
    olua_startinvoke(L);

    // TargetedAction()
    cocos2d::TargetedAction *ret = (cocos2d::TargetedAction *)new cocos2d::TargetedAction();
    int num_ret = olua_push_cppobj(L, ret, "cc.TargetedAction");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TargetedAction_setForcedTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TargetedAction *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** forcedTarget */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TargetedAction");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setForcedTarget(cocos2d::Node *forcedTarget)
    self->setForcedTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_TargetedAction(lua_State *L)
{
    oluacls_class(L, "cc.TargetedAction", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_TargetedAction___move);
    oluacls_func(L, "create", _cocos2d_TargetedAction_create);
    oluacls_func(L, "getForcedTarget", _cocos2d_TargetedAction_getForcedTarget);
    oluacls_func(L, "initWithTarget", _cocos2d_TargetedAction_initWithTarget);
    oluacls_func(L, "new", _cocos2d_TargetedAction_new);
    oluacls_func(L, "setForcedTarget", _cocos2d_TargetedAction_setForcedTarget);
    oluacls_prop(L, "forcedTarget", _cocos2d_TargetedAction_getForcedTarget, _cocos2d_TargetedAction_setForcedTarget);

    olua_registerluatype<cocos2d::TargetedAction>(L, "cc.TargetedAction");

    return 1;
}

static int _cocos2d_ActionFloat___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ActionFloat *)olua_toobj(L, 1, "cc.ActionFloat");
    olua_push_cppobj(L, self, "cc.ActionFloat");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ActionFloat_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** from */
    lua_Number arg3 = 0;       /** to */
    std::function<void(float)> arg4;       /** callback */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    cocos2d::ActionFloat *self = new cocos2d::ActionFloat();
    cocos2d::ActionFloat *ret = self;
    olua_push_cppobj<cocos2d::ActionFloat>(L, self);
    olua_postnew(L, ret);

    void *callback_store_obj = (void *)self;
    std::string tag = "ActionFloat";
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 4, OLUA_TAG_NEW);
    lua_State *MT = olua_mainthread();
    arg4 = [callback_store_obj, func, MT](float arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_number(L, (lua_Number)arg1);

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // static ActionFloat* create(float duration, float from, float to, std::function<void(float value)> callback)
    self->initWithDuration((float)arg1, (float)arg2, (float)arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionFloat");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionFloat_new(lua_State *L)
{
    olua_startinvoke(L);

    // ActionFloat()
    cocos2d::ActionFloat *ret = (cocos2d::ActionFloat *)new cocos2d::ActionFloat();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionFloat");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ActionFloat(lua_State *L)
{
    oluacls_class(L, "cc.ActionFloat", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_ActionFloat___move);
    oluacls_func(L, "create", _cocos2d_ActionFloat_create);
    oluacls_func(L, "new", _cocos2d_ActionFloat_new);

    olua_registerluatype<cocos2d::ActionFloat>(L, "cc.ActionFloat");

    return 1;
}

static int _cocos2d_ProgressTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ProgressTo *)olua_toobj(L, 1, "cc.ProgressTo");
    olua_push_cppobj(L, self, "cc.ProgressTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ProgressTo_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** percent */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::ProgressTo *create(float duration, float percent)
    cocos2d::ProgressTo *ret = (cocos2d::ProgressTo *)cocos2d::ProgressTo::create((float)arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.ProgressTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // ProgressTo()
    cocos2d::ProgressTo *ret = (cocos2d::ProgressTo *)new cocos2d::ProgressTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.ProgressTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ProgressTo(lua_State *L)
{
    oluacls_class(L, "cc.ProgressTo", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_ProgressTo___move);
    oluacls_func(L, "create", _cocos2d_ProgressTo_create);
    oluacls_func(L, "new", _cocos2d_ProgressTo_new);

    olua_registerluatype<cocos2d::ProgressTo>(L, "cc.ProgressTo");

    return 1;
}

static int _cocos2d_ProgressFromTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ProgressFromTo *)olua_toobj(L, 1, "cc.ProgressFromTo");
    olua_push_cppobj(L, self, "cc.ProgressFromTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ProgressFromTo_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Number arg2 = 0;       /** fromPercentage */
    lua_Number arg3 = 0;       /** toPercentage */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::ProgressFromTo *create(float duration, float fromPercentage, float toPercentage)
    cocos2d::ProgressFromTo *ret = (cocos2d::ProgressFromTo *)cocos2d::ProgressFromTo::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.ProgressFromTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressFromTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // ProgressFromTo()
    cocos2d::ProgressFromTo *ret = (cocos2d::ProgressFromTo *)new cocos2d::ProgressFromTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.ProgressFromTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ProgressFromTo(lua_State *L)
{
    oluacls_class(L, "cc.ProgressFromTo", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_ProgressFromTo___move);
    oluacls_func(L, "create", _cocos2d_ProgressFromTo_create);
    oluacls_func(L, "new", _cocos2d_ProgressFromTo_new);

    olua_registerluatype<cocos2d::ProgressFromTo>(L, "cc.ProgressFromTo");

    return 1;
}

static int _cocos2d_ActionEase___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ActionEase *)olua_toobj(L, 1, "cc.ActionEase");
    olua_push_cppobj(L, self, "cc.ActionEase");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ActionEase_getInnerAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionEase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionEase");

    // @ref(single innerAction) cocos2d::ActionInterval *getInnerAction()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->getInnerAction();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    // inject code after call
    olua_singleref(L, 1, "innerAction", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionEase_new(lua_State *L)
{
    olua_startinvoke(L);

    // ActionEase()
    cocos2d::ActionEase *ret = (cocos2d::ActionEase *)new cocos2d::ActionEase();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionEase");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ActionEase(lua_State *L)
{
    oluacls_class(L, "cc.ActionEase", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_ActionEase___move);
    oluacls_func(L, "getInnerAction", _cocos2d_ActionEase_getInnerAction);
    oluacls_func(L, "new", _cocos2d_ActionEase_new);
    oluacls_prop(L, "innerAction", _cocos2d_ActionEase_getInnerAction, nullptr);

    olua_registerluatype<cocos2d::ActionEase>(L, "cc.ActionEase");

    return 1;
}

static int _cocos2d_EaseRateAction___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseRateAction *)olua_toobj(L, 1, "cc.EaseRateAction");
    olua_push_cppobj(L, self, "cc.EaseRateAction");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseRateAction_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::EaseRateAction *create(@ref(single innerAction) cocos2d::ActionInterval *action, float rate)
    cocos2d::EaseRateAction *ret = (cocos2d::EaseRateAction *)cocos2d::EaseRateAction::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseRateAction");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseRateAction_getRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EaseRateAction *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseRateAction");

    // float getRate()
    float ret = (float)self->getRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseRateAction_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseRateAction()
    cocos2d::EaseRateAction *ret = (cocos2d::EaseRateAction *)new cocos2d::EaseRateAction();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseRateAction");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseRateAction_setRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EaseRateAction *self = nullptr;
    lua_Number arg1 = 0;       /** rate */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseRateAction");
    olua_check_number(L, 2, &arg1);

    // void setRate(float rate)
    self->setRate((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EaseRateAction(lua_State *L)
{
    oluacls_class(L, "cc.EaseRateAction", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseRateAction___move);
    oluacls_func(L, "create", _cocos2d_EaseRateAction_create);
    oluacls_func(L, "getRate", _cocos2d_EaseRateAction_getRate);
    oluacls_func(L, "new", _cocos2d_EaseRateAction_new);
    oluacls_func(L, "setRate", _cocos2d_EaseRateAction_setRate);
    oluacls_prop(L, "rate", _cocos2d_EaseRateAction_getRate, _cocos2d_EaseRateAction_setRate);

    olua_registerluatype<cocos2d::EaseRateAction>(L, "cc.EaseRateAction");

    return 1;
}

static int _cocos2d_EaseExponentialIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseExponentialIn *)olua_toobj(L, 1, "cc.EaseExponentialIn");
    olua_push_cppobj(L, self, "cc.EaseExponentialIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseExponentialIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseExponentialIn *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseExponentialIn *ret = (cocos2d::EaseExponentialIn *)cocos2d::EaseExponentialIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseExponentialIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseExponentialIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseExponentialIn()
    cocos2d::EaseExponentialIn *ret = (cocos2d::EaseExponentialIn *)new cocos2d::EaseExponentialIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseExponentialIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseExponentialIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseExponentialIn", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseExponentialIn___move);
    oluacls_func(L, "create", _cocos2d_EaseExponentialIn_create);
    oluacls_func(L, "new", _cocos2d_EaseExponentialIn_new);

    olua_registerluatype<cocos2d::EaseExponentialIn>(L, "cc.EaseExponentialIn");

    return 1;
}

static int _cocos2d_EaseExponentialOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseExponentialOut *)olua_toobj(L, 1, "cc.EaseExponentialOut");
    olua_push_cppobj(L, self, "cc.EaseExponentialOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseExponentialOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseExponentialOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseExponentialOut *ret = (cocos2d::EaseExponentialOut *)cocos2d::EaseExponentialOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseExponentialOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseExponentialOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseExponentialOut()
    cocos2d::EaseExponentialOut *ret = (cocos2d::EaseExponentialOut *)new cocos2d::EaseExponentialOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseExponentialOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseExponentialOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseExponentialOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseExponentialOut___move);
    oluacls_func(L, "create", _cocos2d_EaseExponentialOut_create);
    oluacls_func(L, "new", _cocos2d_EaseExponentialOut_new);

    olua_registerluatype<cocos2d::EaseExponentialOut>(L, "cc.EaseExponentialOut");

    return 1;
}

static int _cocos2d_EaseExponentialInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseExponentialInOut *)olua_toobj(L, 1, "cc.EaseExponentialInOut");
    olua_push_cppobj(L, self, "cc.EaseExponentialInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseExponentialInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseExponentialInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseExponentialInOut *ret = (cocos2d::EaseExponentialInOut *)cocos2d::EaseExponentialInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseExponentialInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseExponentialInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseExponentialInOut()
    cocos2d::EaseExponentialInOut *ret = (cocos2d::EaseExponentialInOut *)new cocos2d::EaseExponentialInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseExponentialInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseExponentialInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseExponentialInOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseExponentialInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseExponentialInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseExponentialInOut_new);

    olua_registerluatype<cocos2d::EaseExponentialInOut>(L, "cc.EaseExponentialInOut");

    return 1;
}

static int _cocos2d_EaseSineIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseSineIn *)olua_toobj(L, 1, "cc.EaseSineIn");
    olua_push_cppobj(L, self, "cc.EaseSineIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseSineIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseSineIn *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseSineIn *ret = (cocos2d::EaseSineIn *)cocos2d::EaseSineIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseSineIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseSineIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseSineIn()
    cocos2d::EaseSineIn *ret = (cocos2d::EaseSineIn *)new cocos2d::EaseSineIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseSineIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseSineIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseSineIn", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseSineIn___move);
    oluacls_func(L, "create", _cocos2d_EaseSineIn_create);
    oluacls_func(L, "new", _cocos2d_EaseSineIn_new);

    olua_registerluatype<cocos2d::EaseSineIn>(L, "cc.EaseSineIn");

    return 1;
}

static int _cocos2d_EaseSineOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseSineOut *)olua_toobj(L, 1, "cc.EaseSineOut");
    olua_push_cppobj(L, self, "cc.EaseSineOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseSineOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseSineOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseSineOut *ret = (cocos2d::EaseSineOut *)cocos2d::EaseSineOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseSineOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseSineOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseSineOut()
    cocos2d::EaseSineOut *ret = (cocos2d::EaseSineOut *)new cocos2d::EaseSineOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseSineOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseSineOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseSineOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseSineOut___move);
    oluacls_func(L, "create", _cocos2d_EaseSineOut_create);
    oluacls_func(L, "new", _cocos2d_EaseSineOut_new);

    olua_registerluatype<cocos2d::EaseSineOut>(L, "cc.EaseSineOut");

    return 1;
}

static int _cocos2d_EaseSineInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseSineInOut *)olua_toobj(L, 1, "cc.EaseSineInOut");
    olua_push_cppobj(L, self, "cc.EaseSineInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseSineInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseSineInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseSineInOut *ret = (cocos2d::EaseSineInOut *)cocos2d::EaseSineInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseSineInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseSineInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseSineInOut()
    cocos2d::EaseSineInOut *ret = (cocos2d::EaseSineInOut *)new cocos2d::EaseSineInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseSineInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseSineInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseSineInOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseSineInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseSineInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseSineInOut_new);

    olua_registerluatype<cocos2d::EaseSineInOut>(L, "cc.EaseSineInOut");

    return 1;
}

static int _cocos2d_EaseBounceIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseBounceIn *)olua_toobj(L, 1, "cc.EaseBounceIn");
    olua_push_cppobj(L, self, "cc.EaseBounceIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseBounceIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseBounceIn *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseBounceIn *ret = (cocos2d::EaseBounceIn *)cocos2d::EaseBounceIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBounceIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseBounceIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseBounceIn()
    cocos2d::EaseBounceIn *ret = (cocos2d::EaseBounceIn *)new cocos2d::EaseBounceIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBounceIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseBounceIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseBounceIn", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseBounceIn___move);
    oluacls_func(L, "create", _cocos2d_EaseBounceIn_create);
    oluacls_func(L, "new", _cocos2d_EaseBounceIn_new);

    olua_registerluatype<cocos2d::EaseBounceIn>(L, "cc.EaseBounceIn");

    return 1;
}

static int _cocos2d_EaseBounceOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseBounceOut *)olua_toobj(L, 1, "cc.EaseBounceOut");
    olua_push_cppobj(L, self, "cc.EaseBounceOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseBounceOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseBounceOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseBounceOut *ret = (cocos2d::EaseBounceOut *)cocos2d::EaseBounceOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBounceOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseBounceOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseBounceOut()
    cocos2d::EaseBounceOut *ret = (cocos2d::EaseBounceOut *)new cocos2d::EaseBounceOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBounceOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseBounceOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseBounceOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseBounceOut___move);
    oluacls_func(L, "create", _cocos2d_EaseBounceOut_create);
    oluacls_func(L, "new", _cocos2d_EaseBounceOut_new);

    olua_registerluatype<cocos2d::EaseBounceOut>(L, "cc.EaseBounceOut");

    return 1;
}

static int _cocos2d_EaseBounceInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseBounceInOut *)olua_toobj(L, 1, "cc.EaseBounceInOut");
    olua_push_cppobj(L, self, "cc.EaseBounceInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseBounceInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseBounceInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseBounceInOut *ret = (cocos2d::EaseBounceInOut *)cocos2d::EaseBounceInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBounceInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseBounceInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseBounceInOut()
    cocos2d::EaseBounceInOut *ret = (cocos2d::EaseBounceInOut *)new cocos2d::EaseBounceInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBounceInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseBounceInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseBounceInOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseBounceInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseBounceInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseBounceInOut_new);

    olua_registerluatype<cocos2d::EaseBounceInOut>(L, "cc.EaseBounceInOut");

    return 1;
}

static int _cocos2d_EaseBackIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseBackIn *)olua_toobj(L, 1, "cc.EaseBackIn");
    olua_push_cppobj(L, self, "cc.EaseBackIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseBackIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseBackIn *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseBackIn *ret = (cocos2d::EaseBackIn *)cocos2d::EaseBackIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBackIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseBackIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseBackIn()
    cocos2d::EaseBackIn *ret = (cocos2d::EaseBackIn *)new cocos2d::EaseBackIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBackIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseBackIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseBackIn", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseBackIn___move);
    oluacls_func(L, "create", _cocos2d_EaseBackIn_create);
    oluacls_func(L, "new", _cocos2d_EaseBackIn_new);

    olua_registerluatype<cocos2d::EaseBackIn>(L, "cc.EaseBackIn");

    return 1;
}

static int _cocos2d_EaseBackOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseBackOut *)olua_toobj(L, 1, "cc.EaseBackOut");
    olua_push_cppobj(L, self, "cc.EaseBackOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseBackOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseBackOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseBackOut *ret = (cocos2d::EaseBackOut *)cocos2d::EaseBackOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBackOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseBackOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseBackOut()
    cocos2d::EaseBackOut *ret = (cocos2d::EaseBackOut *)new cocos2d::EaseBackOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBackOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseBackOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseBackOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseBackOut___move);
    oluacls_func(L, "create", _cocos2d_EaseBackOut_create);
    oluacls_func(L, "new", _cocos2d_EaseBackOut_new);

    olua_registerluatype<cocos2d::EaseBackOut>(L, "cc.EaseBackOut");

    return 1;
}

static int _cocos2d_EaseBackInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseBackInOut *)olua_toobj(L, 1, "cc.EaseBackInOut");
    olua_push_cppobj(L, self, "cc.EaseBackInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseBackInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseBackInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseBackInOut *ret = (cocos2d::EaseBackInOut *)cocos2d::EaseBackInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBackInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseBackInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseBackInOut()
    cocos2d::EaseBackInOut *ret = (cocos2d::EaseBackInOut *)new cocos2d::EaseBackInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBackInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseBackInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseBackInOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseBackInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseBackInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseBackInOut_new);

    olua_registerluatype<cocos2d::EaseBackInOut>(L, "cc.EaseBackInOut");

    return 1;
}

static int _cocos2d_EaseQuadraticActionIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseQuadraticActionIn *)olua_toobj(L, 1, "cc.EaseQuadraticActionIn");
    olua_push_cppobj(L, self, "cc.EaseQuadraticActionIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseQuadraticActionIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseQuadraticActionIn *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseQuadraticActionIn *ret = (cocos2d::EaseQuadraticActionIn *)cocos2d::EaseQuadraticActionIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuadraticActionIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseQuadraticActionIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseQuadraticActionIn()
    cocos2d::EaseQuadraticActionIn *ret = (cocos2d::EaseQuadraticActionIn *)new cocos2d::EaseQuadraticActionIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuadraticActionIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuadraticActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuadraticActionIn", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseQuadraticActionIn___move);
    oluacls_func(L, "create", _cocos2d_EaseQuadraticActionIn_create);
    oluacls_func(L, "new", _cocos2d_EaseQuadraticActionIn_new);

    olua_registerluatype<cocos2d::EaseQuadraticActionIn>(L, "cc.EaseQuadraticActionIn");

    return 1;
}

static int _cocos2d_EaseQuadraticActionOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseQuadraticActionOut *)olua_toobj(L, 1, "cc.EaseQuadraticActionOut");
    olua_push_cppobj(L, self, "cc.EaseQuadraticActionOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseQuadraticActionOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseQuadraticActionOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseQuadraticActionOut *ret = (cocos2d::EaseQuadraticActionOut *)cocos2d::EaseQuadraticActionOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuadraticActionOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseQuadraticActionOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseQuadraticActionOut()
    cocos2d::EaseQuadraticActionOut *ret = (cocos2d::EaseQuadraticActionOut *)new cocos2d::EaseQuadraticActionOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuadraticActionOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuadraticActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuadraticActionOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseQuadraticActionOut___move);
    oluacls_func(L, "create", _cocos2d_EaseQuadraticActionOut_create);
    oluacls_func(L, "new", _cocos2d_EaseQuadraticActionOut_new);

    olua_registerluatype<cocos2d::EaseQuadraticActionOut>(L, "cc.EaseQuadraticActionOut");

    return 1;
}

static int _cocos2d_EaseQuadraticActionInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseQuadraticActionInOut *)olua_toobj(L, 1, "cc.EaseQuadraticActionInOut");
    olua_push_cppobj(L, self, "cc.EaseQuadraticActionInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseQuadraticActionInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseQuadraticActionInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseQuadraticActionInOut *ret = (cocos2d::EaseQuadraticActionInOut *)cocos2d::EaseQuadraticActionInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuadraticActionInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseQuadraticActionInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseQuadraticActionInOut()
    cocos2d::EaseQuadraticActionInOut *ret = (cocos2d::EaseQuadraticActionInOut *)new cocos2d::EaseQuadraticActionInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuadraticActionInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuadraticActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuadraticActionInOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseQuadraticActionInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseQuadraticActionInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseQuadraticActionInOut_new);

    olua_registerluatype<cocos2d::EaseQuadraticActionInOut>(L, "cc.EaseQuadraticActionInOut");

    return 1;
}

static int _cocos2d_EaseQuarticActionIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseQuarticActionIn *)olua_toobj(L, 1, "cc.EaseQuarticActionIn");
    olua_push_cppobj(L, self, "cc.EaseQuarticActionIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseQuarticActionIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseQuarticActionIn *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseQuarticActionIn *ret = (cocos2d::EaseQuarticActionIn *)cocos2d::EaseQuarticActionIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuarticActionIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseQuarticActionIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseQuarticActionIn()
    cocos2d::EaseQuarticActionIn *ret = (cocos2d::EaseQuarticActionIn *)new cocos2d::EaseQuarticActionIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuarticActionIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuarticActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuarticActionIn", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseQuarticActionIn___move);
    oluacls_func(L, "create", _cocos2d_EaseQuarticActionIn_create);
    oluacls_func(L, "new", _cocos2d_EaseQuarticActionIn_new);

    olua_registerluatype<cocos2d::EaseQuarticActionIn>(L, "cc.EaseQuarticActionIn");

    return 1;
}

static int _cocos2d_EaseQuarticActionOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseQuarticActionOut *)olua_toobj(L, 1, "cc.EaseQuarticActionOut");
    olua_push_cppobj(L, self, "cc.EaseQuarticActionOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseQuarticActionOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseQuarticActionOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseQuarticActionOut *ret = (cocos2d::EaseQuarticActionOut *)cocos2d::EaseQuarticActionOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuarticActionOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseQuarticActionOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseQuarticActionOut()
    cocos2d::EaseQuarticActionOut *ret = (cocos2d::EaseQuarticActionOut *)new cocos2d::EaseQuarticActionOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuarticActionOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuarticActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuarticActionOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseQuarticActionOut___move);
    oluacls_func(L, "create", _cocos2d_EaseQuarticActionOut_create);
    oluacls_func(L, "new", _cocos2d_EaseQuarticActionOut_new);

    olua_registerluatype<cocos2d::EaseQuarticActionOut>(L, "cc.EaseQuarticActionOut");

    return 1;
}

static int _cocos2d_EaseQuarticActionInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseQuarticActionInOut *)olua_toobj(L, 1, "cc.EaseQuarticActionInOut");
    olua_push_cppobj(L, self, "cc.EaseQuarticActionInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseQuarticActionInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseQuarticActionInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseQuarticActionInOut *ret = (cocos2d::EaseQuarticActionInOut *)cocos2d::EaseQuarticActionInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuarticActionInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseQuarticActionInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseQuarticActionInOut()
    cocos2d::EaseQuarticActionInOut *ret = (cocos2d::EaseQuarticActionInOut *)new cocos2d::EaseQuarticActionInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuarticActionInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuarticActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuarticActionInOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseQuarticActionInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseQuarticActionInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseQuarticActionInOut_new);

    olua_registerluatype<cocos2d::EaseQuarticActionInOut>(L, "cc.EaseQuarticActionInOut");

    return 1;
}

static int _cocos2d_EaseQuinticActionIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseQuinticActionIn *)olua_toobj(L, 1, "cc.EaseQuinticActionIn");
    olua_push_cppobj(L, self, "cc.EaseQuinticActionIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseQuinticActionIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseQuinticActionIn *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseQuinticActionIn *ret = (cocos2d::EaseQuinticActionIn *)cocos2d::EaseQuinticActionIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuinticActionIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseQuinticActionIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseQuinticActionIn()
    cocos2d::EaseQuinticActionIn *ret = (cocos2d::EaseQuinticActionIn *)new cocos2d::EaseQuinticActionIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuinticActionIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuinticActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuinticActionIn", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseQuinticActionIn___move);
    oluacls_func(L, "create", _cocos2d_EaseQuinticActionIn_create);
    oluacls_func(L, "new", _cocos2d_EaseQuinticActionIn_new);

    olua_registerluatype<cocos2d::EaseQuinticActionIn>(L, "cc.EaseQuinticActionIn");

    return 1;
}

static int _cocos2d_EaseQuinticActionOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseQuinticActionOut *)olua_toobj(L, 1, "cc.EaseQuinticActionOut");
    olua_push_cppobj(L, self, "cc.EaseQuinticActionOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseQuinticActionOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseQuinticActionOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseQuinticActionOut *ret = (cocos2d::EaseQuinticActionOut *)cocos2d::EaseQuinticActionOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuinticActionOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseQuinticActionOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseQuinticActionOut()
    cocos2d::EaseQuinticActionOut *ret = (cocos2d::EaseQuinticActionOut *)new cocos2d::EaseQuinticActionOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuinticActionOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuinticActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuinticActionOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseQuinticActionOut___move);
    oluacls_func(L, "create", _cocos2d_EaseQuinticActionOut_create);
    oluacls_func(L, "new", _cocos2d_EaseQuinticActionOut_new);

    olua_registerluatype<cocos2d::EaseQuinticActionOut>(L, "cc.EaseQuinticActionOut");

    return 1;
}

static int _cocos2d_EaseQuinticActionInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseQuinticActionInOut *)olua_toobj(L, 1, "cc.EaseQuinticActionInOut");
    olua_push_cppobj(L, self, "cc.EaseQuinticActionInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseQuinticActionInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseQuinticActionInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseQuinticActionInOut *ret = (cocos2d::EaseQuinticActionInOut *)cocos2d::EaseQuinticActionInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuinticActionInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseQuinticActionInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseQuinticActionInOut()
    cocos2d::EaseQuinticActionInOut *ret = (cocos2d::EaseQuinticActionInOut *)new cocos2d::EaseQuinticActionInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseQuinticActionInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuinticActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuinticActionInOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseQuinticActionInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseQuinticActionInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseQuinticActionInOut_new);

    olua_registerluatype<cocos2d::EaseQuinticActionInOut>(L, "cc.EaseQuinticActionInOut");

    return 1;
}

static int _cocos2d_EaseCircleActionIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseCircleActionIn *)olua_toobj(L, 1, "cc.EaseCircleActionIn");
    olua_push_cppobj(L, self, "cc.EaseCircleActionIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseCircleActionIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseCircleActionIn *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseCircleActionIn *ret = (cocos2d::EaseCircleActionIn *)cocos2d::EaseCircleActionIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCircleActionIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseCircleActionIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseCircleActionIn()
    cocos2d::EaseCircleActionIn *ret = (cocos2d::EaseCircleActionIn *)new cocos2d::EaseCircleActionIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCircleActionIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseCircleActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseCircleActionIn", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseCircleActionIn___move);
    oluacls_func(L, "create", _cocos2d_EaseCircleActionIn_create);
    oluacls_func(L, "new", _cocos2d_EaseCircleActionIn_new);

    olua_registerluatype<cocos2d::EaseCircleActionIn>(L, "cc.EaseCircleActionIn");

    return 1;
}

static int _cocos2d_EaseCircleActionOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseCircleActionOut *)olua_toobj(L, 1, "cc.EaseCircleActionOut");
    olua_push_cppobj(L, self, "cc.EaseCircleActionOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseCircleActionOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseCircleActionOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseCircleActionOut *ret = (cocos2d::EaseCircleActionOut *)cocos2d::EaseCircleActionOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCircleActionOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseCircleActionOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseCircleActionOut()
    cocos2d::EaseCircleActionOut *ret = (cocos2d::EaseCircleActionOut *)new cocos2d::EaseCircleActionOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCircleActionOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseCircleActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseCircleActionOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseCircleActionOut___move);
    oluacls_func(L, "create", _cocos2d_EaseCircleActionOut_create);
    oluacls_func(L, "new", _cocos2d_EaseCircleActionOut_new);

    olua_registerluatype<cocos2d::EaseCircleActionOut>(L, "cc.EaseCircleActionOut");

    return 1;
}

static int _cocos2d_EaseCircleActionInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseCircleActionInOut *)olua_toobj(L, 1, "cc.EaseCircleActionInOut");
    olua_push_cppobj(L, self, "cc.EaseCircleActionInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseCircleActionInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseCircleActionInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseCircleActionInOut *ret = (cocos2d::EaseCircleActionInOut *)cocos2d::EaseCircleActionInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCircleActionInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseCircleActionInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseCircleActionInOut()
    cocos2d::EaseCircleActionInOut *ret = (cocos2d::EaseCircleActionInOut *)new cocos2d::EaseCircleActionInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCircleActionInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseCircleActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseCircleActionInOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseCircleActionInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseCircleActionInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseCircleActionInOut_new);

    olua_registerluatype<cocos2d::EaseCircleActionInOut>(L, "cc.EaseCircleActionInOut");

    return 1;
}

static int _cocos2d_EaseCubicActionIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseCubicActionIn *)olua_toobj(L, 1, "cc.EaseCubicActionIn");
    olua_push_cppobj(L, self, "cc.EaseCubicActionIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseCubicActionIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseCubicActionIn *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseCubicActionIn *ret = (cocos2d::EaseCubicActionIn *)cocos2d::EaseCubicActionIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCubicActionIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseCubicActionIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseCubicActionIn()
    cocos2d::EaseCubicActionIn *ret = (cocos2d::EaseCubicActionIn *)new cocos2d::EaseCubicActionIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCubicActionIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseCubicActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseCubicActionIn", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseCubicActionIn___move);
    oluacls_func(L, "create", _cocos2d_EaseCubicActionIn_create);
    oluacls_func(L, "new", _cocos2d_EaseCubicActionIn_new);

    olua_registerluatype<cocos2d::EaseCubicActionIn>(L, "cc.EaseCubicActionIn");

    return 1;
}

static int _cocos2d_EaseCubicActionOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseCubicActionOut *)olua_toobj(L, 1, "cc.EaseCubicActionOut");
    olua_push_cppobj(L, self, "cc.EaseCubicActionOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseCubicActionOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseCubicActionOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseCubicActionOut *ret = (cocos2d::EaseCubicActionOut *)cocos2d::EaseCubicActionOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCubicActionOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseCubicActionOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseCubicActionOut()
    cocos2d::EaseCubicActionOut *ret = (cocos2d::EaseCubicActionOut *)new cocos2d::EaseCubicActionOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCubicActionOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseCubicActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseCubicActionOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseCubicActionOut___move);
    oluacls_func(L, "create", _cocos2d_EaseCubicActionOut_create);
    oluacls_func(L, "new", _cocos2d_EaseCubicActionOut_new);

    olua_registerluatype<cocos2d::EaseCubicActionOut>(L, "cc.EaseCubicActionOut");

    return 1;
}

static int _cocos2d_EaseCubicActionInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseCubicActionInOut *)olua_toobj(L, 1, "cc.EaseCubicActionInOut");
    olua_push_cppobj(L, self, "cc.EaseCubicActionInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseCubicActionInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseCubicActionInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseCubicActionInOut *ret = (cocos2d::EaseCubicActionInOut *)cocos2d::EaseCubicActionInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCubicActionInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseCubicActionInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseCubicActionInOut()
    cocos2d::EaseCubicActionInOut *ret = (cocos2d::EaseCubicActionInOut *)new cocos2d::EaseCubicActionInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseCubicActionInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseCubicActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseCubicActionInOut", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseCubicActionInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseCubicActionInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseCubicActionInOut_new);

    olua_registerluatype<cocos2d::EaseCubicActionInOut>(L, "cc.EaseCubicActionInOut");

    return 1;
}

static int _cocos2d_EaseIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseIn *)olua_toobj(L, 1, "cc.EaseIn");
    olua_push_cppobj(L, self, "cc.EaseIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseIn_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::EaseIn *create(@ref(single innerAction) cocos2d::ActionInterval *action, float rate)
    cocos2d::EaseIn *ret = (cocos2d::EaseIn *)cocos2d::EaseIn::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseIn()
    cocos2d::EaseIn *ret = (cocos2d::EaseIn *)new cocos2d::EaseIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseIn", "cc.EaseRateAction");
    oluacls_func(L, "__move", _cocos2d_EaseIn___move);
    oluacls_func(L, "create", _cocos2d_EaseIn_create);
    oluacls_func(L, "new", _cocos2d_EaseIn_new);

    olua_registerluatype<cocos2d::EaseIn>(L, "cc.EaseIn");

    return 1;
}

static int _cocos2d_EaseOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseOut *)olua_toobj(L, 1, "cc.EaseOut");
    olua_push_cppobj(L, self, "cc.EaseOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::EaseOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, float rate)
    cocos2d::EaseOut *ret = (cocos2d::EaseOut *)cocos2d::EaseOut::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseOut()
    cocos2d::EaseOut *ret = (cocos2d::EaseOut *)new cocos2d::EaseOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseOut", "cc.EaseRateAction");
    oluacls_func(L, "__move", _cocos2d_EaseOut___move);
    oluacls_func(L, "create", _cocos2d_EaseOut_create);
    oluacls_func(L, "new", _cocos2d_EaseOut_new);

    olua_registerluatype<cocos2d::EaseOut>(L, "cc.EaseOut");

    return 1;
}

static int _cocos2d_EaseInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseInOut *)olua_toobj(L, 1, "cc.EaseInOut");
    olua_push_cppobj(L, self, "cc.EaseInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::EaseInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, float rate)
    cocos2d::EaseInOut *ret = (cocos2d::EaseInOut *)cocos2d::EaseInOut::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseInOut()
    cocos2d::EaseInOut *ret = (cocos2d::EaseInOut *)new cocos2d::EaseInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseInOut", "cc.EaseRateAction");
    oluacls_func(L, "__move", _cocos2d_EaseInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseInOut_new);

    olua_registerluatype<cocos2d::EaseInOut>(L, "cc.EaseInOut");

    return 1;
}

static int _cocos2d_EaseElastic___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseElastic *)olua_toobj(L, 1, "cc.EaseElastic");
    olua_push_cppobj(L, self, "cc.EaseElastic");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseElastic_getPeriod(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EaseElastic *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseElastic");

    // float getPeriod()
    float ret = (float)self->getPeriod();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseElastic_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseElastic()
    cocos2d::EaseElastic *ret = (cocos2d::EaseElastic *)new cocos2d::EaseElastic();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElastic");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseElastic_setPeriod(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EaseElastic *self = nullptr;
    lua_Number arg1 = 0;       /** fPeriod */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseElastic");
    olua_check_number(L, 2, &arg1);

    // void setPeriod(float fPeriod)
    self->setPeriod((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EaseElastic(lua_State *L)
{
    oluacls_class(L, "cc.EaseElastic", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseElastic___move);
    oluacls_func(L, "getPeriod", _cocos2d_EaseElastic_getPeriod);
    oluacls_func(L, "new", _cocos2d_EaseElastic_new);
    oluacls_func(L, "setPeriod", _cocos2d_EaseElastic_setPeriod);
    oluacls_prop(L, "period", _cocos2d_EaseElastic_getPeriod, _cocos2d_EaseElastic_setPeriod);

    olua_registerluatype<cocos2d::EaseElastic>(L, "cc.EaseElastic");

    return 1;
}

static int _cocos2d_EaseElasticIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseElasticIn *)olua_toobj(L, 1, "cc.EaseElasticIn");
    olua_push_cppobj(L, self, "cc.EaseElasticIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseElasticIn_create1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::EaseElasticIn *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
    cocos2d::EaseElasticIn *ret = (cocos2d::EaseElasticIn *)cocos2d::EaseElasticIn::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElasticIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseElasticIn_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseElasticIn *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
    cocos2d::EaseElasticIn *ret = (cocos2d::EaseElasticIn *)cocos2d::EaseElasticIn::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElasticIn");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseElasticIn_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 1, "cc.ActionInterval"))) {
            // static cocos2d::EaseElasticIn *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
            return _cocos2d_EaseElasticIn_create2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 1, "cc.ActionInterval")) && (olua_is_number(L, 2))) {
            // static cocos2d::EaseElasticIn *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
            return _cocos2d_EaseElasticIn_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EaseElasticIn::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_EaseElasticIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseElasticIn()
    cocos2d::EaseElasticIn *ret = (cocos2d::EaseElasticIn *)new cocos2d::EaseElasticIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElasticIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseElasticIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseElasticIn", "cc.EaseElastic");
    oluacls_func(L, "__move", _cocos2d_EaseElasticIn___move);
    oluacls_func(L, "create", _cocos2d_EaseElasticIn_create);
    oluacls_func(L, "new", _cocos2d_EaseElasticIn_new);

    olua_registerluatype<cocos2d::EaseElasticIn>(L, "cc.EaseElasticIn");

    return 1;
}

static int _cocos2d_EaseElasticOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseElasticOut *)olua_toobj(L, 1, "cc.EaseElasticOut");
    olua_push_cppobj(L, self, "cc.EaseElasticOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseElasticOut_create1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::EaseElasticOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
    cocos2d::EaseElasticOut *ret = (cocos2d::EaseElasticOut *)cocos2d::EaseElasticOut::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElasticOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseElasticOut_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseElasticOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
    cocos2d::EaseElasticOut *ret = (cocos2d::EaseElasticOut *)cocos2d::EaseElasticOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElasticOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseElasticOut_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 1, "cc.ActionInterval"))) {
            // static cocos2d::EaseElasticOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
            return _cocos2d_EaseElasticOut_create2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 1, "cc.ActionInterval")) && (olua_is_number(L, 2))) {
            // static cocos2d::EaseElasticOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
            return _cocos2d_EaseElasticOut_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EaseElasticOut::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_EaseElasticOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseElasticOut()
    cocos2d::EaseElasticOut *ret = (cocos2d::EaseElasticOut *)new cocos2d::EaseElasticOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElasticOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseElasticOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseElasticOut", "cc.EaseElastic");
    oluacls_func(L, "__move", _cocos2d_EaseElasticOut___move);
    oluacls_func(L, "create", _cocos2d_EaseElasticOut_create);
    oluacls_func(L, "new", _cocos2d_EaseElasticOut_new);

    olua_registerluatype<cocos2d::EaseElasticOut>(L, "cc.EaseElasticOut");

    return 1;
}

static int _cocos2d_EaseElasticInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseElasticInOut *)olua_toobj(L, 1, "cc.EaseElasticInOut");
    olua_push_cppobj(L, self, "cc.EaseElasticInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseElasticInOut_create1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::EaseElasticInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
    cocos2d::EaseElasticInOut *ret = (cocos2d::EaseElasticInOut *)cocos2d::EaseElasticInOut::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElasticInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseElasticInOut_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseElasticInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
    cocos2d::EaseElasticInOut *ret = (cocos2d::EaseElasticInOut *)cocos2d::EaseElasticInOut::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElasticInOut");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseElasticInOut_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 1, "cc.ActionInterval"))) {
            // static cocos2d::EaseElasticInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
            return _cocos2d_EaseElasticInOut_create2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 1, "cc.ActionInterval")) && (olua_is_number(L, 2))) {
            // static cocos2d::EaseElasticInOut *create(@ref(single innerAction) cocos2d::ActionInterval *action, @optional float rate)
            return _cocos2d_EaseElasticInOut_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EaseElasticInOut::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_EaseElasticInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseElasticInOut()
    cocos2d::EaseElasticInOut *ret = (cocos2d::EaseElasticInOut *)new cocos2d::EaseElasticInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseElasticInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_EaseElasticInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseElasticInOut", "cc.EaseElastic");
    oluacls_func(L, "__move", _cocos2d_EaseElasticInOut___move);
    oluacls_func(L, "create", _cocos2d_EaseElasticInOut_create);
    oluacls_func(L, "new", _cocos2d_EaseElasticInOut_new);

    olua_registerluatype<cocos2d::EaseElasticInOut>(L, "cc.EaseElasticInOut");

    return 1;
}

static int _cocos2d_EaseBezierAction___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::EaseBezierAction *)olua_toobj(L, 1, "cc.EaseBezierAction");
    olua_push_cppobj(L, self, "cc.EaseBezierAction");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_EaseBezierAction_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static cocos2d::EaseBezierAction *create(@ref(single innerAction) cocos2d::ActionInterval *action)
    cocos2d::EaseBezierAction *ret = (cocos2d::EaseBezierAction *)cocos2d::EaseBezierAction::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBezierAction");

    // inject code after call
    olua_singleref(L, -1, "innerAction", 1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseBezierAction_new(lua_State *L)
{
    olua_startinvoke(L);

    // EaseBezierAction()
    cocos2d::EaseBezierAction *ret = (cocos2d::EaseBezierAction *)new cocos2d::EaseBezierAction();
    int num_ret = olua_push_cppobj(L, ret, "cc.EaseBezierAction");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_EaseBezierAction_setBezierParamer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EaseBezierAction *self = nullptr;
    lua_Number arg1 = 0;       /** p0 */
    lua_Number arg2 = 0;       /** p1 */
    lua_Number arg3 = 0;       /** p2 */
    lua_Number arg4 = 0;       /** p3 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseBezierAction");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setBezierParamer(float p0, float p1, float p2, float p3)
    self->setBezierParamer((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_EaseBezierAction(lua_State *L)
{
    oluacls_class(L, "cc.EaseBezierAction", "cc.ActionEase");
    oluacls_func(L, "__move", _cocos2d_EaseBezierAction___move);
    oluacls_func(L, "create", _cocos2d_EaseBezierAction_create);
    oluacls_func(L, "new", _cocos2d_EaseBezierAction_new);
    oluacls_func(L, "setBezierParamer", _cocos2d_EaseBezierAction_setBezierParamer);

    olua_registerluatype<cocos2d::EaseBezierAction>(L, "cc.EaseBezierAction");

    return 1;
}

static int _cocos2d_PointArray___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::PointArray *)olua_toobj(L, 1, "cc.PointArray");
    olua_push_cppobj(L, self, "cc.PointArray");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_PointArray_addControlPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;
    cocos2d::Vec2 arg1;       /** controlPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void addControlPoint(const cocos2d::Vec2 &controlPoint)
    self->addControlPoint(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_PointArray_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");

    // cocos2d::PointArray *clone()
    cocos2d::PointArray *ret = (cocos2d::PointArray *)self->clone();
    int num_ret = olua_push_cppobj(L, ret, "cc.PointArray");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointArray_count(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");

    // ssize_t count()
    ssize_t ret = (ssize_t)self->count();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointArray_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** capacity */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::PointArray *create(ssize_t capacity)
    cocos2d::PointArray *ret = (cocos2d::PointArray *)cocos2d::PointArray::create((ssize_t)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.PointArray");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointArray_getControlPointAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;
    lua_Integer arg1 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    olua_check_int(L, 2, &arg1);

    // const cocos2d::Vec2 &getControlPointAtIndex(ssize_t index)
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getControlPointAtIndex((ssize_t)arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointArray_initWithCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;
    lua_Integer arg1 = 0;       /** capacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    olua_check_int(L, 2, &arg1);

    // bool initWithCapacity(ssize_t capacity)
    bool ret = (bool)self->initWithCapacity((ssize_t)arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointArray_insertControlPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;
    cocos2d::Vec2 arg1;       /** controlPoint */
    lua_Integer arg2 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void insertControlPoint(const cocos2d::Vec2 &controlPoint, ssize_t index)
    self->insertControlPoint(arg1, (ssize_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_PointArray_new(lua_State *L)
{
    olua_startinvoke(L);

    // PointArray()
    cocos2d::PointArray *ret = (cocos2d::PointArray *)new cocos2d::PointArray();
    int num_ret = olua_push_cppobj(L, ret, "cc.PointArray");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointArray_removeControlPointAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;
    lua_Integer arg1 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    olua_check_int(L, 2, &arg1);

    // void removeControlPointAtIndex(ssize_t index)
    self->removeControlPointAtIndex((ssize_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_PointArray_replaceControlPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;
    cocos2d::Vec2 arg1;       /** controlPoint */
    lua_Integer arg2 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void replaceControlPoint(const cocos2d::Vec2 &controlPoint, ssize_t index)
    self->replaceControlPoint(arg1, (ssize_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_PointArray_reverse(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");

    // cocos2d::PointArray *reverse()
    cocos2d::PointArray *ret = (cocos2d::PointArray *)self->reverse();
    int num_ret = olua_push_cppobj(L, ret, "cc.PointArray");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointArray_reverseInline(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointArray *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");

    // void reverseInline()
    self->reverseInline();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_PointArray(lua_State *L)
{
    oluacls_class(L, "cc.PointArray", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_PointArray___move);
    oluacls_func(L, "addControlPoint", _cocos2d_PointArray_addControlPoint);
    oluacls_func(L, "clone", _cocos2d_PointArray_clone);
    oluacls_func(L, "count", _cocos2d_PointArray_count);
    oluacls_func(L, "create", _cocos2d_PointArray_create);
    oluacls_func(L, "getControlPointAtIndex", _cocos2d_PointArray_getControlPointAtIndex);
    oluacls_func(L, "initWithCapacity", _cocos2d_PointArray_initWithCapacity);
    oluacls_func(L, "insertControlPoint", _cocos2d_PointArray_insertControlPoint);
    oluacls_func(L, "new", _cocos2d_PointArray_new);
    oluacls_func(L, "removeControlPointAtIndex", _cocos2d_PointArray_removeControlPointAtIndex);
    oluacls_func(L, "replaceControlPoint", _cocos2d_PointArray_replaceControlPoint);
    oluacls_func(L, "reverse", _cocos2d_PointArray_reverse);
    oluacls_func(L, "reverseInline", _cocos2d_PointArray_reverseInline);

    olua_registerluatype<cocos2d::PointArray>(L, "cc.PointArray");

    return 1;
}

static int _cocos2d_CardinalSplineTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CardinalSplineTo *)olua_toobj(L, 1, "cc.CardinalSplineTo");
    olua_push_cppobj(L, self, "cc.CardinalSplineTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_CardinalSplineTo_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::PointArray *arg2 = nullptr;       /** points */
    lua_Number arg3 = 0;       /** tension */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.PointArray");
    olua_check_number(L, 3, &arg3);

    // static cocos2d::CardinalSplineTo *create(float duration, cocos2d::PointArray *points, float tension)
    cocos2d::CardinalSplineTo *ret = (cocos2d::CardinalSplineTo *)cocos2d::CardinalSplineTo::create((float)arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.CardinalSplineTo");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CardinalSplineTo_getPoints(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CardinalSplineTo *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.CardinalSplineTo");

    // cocos2d::PointArray *getPoints()
    cocos2d::PointArray *ret = (cocos2d::PointArray *)self->getPoints();
    int num_ret = olua_push_cppobj(L, ret, "cc.PointArray");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CardinalSplineTo_new(lua_State *L)
{
    olua_startinvoke(L);

    // CardinalSplineTo()
    cocos2d::CardinalSplineTo *ret = (cocos2d::CardinalSplineTo *)new cocos2d::CardinalSplineTo();
    int num_ret = olua_push_cppobj(L, ret, "cc.CardinalSplineTo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CardinalSplineTo_setPoints(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CardinalSplineTo *self = nullptr;
    cocos2d::PointArray *arg1 = nullptr;       /** points */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CardinalSplineTo");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.PointArray");

    // void setPoints(cocos2d::PointArray *points)
    self->setPoints(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_CardinalSplineTo_updatePosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CardinalSplineTo *self = nullptr;
    cocos2d::Vec2 arg1;       /** newPos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CardinalSplineTo");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void updatePosition(const cocos2d::Vec2 &newPos)
    self->updatePosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_CardinalSplineTo(lua_State *L)
{
    oluacls_class(L, "cc.CardinalSplineTo", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_CardinalSplineTo___move);
    oluacls_func(L, "create", _cocos2d_CardinalSplineTo_create);
    oluacls_func(L, "getPoints", _cocos2d_CardinalSplineTo_getPoints);
    oluacls_func(L, "new", _cocos2d_CardinalSplineTo_new);
    oluacls_func(L, "setPoints", _cocos2d_CardinalSplineTo_setPoints);
    oluacls_func(L, "updatePosition", _cocos2d_CardinalSplineTo_updatePosition);
    oluacls_prop(L, "points", _cocos2d_CardinalSplineTo_getPoints, _cocos2d_CardinalSplineTo_setPoints);

    olua_registerluatype<cocos2d::CardinalSplineTo>(L, "cc.CardinalSplineTo");

    return 1;
}

static int _cocos2d_CardinalSplineBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CardinalSplineBy *)olua_toobj(L, 1, "cc.CardinalSplineBy");
    olua_push_cppobj(L, self, "cc.CardinalSplineBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_CardinalSplineBy_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::PointArray *arg2 = nullptr;       /** points */
    lua_Number arg3 = 0;       /** tension */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.PointArray");
    olua_check_number(L, 3, &arg3);

    // static cocos2d::CardinalSplineBy *create(float duration, cocos2d::PointArray *points, float tension)
    cocos2d::CardinalSplineBy *ret = (cocos2d::CardinalSplineBy *)cocos2d::CardinalSplineBy::create((float)arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.CardinalSplineBy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CardinalSplineBy_new(lua_State *L)
{
    olua_startinvoke(L);

    // CardinalSplineBy()
    cocos2d::CardinalSplineBy *ret = (cocos2d::CardinalSplineBy *)new cocos2d::CardinalSplineBy();
    int num_ret = olua_push_cppobj(L, ret, "cc.CardinalSplineBy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_CardinalSplineBy(lua_State *L)
{
    oluacls_class(L, "cc.CardinalSplineBy", "cc.CardinalSplineTo");
    oluacls_func(L, "__move", _cocos2d_CardinalSplineBy___move);
    oluacls_func(L, "create", _cocos2d_CardinalSplineBy_create);
    oluacls_func(L, "new", _cocos2d_CardinalSplineBy_new);

    olua_registerluatype<cocos2d::CardinalSplineBy>(L, "cc.CardinalSplineBy");

    return 1;
}

static int _cocos2d_CatmullRomTo___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CatmullRomTo *)olua_toobj(L, 1, "cc.CatmullRomTo");
    olua_push_cppobj(L, self, "cc.CatmullRomTo");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_CatmullRomTo_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** dt */
    cocos2d::PointArray *arg2 = nullptr;       /** points */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.PointArray");

    // static cocos2d::CatmullRomTo *create(float dt, cocos2d::PointArray *points)
    cocos2d::CatmullRomTo *ret = (cocos2d::CatmullRomTo *)cocos2d::CatmullRomTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.CatmullRomTo");

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_CatmullRomTo(lua_State *L)
{
    oluacls_class(L, "cc.CatmullRomTo", "cc.CardinalSplineTo");
    oluacls_func(L, "__move", _cocos2d_CatmullRomTo___move);
    oluacls_func(L, "create", _cocos2d_CatmullRomTo_create);

    olua_registerluatype<cocos2d::CatmullRomTo>(L, "cc.CatmullRomTo");

    return 1;
}

static int _cocos2d_CatmullRomBy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CatmullRomBy *)olua_toobj(L, 1, "cc.CatmullRomBy");
    olua_push_cppobj(L, self, "cc.CatmullRomBy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_CatmullRomBy_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** dt */
    cocos2d::PointArray *arg2 = nullptr;       /** points */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.PointArray");

    // static cocos2d::CatmullRomBy *create(float dt, cocos2d::PointArray *points)
    cocos2d::CatmullRomBy *ret = (cocos2d::CatmullRomBy *)cocos2d::CatmullRomBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.CatmullRomBy");

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_CatmullRomBy(lua_State *L)
{
    oluacls_class(L, "cc.CatmullRomBy", "cc.CardinalSplineBy");
    oluacls_func(L, "__move", _cocos2d_CatmullRomBy___move);
    oluacls_func(L, "create", _cocos2d_CatmullRomBy_create);

    olua_registerluatype<cocos2d::CatmullRomBy>(L, "cc.CatmullRomBy");

    return 1;
}

static int _cocos2d_ActionInstant___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ActionInstant *)olua_toobj(L, 1, "cc.ActionInstant");
    olua_push_cppobj(L, self, "cc.ActionInstant");

    olua_endinvoke(L);

    return 1;
}

static int luaopen_cocos2d_ActionInstant(lua_State *L)
{
    oluacls_class(L, "cc.ActionInstant", "cc.FiniteTimeAction");
    oluacls_func(L, "__move", _cocos2d_ActionInstant___move);

    olua_registerluatype<cocos2d::ActionInstant>(L, "cc.ActionInstant");

    return 1;
}

static int _cocos2d_Show___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Show *)olua_toobj(L, 1, "cc.Show");
    olua_push_cppobj(L, self, "cc.Show");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Show_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Show *create()
    cocos2d::Show *ret = (cocos2d::Show *)cocos2d::Show::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Show");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Show_new(lua_State *L)
{
    olua_startinvoke(L);

    // Show()
    cocos2d::Show *ret = (cocos2d::Show *)new cocos2d::Show();
    int num_ret = olua_push_cppobj(L, ret, "cc.Show");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Show(lua_State *L)
{
    oluacls_class(L, "cc.Show", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_Show___move);
    oluacls_func(L, "create", _cocos2d_Show_create);
    oluacls_func(L, "new", _cocos2d_Show_new);

    olua_registerluatype<cocos2d::Show>(L, "cc.Show");

    return 1;
}

static int _cocos2d_Hide___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Hide *)olua_toobj(L, 1, "cc.Hide");
    olua_push_cppobj(L, self, "cc.Hide");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Hide_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Hide *create()
    cocos2d::Hide *ret = (cocos2d::Hide *)cocos2d::Hide::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Hide");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Hide_new(lua_State *L)
{
    olua_startinvoke(L);

    // Hide()
    cocos2d::Hide *ret = (cocos2d::Hide *)new cocos2d::Hide();
    int num_ret = olua_push_cppobj(L, ret, "cc.Hide");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Hide(lua_State *L)
{
    oluacls_class(L, "cc.Hide", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_Hide___move);
    oluacls_func(L, "create", _cocos2d_Hide_create);
    oluacls_func(L, "new", _cocos2d_Hide_new);

    olua_registerluatype<cocos2d::Hide>(L, "cc.Hide");

    return 1;
}

static int _cocos2d_ToggleVisibility___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ToggleVisibility *)olua_toobj(L, 1, "cc.ToggleVisibility");
    olua_push_cppobj(L, self, "cc.ToggleVisibility");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ToggleVisibility_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ToggleVisibility *create()
    cocos2d::ToggleVisibility *ret = (cocos2d::ToggleVisibility *)cocos2d::ToggleVisibility::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ToggleVisibility");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ToggleVisibility_new(lua_State *L)
{
    olua_startinvoke(L);

    // ToggleVisibility()
    cocos2d::ToggleVisibility *ret = (cocos2d::ToggleVisibility *)new cocos2d::ToggleVisibility();
    int num_ret = olua_push_cppobj(L, ret, "cc.ToggleVisibility");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ToggleVisibility(lua_State *L)
{
    oluacls_class(L, "cc.ToggleVisibility", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_ToggleVisibility___move);
    oluacls_func(L, "create", _cocos2d_ToggleVisibility_create);
    oluacls_func(L, "new", _cocos2d_ToggleVisibility_new);

    olua_registerluatype<cocos2d::ToggleVisibility>(L, "cc.ToggleVisibility");

    return 1;
}

static int _cocos2d_RemoveSelf___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::RemoveSelf *)olua_toobj(L, 1, "cc.RemoveSelf");
    olua_push_cppobj(L, self, "cc.RemoveSelf");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_RemoveSelf_create1(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** isNeedCleanUp */

    olua_check_bool(L, 1, &arg1);

    // static cocos2d::RemoveSelf *create(@optional bool isNeedCleanUp)
    cocos2d::RemoveSelf *ret = (cocos2d::RemoveSelf *)cocos2d::RemoveSelf::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.RemoveSelf");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RemoveSelf_create2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::RemoveSelf *create(@optional bool isNeedCleanUp)
    cocos2d::RemoveSelf *ret = (cocos2d::RemoveSelf *)cocos2d::RemoveSelf::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.RemoveSelf");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RemoveSelf_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::RemoveSelf *create(@optional bool isNeedCleanUp)
        return _cocos2d_RemoveSelf_create2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_bool(L, 1))) {
            // static cocos2d::RemoveSelf *create(@optional bool isNeedCleanUp)
            return _cocos2d_RemoveSelf_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RemoveSelf::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_RemoveSelf_new(lua_State *L)
{
    olua_startinvoke(L);

    // RemoveSelf()
    cocos2d::RemoveSelf *ret = (cocos2d::RemoveSelf *)new cocos2d::RemoveSelf();
    int num_ret = olua_push_cppobj(L, ret, "cc.RemoveSelf");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_RemoveSelf(lua_State *L)
{
    oluacls_class(L, "cc.RemoveSelf", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_RemoveSelf___move);
    oluacls_func(L, "create", _cocos2d_RemoveSelf_create);
    oluacls_func(L, "new", _cocos2d_RemoveSelf_new);

    olua_registerluatype<cocos2d::RemoveSelf>(L, "cc.RemoveSelf");

    return 1;
}

static int _cocos2d_FlipX___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FlipX *)olua_toobj(L, 1, "cc.FlipX");
    olua_push_cppobj(L, self, "cc.FlipX");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FlipX_create(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** x */

    olua_check_bool(L, 1, &arg1);

    // static cocos2d::FlipX *create(bool x)
    cocos2d::FlipX *ret = (cocos2d::FlipX *)cocos2d::FlipX::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.FlipX");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FlipX_new(lua_State *L)
{
    olua_startinvoke(L);

    // FlipX()
    cocos2d::FlipX *ret = (cocos2d::FlipX *)new cocos2d::FlipX();
    int num_ret = olua_push_cppobj(L, ret, "cc.FlipX");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FlipX(lua_State *L)
{
    oluacls_class(L, "cc.FlipX", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_FlipX___move);
    oluacls_func(L, "create", _cocos2d_FlipX_create);
    oluacls_func(L, "new", _cocos2d_FlipX_new);

    olua_registerluatype<cocos2d::FlipX>(L, "cc.FlipX");

    return 1;
}

static int _cocos2d_FlipY___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FlipY *)olua_toobj(L, 1, "cc.FlipY");
    olua_push_cppobj(L, self, "cc.FlipY");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FlipY_create(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** y */

    olua_check_bool(L, 1, &arg1);

    // static cocos2d::FlipY *create(bool y)
    cocos2d::FlipY *ret = (cocos2d::FlipY *)cocos2d::FlipY::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.FlipY");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FlipY_new(lua_State *L)
{
    olua_startinvoke(L);

    // FlipY()
    cocos2d::FlipY *ret = (cocos2d::FlipY *)new cocos2d::FlipY();
    int num_ret = olua_push_cppobj(L, ret, "cc.FlipY");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FlipY(lua_State *L)
{
    oluacls_class(L, "cc.FlipY", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_FlipY___move);
    oluacls_func(L, "create", _cocos2d_FlipY_create);
    oluacls_func(L, "new", _cocos2d_FlipY_new);

    olua_registerluatype<cocos2d::FlipY>(L, "cc.FlipY");

    return 1;
}

static int _cocos2d_Place___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Place *)olua_toobj(L, 1, "cc.Place");
    olua_push_cppobj(L, self, "cc.Place");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Place_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vec2 arg1;       /** pos */

    auto_olua_check_cocos2d_Vec2(L, 1, &arg1);

    // static cocos2d::Place *create(const cocos2d::Vec2 &pos)
    cocos2d::Place *ret = (cocos2d::Place *)cocos2d::Place::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Place");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Place_new(lua_State *L)
{
    olua_startinvoke(L);

    // Place()
    cocos2d::Place *ret = (cocos2d::Place *)new cocos2d::Place();
    int num_ret = olua_push_cppobj(L, ret, "cc.Place");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Place(lua_State *L)
{
    oluacls_class(L, "cc.Place", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_Place___move);
    oluacls_func(L, "create", _cocos2d_Place_create);
    oluacls_func(L, "new", _cocos2d_Place_new);

    olua_registerluatype<cocos2d::Place>(L, "cc.Place");

    return 1;
}

static int _cocos2d_CallFunc___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CallFunc *)olua_toobj(L, 1, "cc.CallFunc");
    olua_push_cppobj(L, self, "cc.CallFunc");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_CallFunc_create(lua_State *L)
{
    olua_startinvoke(L);

    std::function<void()> arg1;       /** func */

    cocos2d::CallFunc *self = new cocos2d::CallFunc();
    cocos2d::CallFunc *ret = self;
    olua_push_cppobj<cocos2d::CallFunc>(L, self);
    olua_postnew(L, ret);

    void *callback_store_obj = (void *)self;
    std::string tag = "CallFunc";
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 1, OLUA_TAG_NEW);
    lua_State *MT = olua_mainthread();
    arg1 = [callback_store_obj, func, MT]() {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        }
    };

    // static CallFunc * create(const std::function<void()>& func)
    self->initWithFunction(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.CallFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CallFunc_execute(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CallFunc *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.CallFunc");

    // void execute()
    self->execute();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_CallFunc_getTargetCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CallFunc *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.CallFunc");

    // cocos2d::Ref *getTargetCallback()
    cocos2d::Ref *ret = (cocos2d::Ref *)self->getTargetCallback();
    int num_ret = olua_push_cppobj(L, ret, "cc.Ref");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CallFunc_new(lua_State *L)
{
    olua_startinvoke(L);

    // CallFunc()
    cocos2d::CallFunc *ret = (cocos2d::CallFunc *)new cocos2d::CallFunc();
    int num_ret = olua_push_cppobj(L, ret, "cc.CallFunc");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CallFunc_setTargetCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CallFunc *self = nullptr;
    cocos2d::Ref *arg1 = nullptr;       /** sel */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CallFunc");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Ref");

    // void setTargetCallback(cocos2d::Ref *sel)
    self->setTargetCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_CallFunc(lua_State *L)
{
    oluacls_class(L, "cc.CallFunc", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_CallFunc___move);
    oluacls_func(L, "create", _cocos2d_CallFunc_create);
    oluacls_func(L, "execute", _cocos2d_CallFunc_execute);
    oluacls_func(L, "getTargetCallback", _cocos2d_CallFunc_getTargetCallback);
    oluacls_func(L, "new", _cocos2d_CallFunc_new);
    oluacls_func(L, "setTargetCallback", _cocos2d_CallFunc_setTargetCallback);
    oluacls_prop(L, "targetCallback", _cocos2d_CallFunc_getTargetCallback, _cocos2d_CallFunc_setTargetCallback);

    olua_registerluatype<cocos2d::CallFunc>(L, "cc.CallFunc");

    return 1;
}

static int _cocos2d_Component___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Component *)olua_toobj(L, 1, "cc.Component");
    olua_push_cppobj(L, self, "cc.Component");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Component_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Component *create()
    cocos2d::Component *ret = (cocos2d::Component *)cocos2d::Component::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Component");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Component_getName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // const std::string &getName()
    const std::string &ret = (const std::string &)self->getName();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Component_getOwner(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // @ref(single owner) cocos2d::Node *getOwner()
    cocos2d::Node *ret = (cocos2d::Node *)self->getOwner();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    // inject code after call
    olua_singleref(L, 1, "owner", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Component_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // bool init()
    bool ret = (bool)self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Component_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Component_new(lua_State *L)
{
    olua_startinvoke(L);

    // Component()
    cocos2d::Component *ret = (cocos2d::Component *)new cocos2d::Component();
    int num_ret = olua_push_cppobj(L, ret, "cc.Component");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Component_serialize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    void *arg1 = nullptr;       /** r */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // bool serialize(void *r)
    bool ret = (bool)self->serialize(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Component_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Component_setName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_std_string(L, 2, &arg1);

    // void setName(const std::string &name)
    self->setName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Component_setOwner(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** owner */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setOwner(@ref(single owner) cocos2d::Node *owner)
    self->setOwner(arg1);

    // inject code after call
    olua_singleref(L, 1, "owner", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Component_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    lua_Number arg1 = 0;       /** delta */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_number(L, 2, &arg1);

    // void update(float delta)
    self->update((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Component(lua_State *L)
{
    oluacls_class(L, "cc.Component", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Component___move);
    oluacls_func(L, "create", _cocos2d_Component_create);
    oluacls_func(L, "getName", _cocos2d_Component_getName);
    oluacls_func(L, "getOwner", _cocos2d_Component_getOwner);
    oluacls_func(L, "init", _cocos2d_Component_init);
    oluacls_func(L, "isEnabled", _cocos2d_Component_isEnabled);
    oluacls_func(L, "new", _cocos2d_Component_new);
    oluacls_func(L, "serialize", _cocos2d_Component_serialize);
    oluacls_func(L, "setEnabled", _cocos2d_Component_setEnabled);
    oluacls_func(L, "setName", _cocos2d_Component_setName);
    oluacls_func(L, "setOwner", _cocos2d_Component_setOwner);
    oluacls_func(L, "update", _cocos2d_Component_update);
    oluacls_prop(L, "enabled", _cocos2d_Component_isEnabled, _cocos2d_Component_setEnabled);
    oluacls_prop(L, "name", _cocos2d_Component_getName, _cocos2d_Component_setName);
    oluacls_prop(L, "owner", _cocos2d_Component_getOwner, _cocos2d_Component_setOwner);

    olua_registerluatype<cocos2d::Component>(L, "cc.Component");

    return 1;
}

static int _cocos2d_LuaComponent___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::LuaComponent *)olua_toobj(L, 1, "cc.LuaComponent");
    olua_push_cppobj(L, self, "cc.LuaComponent");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_LuaComponent_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LuaComponent *create()
    cocos2d::LuaComponent *ret = (cocos2d::LuaComponent *)cocos2d::LuaComponent::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.LuaComponent");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaComponent_new(lua_State *L)
{
    olua_startinvoke(L);

    // LuaComponent()
    cocos2d::LuaComponent *ret = (cocos2d::LuaComponent *)new cocos2d::LuaComponent();
    int num_ret = olua_push_cppobj(L, ret, "cc.LuaComponent");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaComponent_get_onAddCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = "onAdd";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void ()> onAddCallback
    std::function<void()> ret = (std::function<void()>)self->onAddCallback;
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onAddCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void()> arg1;       /** onAddCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onAdd";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT]() {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);

                olua_callback(L, callback_store_obj, func.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onAdd";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void ()> onAddCallback
    self->onAddCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LuaComponent_get_onEnterCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = "onEnter";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void ()> onEnterCallback
    std::function<void()> ret = (std::function<void()>)self->onEnterCallback;
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onEnterCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void()> arg1;       /** onEnterCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onEnter";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT]() {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);

                olua_callback(L, callback_store_obj, func.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onEnter";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void ()> onEnterCallback
    self->onEnterCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LuaComponent_get_onExitCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = "onExit";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void ()> onExitCallback
    std::function<void()> ret = (std::function<void()>)self->onExitCallback;
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onExitCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void()> arg1;       /** onExitCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onExit";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT]() {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);

                olua_callback(L, callback_store_obj, func.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onExit";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void ()> onExitCallback
    self->onExitCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LuaComponent_get_onRemoveCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = "onRemove";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void ()> onRemoveCallback
    std::function<void()> ret = (std::function<void()>)self->onRemoveCallback;
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onRemoveCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void()> arg1;       /** onRemoveCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onRemove";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT]() {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);

                olua_callback(L, callback_store_obj, func.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onRemove";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void ()> onRemoveCallback
    self->onRemoveCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LuaComponent_get_onUpdateCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = "onUpdate";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local std::function<void (float)> onUpdateCallback
    std::function<void(float)> ret = (std::function<void(float)>)self->onUpdateCallback;
    int num_ret = olua_push_std_function(L, (std::function<void(float)>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onUpdateCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void(float)> arg1;       /** onUpdateCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "onUpdate";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT](float arg1) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                olua_push_number(L, (lua_Number)arg1);

                olua_callback(L, callback_store_obj, func.c_str(), 1);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "onUpdate";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // @nullable @local std::function<void (float)> onUpdateCallback
    self->onUpdateCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_LuaComponent(lua_State *L)
{
    oluacls_class(L, "cc.LuaComponent", "cc.Component");
    oluacls_func(L, "__move", _cocos2d_LuaComponent___move);
    oluacls_func(L, "create", _cocos2d_LuaComponent_create);
    oluacls_func(L, "new", _cocos2d_LuaComponent_new);
    oluacls_prop(L, "onAdd", _cocos2d_LuaComponent_get_onAddCallback, _cocos2d_LuaComponent_set_onAddCallback);
    oluacls_prop(L, "onEnter", _cocos2d_LuaComponent_get_onEnterCallback, _cocos2d_LuaComponent_set_onEnterCallback);
    oluacls_prop(L, "onExit", _cocos2d_LuaComponent_get_onExitCallback, _cocos2d_LuaComponent_set_onExitCallback);
    oluacls_prop(L, "onRemove", _cocos2d_LuaComponent_get_onRemoveCallback, _cocos2d_LuaComponent_set_onRemoveCallback);
    oluacls_prop(L, "onUpdate", _cocos2d_LuaComponent_get_onUpdateCallback, _cocos2d_LuaComponent_set_onUpdateCallback);

    olua_registerluatype<cocos2d::LuaComponent>(L, "cc.LuaComponent");

    return 1;
}

static cocos2d::Node *_find_ancestor(cocos2d::Node *node1, cocos2d::Node *node2)
{
    for (auto *p1 = node1; p1 != nullptr; p1 = p1->getParent()) {
        for (auto *p2 = node2; p2 != nullptr; p2 = p2->getParent()) {
            if (p1 == p2) {
                return p1;
            }
        }
    }
    return NULL;
}

static int _cocos2d_Node___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    olua_push_cppobj(L, self, "cc.Node");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Node_addChild1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void addChild(@ref(map children) cocos2d::Node *child)
    self->addChild(arg1);

    // inject code after call
    olua_mapref(L, 1, "children", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_addChild2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    lua_Integer arg2 = 0;       /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void addChild(@ref(map children) cocos2d::Node *child, int localZOrder)
    self->addChild(arg1, (int)arg2);

    // inject code after call
    olua_mapref(L, 1, "children", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_addChild3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    lua_Integer arg2 = 0;       /** localZOrder */
    lua_Integer arg3 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void addChild(@ref(map children) cocos2d::Node *child, int localZOrder, int tag)
    self->addChild(arg1, (int)arg2, (int)arg3);

    // inject code after call
    olua_mapref(L, 1, "children", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_addChild4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    lua_Integer arg2 = 0;       /** localZOrder */
    std::string arg3;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    // void addChild(@ref(map children) cocos2d::Node *child, int localZOrder, const std::string &name)
    self->addChild(arg1, (int)arg2, arg3);

    // inject code after call
    olua_mapref(L, 1, "children", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_addChild(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // void addChild(@ref(map children) cocos2d::Node *child)
            return _cocos2d_Node_addChild1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_int(L, 3))) {
            // void addChild(@ref(map children) cocos2d::Node *child, int localZOrder)
            return _cocos2d_Node_addChild2(L);
        // }
    }

    if (num_args == 3) {
        if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_int(L, 3)) && (olua_is_int(L, 4))) {
            // void addChild(@ref(map children) cocos2d::Node *child, int localZOrder, int tag)
            return _cocos2d_Node_addChild3(L);
        }

        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_int(L, 3)) && (olua_is_std_string(L, 4))) {
            // void addChild(@ref(map children) cocos2d::Node *child, int localZOrder, const std::string &name)
            return _cocos2d_Node_addChild4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::addChild' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_addComponent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Component *arg1 = nullptr;       /** component */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Component");

    // bool addComponent(@ref(map components) cocos2d::Component *component)
    bool ret = (bool)self->addComponent(arg1);
    int num_ret = olua_push_bool(L, ret);

    // inject code after call
    olua_mapref(L, 1, "components", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_cleanup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void cleanup()
    self->cleanup();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_convertToNodeSpace1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToNodeSpace(const cocos2d::Vec2 &worldPoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToNodeSpace(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_convertToNodeSpace2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToNodeSpace(@pack const cocos2d::Vec2 &worldPoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToNodeSpace(arg1);
    int num_ret = auto_olua_unpack_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_convertToNodeSpace(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToNodeSpace(const cocos2d::Vec2 &worldPoint)
            return _cocos2d_Node_convertToNodeSpace1(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_ispack_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToNodeSpace(@pack const cocos2d::Vec2 &worldPoint)
            return _cocos2d_Node_convertToNodeSpace2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToNodeSpace' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_convertToNodeSpaceAR1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToNodeSpaceAR(const cocos2d::Vec2 &worldPoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToNodeSpaceAR(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_convertToNodeSpaceAR2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToNodeSpaceAR(@pack const cocos2d::Vec2 &worldPoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToNodeSpaceAR(arg1);
    int num_ret = auto_olua_unpack_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_convertToNodeSpaceAR(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToNodeSpaceAR(const cocos2d::Vec2 &worldPoint)
            return _cocos2d_Node_convertToNodeSpaceAR1(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_ispack_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToNodeSpaceAR(@pack const cocos2d::Vec2 &worldPoint)
            return _cocos2d_Node_convertToNodeSpaceAR2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToNodeSpaceAR' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_convertToWorldSpace1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToWorldSpace(const cocos2d::Vec2 &nodePoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToWorldSpace(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_convertToWorldSpace2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToWorldSpace(@pack const cocos2d::Vec2 &nodePoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToWorldSpace(arg1);
    int num_ret = auto_olua_unpack_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_convertToWorldSpace(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToWorldSpace(const cocos2d::Vec2 &nodePoint)
            return _cocos2d_Node_convertToWorldSpace1(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_ispack_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToWorldSpace(@pack const cocos2d::Vec2 &nodePoint)
            return _cocos2d_Node_convertToWorldSpace2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToWorldSpace' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_convertToWorldSpaceAR1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToWorldSpaceAR(const cocos2d::Vec2 &nodePoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToWorldSpaceAR(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_convertToWorldSpaceAR2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_pack_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 convertToWorldSpaceAR(@pack const cocos2d::Vec2 &nodePoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToWorldSpaceAR(arg1);
    int num_ret = auto_olua_unpack_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_convertToWorldSpaceAR(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToWorldSpaceAR(const cocos2d::Vec2 &nodePoint)
            return _cocos2d_Node_convertToWorldSpaceAR1(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_ispack_cocos2d_Vec2(L, 2))) {
            // cocos2d::Vec2 convertToWorldSpaceAR(@pack const cocos2d::Vec2 &nodePoint)
            return _cocos2d_Node_convertToWorldSpaceAR2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToWorldSpaceAR' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_convertTouchToNodeSpace(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Touch");

    // cocos2d::Vec2 convertTouchToNodeSpace(cocos2d::Touch *touch)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertTouchToNodeSpace(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_convertTouchToNodeSpaceAR(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Touch");

    // cocos2d::Vec2 convertTouchToNodeSpaceAR(cocos2d::Touch *touch)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertTouchToNodeSpaceAR(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Node *create()
    cocos2d::Node *ret = (cocos2d::Node *)cocos2d::Node::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_draw1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Renderer *arg1 = nullptr;       /** renderer */
    cocos2d::Mat4 arg2;       /** transform */
    lua_Unsigned arg3 = 0;       /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Renderer");
    manual_olua_check_cocos2d_Mat4(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // void draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)
    self->draw(arg1, arg2, (uint32_t)arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_draw2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void draw()
    self->draw();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_draw(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // void draw()
        return _cocos2d_Node_draw2(L);
    }

    if (num_args == 3) {
        // if ((olua_is_cppobj(L, 2, "cc.Renderer")) && (manual_olua_is_cocos2d_Mat4(L, 3)) && (olua_is_uint(L, 4))) {
            // void draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)
            return _cocos2d_Node_draw1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::draw' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getActionByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // @ref(map actions) cocos2d::Action *getActionByTag(int tag)
    cocos2d::Action *ret = (cocos2d::Action *)self->getActionByTag((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Action");

    // inject code after call
    olua_mapref(L, 1, "actions", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getActionManager(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @ref(single actionManager) cocos2d::ActionManager *getActionManager()
    cocos2d::ActionManager *ret = (cocos2d::ActionManager *)self->getActionManager();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionManager");

    // inject code after call
    olua_singleref(L, 1, "actionManager", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Vec2 &getAnchorPoint()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getAnchorPoint();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getAnchorPointInPoints(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Vec2 &getAnchorPointInPoints()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getAnchorPointInPoints();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getAttachedNodeCount(lua_State *L)
{
    olua_startinvoke(L);

    // static int getAttachedNodeCount()
    int ret = (int)cocos2d::Node::getAttachedNodeCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getBoundingBox(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::Rect getBoundingBox()
    cocos2d::Rect ret = (cocos2d::Rect)self->getBoundingBox();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getBounds(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_checkobj<cocos2d::Node>(L, 1);
    auto target = olua_checkobj<cocos2d::Node>(L, 2);

    float left = luaL_checknumber(L, 3);
    float right = luaL_checknumber(L, 4);
    float top = luaL_checknumber(L, 5);
    float bottom = luaL_checknumber(L, 6);

    cocos2d::Vec3 p1(left, bottom, 0);
    cocos2d::Vec3 p2(right, top, 0);

    auto m = cocos2d::Mat4::IDENTITY;

    if (target == self->getParent()) {
        m = self->getNodeToParentTransform();
    } else if (target != self) {
        auto ancestor = _find_ancestor(target, self);
        if (!ancestor) {
            m = target->getWorldToNodeTransform() * self->getNodeToWorldTransform();
        } else if (target == ancestor) {
            m = self->getNodeToParentTransform(target);
        } else if (self == ancestor) {
            m = target->getNodeToParentTransform(self).getInversed();
        } else {
            m = target->getNodeToParentTransform(ancestor).getInversed() * self->getNodeToParentTransform(ancestor);
        }
    }

    m.transformPoint(&p1);
    m.transformPoint(&p2);

    left = MIN(p1.x, p2.x);
    right = MAX(p1.x, p2.x);
    top = MAX(p1.y, p2.y);
    bottom = MIN(p1.y, p2.y);

    lua_pushnumber(L, left);
    lua_pushnumber(L, right);
    lua_pushnumber(L, top);
    lua_pushnumber(L, bottom);

    olua_endinvoke(L);

    return 4;
}

static int _cocos2d_Node_getCameraMask(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // unsigned short getCameraMask()
    unsigned short ret = (unsigned short)self->getCameraMask();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getChildByName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // @ref(map children) cocos2d::Node *getChildByName(const std::string &name)
    cocos2d::Node *ret = (cocos2d::Node *)self->getChildByName(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    // inject code after call
    olua_mapref(L, 1, "children", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getChildByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // @ref(map children) cocos2d::Node *getChildByTag(int tag)
    cocos2d::Node *ret = (cocos2d::Node *)self->getChildByTag((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    // inject code after call
    olua_mapref(L, 1, "children", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @ref(map children) Vector<cocos2d::Node *> &getChildren()
    cocos2d::Vector<cocos2d::Node *> &ret = (cocos2d::Vector<cocos2d::Node *> &)self->getChildren();
    int num_ret = manual_olua_push_cocos2d_Vector(L, ret, "cc.Node");

    // inject code after call
    olua_maprefarray(L, 1, "children", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getChildrenCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // ssize_t getChildrenCount()
    ssize_t ret = (ssize_t)self->getChildrenCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Color3B &getColor()
    const cocos2d::Color3B &ret = (const cocos2d::Color3B &)self->getColor();
    int num_ret = manual_olua_push_cocos2d_Color3B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getComponent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // @ref(map components) cocos2d::Component *getComponent(const std::string &name)
    cocos2d::Component *ret = (cocos2d::Component *)self->getComponent(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Component");

    // inject code after call
    olua_mapref(L, 1, "components", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getContentSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Size &getContentSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getContentSize();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getDescription(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getDisplayedColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Color3B &getDisplayedColor()
    const cocos2d::Color3B &ret = (const cocos2d::Color3B &)self->getDisplayedColor();
    int num_ret = manual_olua_push_cocos2d_Color3B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getDisplayedOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // GLubyte getDisplayedOpacity()
    GLubyte ret = (GLubyte)self->getDisplayedOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getEventDispatcher(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @ref(single eventDispatcher) cocos2d::EventDispatcher *getEventDispatcher()
    cocos2d::EventDispatcher *ret = (cocos2d::EventDispatcher *)self->getEventDispatcher();
    int num_ret = olua_push_cppobj(L, ret, "cc.EventDispatcher");

    // inject code after call
    olua_singleref(L, 1, "eventDispatcher", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @ref(single glProgram) cocos2d::GLProgram *getGLProgram()
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)self->getGLProgram();
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgram");

    // inject code after call
    olua_singleref(L, 1, "glProgram", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getGLProgramState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @ref(single glProgramState) cocos2d::GLProgramState *getGLProgramState()
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)self->getGLProgramState();
    int num_ret = olua_push_cppobj(L, ret, "cc.GLProgramState");

    // inject code after call
    olua_singleref(L, 1, "glProgramState", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getGlobalZOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getGlobalZOrder()
    float ret = (float)self->getGlobalZOrder();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getLocalZOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // std::int32_t getLocalZOrder()
    std::int32_t ret = (std::int32_t)self->getLocalZOrder();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const std::string &getName()
    const std::string &ret = (const std::string &)self->getName();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getNodeToParentAffineTransform1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::AffineTransform getNodeToParentAffineTransform()
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getNodeToParentAffineTransform();
    int num_ret = auto_olua_push_cocos2d_AffineTransform(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getNodeToParentAffineTransform2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** ancestor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // cocos2d::AffineTransform getNodeToParentAffineTransform(cocos2d::Node *ancestor)
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getNodeToParentAffineTransform(arg1);
    int num_ret = auto_olua_push_cocos2d_AffineTransform(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getNodeToParentAffineTransform(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // cocos2d::AffineTransform getNodeToParentAffineTransform()
        return _cocos2d_Node_getNodeToParentAffineTransform1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // cocos2d::AffineTransform getNodeToParentAffineTransform(cocos2d::Node *ancestor)
            return _cocos2d_Node_getNodeToParentAffineTransform2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::getNodeToParentAffineTransform' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getNodeToParentTransform1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Mat4 &getNodeToParentTransform()
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getNodeToParentTransform();
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getNodeToParentTransform2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** ancestor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // cocos2d::Mat4 getNodeToParentTransform(cocos2d::Node *ancestor)
    cocos2d::Mat4 ret = (cocos2d::Mat4)self->getNodeToParentTransform(arg1);
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getNodeToParentTransform(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // const cocos2d::Mat4 &getNodeToParentTransform()
        return _cocos2d_Node_getNodeToParentTransform1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // cocos2d::Mat4 getNodeToParentTransform(cocos2d::Node *ancestor)
            return _cocos2d_Node_getNodeToParentTransform2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::getNodeToParentTransform' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getNodeToWorldAffineTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::AffineTransform getNodeToWorldAffineTransform()
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getNodeToWorldAffineTransform();
    int num_ret = auto_olua_push_cocos2d_AffineTransform(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getNodeToWorldTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::Mat4 getNodeToWorldTransform()
    cocos2d::Mat4 ret = (cocos2d::Mat4)self->getNodeToWorldTransform();
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getNormalizedPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Vec2 &getNormalizedPosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getNormalizedPosition();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getNumberOfRunningActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // ssize_t getNumberOfRunningActions()
    ssize_t ret = (ssize_t)self->getNumberOfRunningActions();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getNumberOfRunningActionsByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // ssize_t getNumberOfRunningActionsByTag(int tag)
    ssize_t ret = (ssize_t)self->getNumberOfRunningActionsByTag((int)arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getOnEnterCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    void *callback_store_obj = (void *)self;
    std::string tag = "OnEnterCallback";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local const std::function<void ()> &getOnEnterCallback()
    std::function<void()> ret = (std::function<void()>)self->getOnEnterCallback();
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getOnEnterTransitionDidFinishCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    void *callback_store_obj = (void *)self;
    std::string tag = "OnEnterTransitionDidFinishCallback";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local const std::function<void ()> &getOnEnterTransitionDidFinishCallback()
    std::function<void()> ret = (std::function<void()>)self->getOnEnterTransitionDidFinishCallback();
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getOnExitCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    void *callback_store_obj = (void *)self;
    std::string tag = "OnExitCallback";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local const std::function<void ()> &getOnExitCallback()
    std::function<void()> ret = (std::function<void()>)self->getOnExitCallback();
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getOnExitTransitionDidStartCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    void *callback_store_obj = (void *)self;
    std::string tag = "OnExitTransitionDidStartCallback";
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // @nullable @local const std::function<void ()> &getOnExitTransitionDidStartCallback()
    std::function<void()> ret = (std::function<void()>)self->getOnExitTransitionDidStartCallback();
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // GLubyte getOpacity()
    GLubyte ret = (GLubyte)self->getOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getParent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::Node *getParent()
    cocos2d::Node *ret = (cocos2d::Node *)self->getParent();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getParentToNodeAffineTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::AffineTransform getParentToNodeAffineTransform()
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getParentToNodeAffineTransform();
    int num_ret = auto_olua_push_cocos2d_AffineTransform(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getParentToNodeTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Mat4 &getParentToNodeTransform()
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getParentToNodeTransform();
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getPhysicsBody(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @ref(single physicsBody) cocos2d::PhysicsBody *getPhysicsBody()
    cocos2d::PhysicsBody *ret = (cocos2d::PhysicsBody *)self->getPhysicsBody();
    int num_ret = olua_push_cppobj(L, ret, "cc.PhysicsBody");

    // inject code after call
    olua_singleref(L, 1, "physicsBody", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Vec2 &getPosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPosition();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getPosition3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::Vec3 getPosition3D()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getPosition3D();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getPositionNormalized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const cocos2d::Vec2 &getPositionNormalized()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPositionNormalized();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getPositionX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getPositionX()
    float ret = (float)self->getPositionX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getPositionY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getPositionY()
    float ret = (float)self->getPositionY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getPositionZ(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getPositionZ()
    float ret = (float)self->getPositionZ();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getRotation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getRotation()
    float ret = (float)self->getRotation();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getRotation3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::Vec3 getRotation3D()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getRotation3D();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getRotationQuat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::Quaternion getRotationQuat()
    cocos2d::Quaternion ret = (cocos2d::Quaternion)self->getRotationQuat();
    int num_ret = auto_olua_push_cocos2d_Quaternion(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getRotationSkewX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getRotationSkewX()
    float ret = (float)self->getRotationSkewX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getRotationSkewY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getRotationSkewY()
    float ret = (float)self->getRotationSkewY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getScale(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getScale()
    float ret = (float)self->getScale();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getScaleX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getScaleX()
    float ret = (float)self->getScaleX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getScaleY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getScaleY()
    float ret = (float)self->getScaleY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getScaleZ(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getScaleZ()
    float ret = (float)self->getScaleZ();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::Scene *getScene()
    cocos2d::Scene *ret = (cocos2d::Scene *)self->getScene();
    int num_ret = olua_push_cppobj(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getScheduler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @ref(single scheduler) cocos2d::Scheduler *getScheduler()
    cocos2d::Scheduler *ret = (cocos2d::Scheduler *)self->getScheduler();
    int num_ret = olua_push_cppobj(L, ret, "cc.Scheduler");

    // inject code after call
    olua_singleref(L, 1, "scheduler", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getSkewX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getSkewX()
    float ret = (float)self->getSkewX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getSkewY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getSkewY()
    float ret = (float)self->getSkewY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // int getTag()
    int ret = (int)self->getTag();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void *getUserData()
    void *ret = (void *)self->getUserData();
    int num_ret = olua_push_obj(L, ret, "void *");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getUserObject(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::Ref *getUserObject()
    cocos2d::Ref *ret = (cocos2d::Ref *)self->getUserObject();
    int num_ret = olua_push_cppobj(L, ret, "cc.Ref");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getWorldToNodeAffineTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::AffineTransform getWorldToNodeAffineTransform()
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getWorldToNodeAffineTransform();
    int num_ret = auto_olua_push_cocos2d_AffineTransform(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_getWorldToNodeTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // cocos2d::Mat4 getWorldToNodeTransform()
    cocos2d::Mat4 ret = (cocos2d::Mat4)self->getWorldToNodeTransform();
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool init()
    bool ret = (bool)self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_isCascadeColorEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isCascadeColorEnabled()
    bool ret = (bool)self->isCascadeColorEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_isCascadeOpacityEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isCascadeOpacityEnabled()
    bool ret = (bool)self->isCascadeOpacityEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_isIgnoreAnchorPointForPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isIgnoreAnchorPointForPosition()
    bool ret = (bool)self->isIgnoreAnchorPointForPosition();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_isOpacityModifyRGB(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isOpacityModifyRGB()
    bool ret = (bool)self->isOpacityModifyRGB();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_isRunning(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isRunning()
    bool ret = (bool)self->isRunning();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_isScheduled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // bool isScheduled(const std::string &key)
    bool ret = (bool)self->isScheduled(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_isVisible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isVisible()
    bool ret = (bool)self->isVisible();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_new(lua_State *L)
{
    olua_startinvoke(L);

    // Node()
    cocos2d::Node *ret = (cocos2d::Node *)new cocos2d::Node();
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_onEnter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void onEnter()
    self->onEnter();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_onEnterTransitionDidFinish(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void onEnterTransitionDidFinish()
    self->onEnterTransitionDidFinish();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_onExit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void onExit()
    self->onExit();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_onExitTransitionDidStart(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void onExitTransitionDidStart()
    self->onExitTransitionDidStart();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_pause(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void pause()
    self->pause();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeAllChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @unref(all children) void removeAllChildren()
    self->removeAllChildren();

    // inject code after call
    olua_unrefall(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeAllChildrenWithCleanup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // @unref(all children) void removeAllChildrenWithCleanup(bool cleanup)
    self->removeAllChildrenWithCleanup(arg1);

    // inject code after call
    olua_unrefall(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeAllComponents(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @unref(all components) void removeAllComponents()
    self->removeAllComponents();

    // inject code after call
    olua_unrefall(L, 1, "components");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeChild1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    bool arg2 = false;       /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // void removeChild(@unref(map children) cocos2d::Node *child, @optional bool cleanup)
    self->removeChild(arg1, arg2);

    // inject code after call
    olua_mapunref(L, 1, "children", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeChild2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void removeChild(@unref(map children) cocos2d::Node *child, @optional bool cleanup)
    self->removeChild(arg1);

    // inject code after call
    olua_mapunref(L, 1, "children", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeChild(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // void removeChild(@unref(map children) cocos2d::Node *child, @optional bool cleanup)
            return _cocos2d_Node_removeChild2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void removeChild(@unref(map children) cocos2d::Node *child, @optional bool cleanup)
            return _cocos2d_Node_removeChild1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::removeChild' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_removeChildByName1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */
    bool arg2 = false;       /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // inject code before call
    olua_startcmpunref(L, 1, "children");

    // @unref(cmp children) void removeChildByName(const std::string &name, @optional bool cleanup)
    self->removeChildByName(arg1, arg2);

    // inject code after call
    olua_endcmpunref(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeChildByName2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "children");

    // @unref(cmp children) void removeChildByName(const std::string &name, @optional bool cleanup)
    self->removeChildByName(arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeChildByName(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // @unref(cmp children) void removeChildByName(const std::string &name, @optional bool cleanup)
            return _cocos2d_Node_removeChildByName2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_bool(L, 3))) {
            // @unref(cmp children) void removeChildByName(const std::string &name, @optional bool cleanup)
            return _cocos2d_Node_removeChildByName1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::removeChildByName' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_removeChildByTag1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */
    bool arg2 = false;       /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // inject code before call
    olua_startcmpunref(L, 1, "children");

    // @unref(cmp children) void removeChildByTag(int tag, @optional bool cleanup)
    self->removeChildByTag((int)arg1, arg2);

    // inject code after call
    olua_endcmpunref(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeChildByTag2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "children");

    // @unref(cmp children) void removeChildByTag(int tag, @optional bool cleanup)
    self->removeChildByTag((int)arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeChildByTag(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_int(L, 2))) {
            // @unref(cmp children) void removeChildByTag(int tag, @optional bool cleanup)
            return _cocos2d_Node_removeChildByTag2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_int(L, 2)) && (olua_is_bool(L, 3))) {
            // @unref(cmp children) void removeChildByTag(int tag, @optional bool cleanup)
            return _cocos2d_Node_removeChildByTag1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::removeChildByTag' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_removeComponent1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "components");

    // @unref(cmp components) bool removeComponent(const std::string &name)
    bool ret = (bool)self->removeComponent(arg1);
    int num_ret = olua_push_bool(L, ret);

    // inject code after call
    olua_endcmpunref(L, 1, "components");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_removeComponent2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Component *arg1 = nullptr;       /** component */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Component");

    // inject code before call
    olua_startcmpunref(L, 1, "components");

    // @unref(cmp components) bool removeComponent(cocos2d::Component *component)
    bool ret = (bool)self->removeComponent(arg1);
    int num_ret = olua_push_bool(L, ret);

    // inject code after call
    olua_endcmpunref(L, 1, "components");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_removeComponent(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if ((olua_is_std_string(L, 2))) {
            // @unref(cmp components) bool removeComponent(const std::string &name)
            return _cocos2d_Node_removeComponent1(L);
        }

        // if ((olua_is_cppobj(L, 2, "cc.Component"))) {
            // @unref(cmp components) bool removeComponent(cocos2d::Component *component)
            return _cocos2d_Node_removeComponent2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::removeComponent' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_removeFromParent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // inject code before call
    if (!self->getParent()) {
        return 0;
    }
    olua_push_cppobj<cocos2d::Node>(L, self->getParent());
    int parent = lua_gettop(L);

    // @unref(map children parent) void removeFromParent()
    self->removeFromParent();

    // inject code after call
    olua_mapunref(L, parent, "children", 1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_removeFromParentAndCleanup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // inject code before call
    if (!self->getParent()) {
        return 0;
    }
    olua_push_cppobj<cocos2d::Node>(L, self->getParent());
    int parent = lua_gettop(L);

    // @unref(map children parent) void removeFromParentAndCleanup(bool cleanup)
    self->removeFromParentAndCleanup(arg1);

    // inject code after call
    olua_mapunref(L, parent, "children", 1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_reorderChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    lua_Integer arg2 = 0;       /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void reorderChild(cocos2d::Node *child, int localZOrder)
    self->reorderChild(arg1, (int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_resume(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void resume()
    self->resume();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_runAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Action *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");

    // inject code before call
    olua_startcmpunref(L, 1, "actions");

    // @unref(cmp actions) cocos2d::Action *runAction(@ref(map actions) cocos2d::Action *action)
    cocos2d::Action *ret = (cocos2d::Action *)self->runAction(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Action");

    // inject code after call
    olua_mapref(L, 1, "actions", 2);
    olua_endcmpunref(L, 1, "actions");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Node_schedule1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1;       /** callback */
    std::string arg2;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 3, &arg2);

    void *callback_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg2);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg1 = [callback_store_obj, func, MT](float arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_number(L, (lua_Number)arg1);

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const std::function<void(float)>& callback, const std::string &key)
    self->schedule(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_schedule2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1;       /** callback */
    lua_Number arg2 = 0;       /** interval */
    std::string arg3;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    void *callback_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg3);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg1 = [callback_store_obj, func, MT](float arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_number(L, (lua_Number)arg1);

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const std::function<void(float)>& callback, float interval, const std::string &key)
    self->schedule(arg1, (float)arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_schedule3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1;       /** callback */
    lua_Number arg2 = 0;       /** interval */
    lua_Unsigned arg3 = 0;       /** repeat */
    lua_Number arg4 = 0;       /** delay */
    std::string arg5;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_std_string(L, 6, &arg5);

    void *callback_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg5);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg1 = [callback_store_obj, func, MT](float arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_number(L, (lua_Number)arg1);

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const std::function<void(float)>& callback, float interval, unsigned int repeat, float delay, const std::string &key)
    self->schedule(arg1, (float)arg2, (unsigned int)arg3, (float)arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_schedule(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((olua_is_std_function(L, 2)) && (olua_is_std_string(L, 3))) {
            // void schedule(const std::function<void(float)>& callback, const std::string &key)
            return _cocos2d_Node_schedule1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_std_function(L, 2)) && (olua_is_number(L, 3)) && (olua_is_std_string(L, 4))) {
            // void schedule(const std::function<void(float)>& callback, float interval, const std::string &key)
            return _cocos2d_Node_schedule2(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_function(L, 2)) && (olua_is_number(L, 3)) && (olua_is_uint(L, 4)) && (olua_is_number(L, 5)) && (olua_is_std_string(L, 6))) {
            // void schedule(const std::function<void(float)>& callback, float interval, unsigned int repeat, float delay, const std::string &key)
            return _cocos2d_Node_schedule3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::schedule' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_scheduleOnce(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1;       /** callback */
    lua_Number arg2 = 0;       /** delay */
    std::string arg3;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    void *callback_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg3);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg1 = [callback_store_obj, func, MT](float arg1) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_number(L, (lua_Number)arg1);

            olua_callback(L, callback_store_obj, func.c_str(), 1);

            olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void scheduleOnce(const std::function<void(float)>& callback, float delay, const std::string &key)
    self->scheduleOnce(arg1, (float)arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_scheduleUpdate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void scheduleUpdate()
    self->scheduleUpdate();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_scheduleUpdateWithPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** priority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // void scheduleUpdateWithPriority(int priority)
    self->scheduleUpdateWithPriority((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setActionManager(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::ActionManager *arg1 = nullptr;       /** actionManager */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionManager");

    // void setActionManager(@ref(single actionManager) cocos2d::ActionManager *actionManager)
    self->setActionManager(arg1);

    // inject code after call
    olua_singleref(L, 1, "actionManager", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setAdditionalTransform1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Mat4 arg1;       /** additionalTransform */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);

    // void setAdditionalTransform(const cocos2d::Mat4 &additionalTransform)
    self->setAdditionalTransform(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setAdditionalTransform2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::AffineTransform arg1;       /** additionalTransform */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_AffineTransform(L, 2, &arg1);

    // void setAdditionalTransform(const cocos2d::AffineTransform &additionalTransform)
    self->setAdditionalTransform(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setAdditionalTransform(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if ((auto_olua_is_cocos2d_AffineTransform(L, 2))) {
            // void setAdditionalTransform(const cocos2d::AffineTransform &additionalTransform)
            return _cocos2d_Node_setAdditionalTransform2(L);
        }

        // if ((manual_olua_is_cocos2d_Mat4(L, 2))) {
            // void setAdditionalTransform(const cocos2d::Mat4 &additionalTransform)
            return _cocos2d_Node_setAdditionalTransform1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setAdditionalTransform' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_setAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** anchorPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setAnchorPoint(const cocos2d::Vec2 &anchorPoint)
    self->setAnchorPoint(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setCameraMask1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Unsigned arg1 = 0;       /** mask */
    bool arg2 = false;       /** applyChildren */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_uint(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void setCameraMask(unsigned short mask, @optional bool applyChildren)
    self->setCameraMask((unsigned short)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setCameraMask2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Unsigned arg1 = 0;       /** mask */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_uint(L, 2, &arg1);

    // void setCameraMask(unsigned short mask, @optional bool applyChildren)
    self->setCameraMask((unsigned short)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setCameraMask(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_uint(L, 2))) {
            // void setCameraMask(unsigned short mask, @optional bool applyChildren)
            return _cocos2d_Node_setCameraMask2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_uint(L, 2)) && (olua_is_bool(L, 3))) {
            // void setCameraMask(unsigned short mask, @optional bool applyChildren)
            return _cocos2d_Node_setCameraMask1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setCameraMask' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_setCascadeColorEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** cascadeColorEnabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setCascadeColorEnabled(bool cascadeColorEnabled)
    self->setCascadeColorEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setCascadeOpacityEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** cascadeOpacityEnabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setCascadeOpacityEnabled(bool cascadeOpacityEnabled)
    self->setCascadeOpacityEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Color3B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    manual_olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setColor(const cocos2d::Color3B &color)
    self->setColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setContentSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Size arg1;       /** contentSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);

    // void setContentSize(const cocos2d::Size &contentSize)
    self->setContentSize(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setEventDispatcher(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::EventDispatcher *arg1 = nullptr;       /** dispatcher */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventDispatcher");

    // void setEventDispatcher(@ref(single eventDispatcher) cocos2d::EventDispatcher *dispatcher)
    self->setEventDispatcher(arg1);

    // inject code after call
    olua_singleref(L, 1, "eventDispatcher", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setGLProgram(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::GLProgram *arg1 = nullptr;       /** glprogram */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgram");

    // void setGLProgram(@ref(single glProgram) cocos2d::GLProgram *glprogram)
    self->setGLProgram(arg1);

    // inject code after call
    olua_singleref(L, 1, "glProgram", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setGLProgramState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::GLProgramState *arg1 = nullptr;       /** glProgramState */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgramState");

    // void setGLProgramState(@ref(single glProgramState) cocos2d::GLProgramState *glProgramState)
    self->setGLProgramState(arg1);

    // inject code after call
    olua_singleref(L, 1, "glProgramState", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setGlobalZOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** globalZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setGlobalZOrder(float globalZOrder)
    self->setGlobalZOrder((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setIgnoreAnchorPointForPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** ignore */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setIgnoreAnchorPointForPosition(bool ignore)
    self->setIgnoreAnchorPointForPosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setLocalZOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // void setLocalZOrder(std::int32_t localZOrder)
    self->setLocalZOrder((std::int32_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // void setName(const std::string &name)
    self->setName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setNodeToParentTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Mat4 arg1;       /** transform */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);

    // void setNodeToParentTransform(const cocos2d::Mat4 &transform)
    self->setNodeToParentTransform(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setNormalizedPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setNormalizedPosition(const cocos2d::Vec2 &position)
    self->setNormalizedPosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setOnEnterCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void()> arg1;       /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "OnEnterCallback";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT]() {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);

                olua_callback(L, callback_store_obj, func.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "OnEnterCallback";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // void setOnEnterCallback(@nullable @local const std::function<void ()> &callback)
    self->setOnEnterCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setOnEnterTransitionDidFinishCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void()> arg1;       /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "OnEnterTransitionDidFinishCallback";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT]() {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);

                olua_callback(L, callback_store_obj, func.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "OnEnterTransitionDidFinishCallback";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // void setOnEnterTransitionDidFinishCallback(@nullable @local const std::function<void ()> &callback)
    self->setOnEnterTransitionDidFinishCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setOnExitCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void()> arg1;       /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "OnExitCallback";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT]() {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);

                olua_callback(L, callback_store_obj, func.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "OnExitCallback";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // void setOnExitCallback(@nullable @local const std::function<void ()> &callback)
    self->setOnExitCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setOnExitTransitionDidStartCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void()> arg1;       /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "OnExitTransitionDidStartCallback";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg1 = [callback_store_obj, func, MT]() {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);

                olua_callback(L, callback_store_obj, func.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "OnExitTransitionDidStartCallback";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg1 = nullptr;
    }

    // void setOnExitTransitionDidStartCallback(@nullable @local const std::function<void ()> &callback)
    self->setOnExitTransitionDidStartCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Unsigned arg1 = 0;       /** opacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_uint(L, 2, &arg1);

    // void setOpacity(GLubyte opacity)
    self->setOpacity((GLubyte)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setOpacityModifyRGB(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setOpacityModifyRGB(bool value)
    self->setOpacityModifyRGB(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setParent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** parent */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setParent(cocos2d::Node *parent)
    self->setParent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setPhysicsBody(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::PhysicsBody *arg1 = nullptr;       /** physicsBody */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.PhysicsBody");

    // void setPhysicsBody(@ref(single physicsBody) cocos2d::PhysicsBody *physicsBody)
    self->setPhysicsBody(arg1);

    // inject code after call
    olua_singleref(L, 1, "physicsBody", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setPosition1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setPosition(const cocos2d::Vec2 &position)
    self->setPosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setPosition2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** x */
    lua_Number arg2 = 0;       /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setPosition(float x, float y)
    self->setPosition((float)arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setPosition(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2))) {
            // void setPosition(const cocos2d::Vec2 &position)
            return _cocos2d_Node_setPosition1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // void setPosition(float x, float y)
            return _cocos2d_Node_setPosition2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setPosition' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_setPosition3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec3 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // void setPosition3D(const cocos2d::Vec3 &position)
    self->setPosition3D(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setPositionNormalized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setPositionNormalized(const cocos2d::Vec2 &position)
    self->setPositionNormalized(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setPositionX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** x */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setPositionX(float x)
    self->setPositionX((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setPositionY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setPositionY(float y)
    self->setPositionY((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setPositionZ(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** positionZ */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setPositionZ(float positionZ)
    self->setPositionZ((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setRotation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** rotation */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setRotation(float rotation)
    self->setRotation((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setRotation3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec3 arg1;       /** rotation */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // void setRotation3D(const cocos2d::Vec3 &rotation)
    self->setRotation3D(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setRotationQuat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Quaternion arg1;       /** quat */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_olua_check_cocos2d_Quaternion(L, 2, &arg1);

    // void setRotationQuat(const cocos2d::Quaternion &quat)
    self->setRotationQuat(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setRotationSkewX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** rotationX */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setRotationSkewX(float rotationX)
    self->setRotationSkewX((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setRotationSkewY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** rotationY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setRotationSkewY(float rotationY)
    self->setRotationSkewY((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setScale1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** scale */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScale(float scale)
    self->setScale((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setScale2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** scaleX */
    lua_Number arg2 = 0;       /** scaleY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setScale(float scaleX, float scaleY)
    self->setScale((float)arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setScale(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_number(L, 2))) {
            // void setScale(float scale)
            return _cocos2d_Node_setScale1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // void setScale(float scaleX, float scaleY)
            return _cocos2d_Node_setScale2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setScale' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_setScaleX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** scaleX */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScaleX(float scaleX)
    self->setScaleX((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setScaleY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** scaleY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScaleY(float scaleY)
    self->setScaleY((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setScaleZ(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** scaleZ */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScaleZ(float scaleZ)
    self->setScaleZ((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setScheduler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Scheduler *arg1 = nullptr;       /** scheduler */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scheduler");

    // void setScheduler(@ref(single scheduler) cocos2d::Scheduler *scheduler)
    self->setScheduler(arg1);

    // inject code after call
    olua_singleref(L, 1, "scheduler", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setSkewX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** skewX */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setSkewX(float skewX)
    self->setSkewX((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setSkewY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** skewY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setSkewY(float skewY)
    self->setSkewY((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // void setTag(int tag)
    self->setTag((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    void *arg1 = nullptr;       /** userData */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void setUserData(void *userData)
    self->setUserData(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setUserObject(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Ref *arg1 = nullptr;       /** userObject */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Ref");

    // void setUserObject(cocos2d::Ref *userObject)
    self->setUserObject(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_setVisible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** visible */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setVisible(bool visible)
    self->setVisible(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_sortAllChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void sortAllChildren()
    self->sortAllChildren();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_stopAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Action *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");

    // inject code before call
    olua_startcmpunref(L, 1, "actions");

    // @unref(cmp actions) void stopAction(cocos2d::Action *action)
    self->stopAction(arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_stopActionByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "actions");

    // @unref(cmp actions) void stopActionByTag(int tag)
    self->stopActionByTag((int)arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_stopActionsByFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Unsigned arg1 = 0;       /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_uint(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "actions");

    // @unref(cmp actions) void stopActionsByFlags(unsigned int flags)
    self->stopActionsByFlags((unsigned int)arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_stopAllActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // inject code before call
    olua_startcmpunref(L, 1, "actions");

    // @unref(cmp actions) void stopAllActions()
    self->stopAllActions();

    // inject code after call
    olua_endcmpunref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_stopAllActionsByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "actions");

    // @unref(cmp actions) void stopAllActionsByTag(int tag)
    self->stopAllActionsByTag((int)arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_unschedule(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    std::string tag = makeScheduleCallbackTag(arg1);
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);

    // void unschedule(const std::string &key)
    self->unschedule(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_unscheduleAllCallbacks(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    std::string tag = makeScheduleCallbackTag("");
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBSTARTWITH);

    // void unscheduleAllCallbacks()
    self->unscheduleAllCallbacks();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_unscheduleUpdate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void unscheduleUpdate()
    self->unscheduleUpdate();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;       /** delta */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void update(float delta)
    self->update((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_updateDisplayedColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Color3B arg1;       /** parentColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    manual_olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void updateDisplayedColor(const cocos2d::Color3B &parentColor)
    self->updateDisplayedColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_updateDisplayedOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    lua_Unsigned arg1 = 0;       /** parentOpacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_uint(L, 2, &arg1);

    // void updateDisplayedOpacity(GLubyte parentOpacity)
    self->updateDisplayedOpacity((GLubyte)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_updateOrderOfArrival(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void updateOrderOfArrival()
    self->updateOrderOfArrival();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_updateTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void updateTransform()
    self->updateTransform();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_visit1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Renderer *arg1 = nullptr;       /** renderer */
    cocos2d::Mat4 arg2;       /** parentTransform */
    lua_Unsigned arg3 = 0;       /** parentFlags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Renderer");
    manual_olua_check_cocos2d_Mat4(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // void visit(cocos2d::Renderer *renderer, const cocos2d::Mat4 &parentTransform, uint32_t parentFlags)
    self->visit(arg1, arg2, (uint32_t)arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_visit2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void visit()
    self->visit();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_visit(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // void visit()
        return _cocos2d_Node_visit2(L);
    }

    if (num_args == 3) {
        // if ((olua_is_cppobj(L, 2, "cc.Renderer")) && (manual_olua_is_cocos2d_Mat4(L, 3)) && (olua_is_uint(L, 4))) {
            // void visit(cocos2d::Renderer *renderer, const cocos2d::Mat4 &parentTransform, uint32_t parentFlags)
            return _cocos2d_Node_visit1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::visit' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_get_alpha(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    lua_pushnumber(L, self->getOpacity() / 255.0f);

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Node_set_alpha(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    self->setOpacity(olua_checknumber(L, 2) * 255.0f);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_get_anchorX(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    lua_pushnumber(L, self->getAnchorPoint().x);

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Node_set_anchorX(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    cocos2d::Vec2 anchor = self->getAnchorPoint();
    anchor.x = olua_checknumber(L, 2);
    self->setAnchorPoint(anchor);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_get_anchorY(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    lua_pushnumber(L, self->getAnchorPoint().y);

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Node_set_anchorY(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    cocos2d::Vec2 anchor = self->getAnchorPoint();
    anchor.y = olua_checknumber(L, 2);
    self->setAnchorPoint(anchor);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_get_height(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    lua_pushnumber(L, self->getContentSize().height);

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Node_set_height(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    cocos2d::Size size = self->getContentSize();
    size.height = olua_checknumber(L, 2);
    self->setContentSize(size);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Node_get_width(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    lua_pushnumber(L, self->getContentSize().width);

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Node_set_width(lua_State *L)
{
    olua_startinvoke(L);

    auto self = olua_toobj<cocos2d::Node>(L, 1);
    cocos2d::Size size = self->getContentSize();
    size.width = olua_checknumber(L, 2);
    self->setContentSize(size);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Node(lua_State *L)
{
    oluacls_class(L, "cc.Node", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Node___move);
    oluacls_func(L, "addChild", _cocos2d_Node_addChild);
    oluacls_func(L, "addComponent", _cocos2d_Node_addComponent);
    oluacls_func(L, "cleanup", _cocos2d_Node_cleanup);
    oluacls_func(L, "convertToNodeSpace", _cocos2d_Node_convertToNodeSpace);
    oluacls_func(L, "convertToNodeSpaceAR", _cocos2d_Node_convertToNodeSpaceAR);
    oluacls_func(L, "convertToWorldSpace", _cocos2d_Node_convertToWorldSpace);
    oluacls_func(L, "convertToWorldSpaceAR", _cocos2d_Node_convertToWorldSpaceAR);
    oluacls_func(L, "convertTouchToNodeSpace", _cocos2d_Node_convertTouchToNodeSpace);
    oluacls_func(L, "convertTouchToNodeSpaceAR", _cocos2d_Node_convertTouchToNodeSpaceAR);
    oluacls_func(L, "create", _cocos2d_Node_create);
    oluacls_func(L, "draw", _cocos2d_Node_draw);
    oluacls_func(L, "getActionByTag", _cocos2d_Node_getActionByTag);
    oluacls_func(L, "getActionManager", _cocos2d_Node_getActionManager);
    oluacls_func(L, "getAnchorPoint", _cocos2d_Node_getAnchorPoint);
    oluacls_func(L, "getAnchorPointInPoints", _cocos2d_Node_getAnchorPointInPoints);
    oluacls_func(L, "getAttachedNodeCount", _cocos2d_Node_getAttachedNodeCount);
    oluacls_func(L, "getBoundingBox", _cocos2d_Node_getBoundingBox);
    oluacls_func(L, "getBounds", _cocos2d_Node_getBounds);
    oluacls_func(L, "getCameraMask", _cocos2d_Node_getCameraMask);
    oluacls_func(L, "getChildByName", _cocos2d_Node_getChildByName);
    oluacls_func(L, "getChildByTag", _cocos2d_Node_getChildByTag);
    oluacls_func(L, "getChildren", _cocos2d_Node_getChildren);
    oluacls_func(L, "getChildrenCount", _cocos2d_Node_getChildrenCount);
    oluacls_func(L, "getColor", _cocos2d_Node_getColor);
    oluacls_func(L, "getComponent", _cocos2d_Node_getComponent);
    oluacls_func(L, "getContentSize", _cocos2d_Node_getContentSize);
    oluacls_func(L, "getDescription", _cocos2d_Node_getDescription);
    oluacls_func(L, "getDisplayedColor", _cocos2d_Node_getDisplayedColor);
    oluacls_func(L, "getDisplayedOpacity", _cocos2d_Node_getDisplayedOpacity);
    oluacls_func(L, "getEventDispatcher", _cocos2d_Node_getEventDispatcher);
    oluacls_func(L, "getGLProgram", _cocos2d_Node_getGLProgram);
    oluacls_func(L, "getGLProgramState", _cocos2d_Node_getGLProgramState);
    oluacls_func(L, "getGlobalZOrder", _cocos2d_Node_getGlobalZOrder);
    oluacls_func(L, "getLocalZOrder", _cocos2d_Node_getLocalZOrder);
    oluacls_func(L, "getName", _cocos2d_Node_getName);
    oluacls_func(L, "getNodeToParentAffineTransform", _cocos2d_Node_getNodeToParentAffineTransform);
    oluacls_func(L, "getNodeToParentTransform", _cocos2d_Node_getNodeToParentTransform);
    oluacls_func(L, "getNodeToWorldAffineTransform", _cocos2d_Node_getNodeToWorldAffineTransform);
    oluacls_func(L, "getNodeToWorldTransform", _cocos2d_Node_getNodeToWorldTransform);
    oluacls_func(L, "getNormalizedPosition", _cocos2d_Node_getNormalizedPosition);
    oluacls_func(L, "getNumberOfRunningActions", _cocos2d_Node_getNumberOfRunningActions);
    oluacls_func(L, "getNumberOfRunningActionsByTag", _cocos2d_Node_getNumberOfRunningActionsByTag);
    oluacls_func(L, "getOnEnterCallback", _cocos2d_Node_getOnEnterCallback);
    oluacls_func(L, "getOnEnterTransitionDidFinishCallback", _cocos2d_Node_getOnEnterTransitionDidFinishCallback);
    oluacls_func(L, "getOnExitCallback", _cocos2d_Node_getOnExitCallback);
    oluacls_func(L, "getOnExitTransitionDidStartCallback", _cocos2d_Node_getOnExitTransitionDidStartCallback);
    oluacls_func(L, "getOpacity", _cocos2d_Node_getOpacity);
    oluacls_func(L, "getParent", _cocos2d_Node_getParent);
    oluacls_func(L, "getParentToNodeAffineTransform", _cocos2d_Node_getParentToNodeAffineTransform);
    oluacls_func(L, "getParentToNodeTransform", _cocos2d_Node_getParentToNodeTransform);
    oluacls_func(L, "getPhysicsBody", _cocos2d_Node_getPhysicsBody);
    oluacls_func(L, "getPosition", _cocos2d_Node_getPosition);
    oluacls_func(L, "getPosition3D", _cocos2d_Node_getPosition3D);
    oluacls_func(L, "getPositionNormalized", _cocos2d_Node_getPositionNormalized);
    oluacls_func(L, "getPositionX", _cocos2d_Node_getPositionX);
    oluacls_func(L, "getPositionY", _cocos2d_Node_getPositionY);
    oluacls_func(L, "getPositionZ", _cocos2d_Node_getPositionZ);
    oluacls_func(L, "getRotation", _cocos2d_Node_getRotation);
    oluacls_func(L, "getRotation3D", _cocos2d_Node_getRotation3D);
    oluacls_func(L, "getRotationQuat", _cocos2d_Node_getRotationQuat);
    oluacls_func(L, "getRotationSkewX", _cocos2d_Node_getRotationSkewX);
    oluacls_func(L, "getRotationSkewY", _cocos2d_Node_getRotationSkewY);
    oluacls_func(L, "getScale", _cocos2d_Node_getScale);
    oluacls_func(L, "getScaleX", _cocos2d_Node_getScaleX);
    oluacls_func(L, "getScaleY", _cocos2d_Node_getScaleY);
    oluacls_func(L, "getScaleZ", _cocos2d_Node_getScaleZ);
    oluacls_func(L, "getScene", _cocos2d_Node_getScene);
    oluacls_func(L, "getScheduler", _cocos2d_Node_getScheduler);
    oluacls_func(L, "getSkewX", _cocos2d_Node_getSkewX);
    oluacls_func(L, "getSkewY", _cocos2d_Node_getSkewY);
    oluacls_func(L, "getTag", _cocos2d_Node_getTag);
    oluacls_func(L, "getUserData", _cocos2d_Node_getUserData);
    oluacls_func(L, "getUserObject", _cocos2d_Node_getUserObject);
    oluacls_func(L, "getWorldToNodeAffineTransform", _cocos2d_Node_getWorldToNodeAffineTransform);
    oluacls_func(L, "getWorldToNodeTransform", _cocos2d_Node_getWorldToNodeTransform);
    oluacls_func(L, "init", _cocos2d_Node_init);
    oluacls_func(L, "isCascadeColorEnabled", _cocos2d_Node_isCascadeColorEnabled);
    oluacls_func(L, "isCascadeOpacityEnabled", _cocos2d_Node_isCascadeOpacityEnabled);
    oluacls_func(L, "isIgnoreAnchorPointForPosition", _cocos2d_Node_isIgnoreAnchorPointForPosition);
    oluacls_func(L, "isOpacityModifyRGB", _cocos2d_Node_isOpacityModifyRGB);
    oluacls_func(L, "isRunning", _cocos2d_Node_isRunning);
    oluacls_func(L, "isScheduled", _cocos2d_Node_isScheduled);
    oluacls_func(L, "isVisible", _cocos2d_Node_isVisible);
    oluacls_func(L, "new", _cocos2d_Node_new);
    oluacls_func(L, "onEnter", _cocos2d_Node_onEnter);
    oluacls_func(L, "onEnterTransitionDidFinish", _cocos2d_Node_onEnterTransitionDidFinish);
    oluacls_func(L, "onExit", _cocos2d_Node_onExit);
    oluacls_func(L, "onExitTransitionDidStart", _cocos2d_Node_onExitTransitionDidStart);
    oluacls_func(L, "pause", _cocos2d_Node_pause);
    oluacls_func(L, "removeAllChildren", _cocos2d_Node_removeAllChildren);
    oluacls_func(L, "removeAllChildrenWithCleanup", _cocos2d_Node_removeAllChildrenWithCleanup);
    oluacls_func(L, "removeAllComponents", _cocos2d_Node_removeAllComponents);
    oluacls_func(L, "removeChild", _cocos2d_Node_removeChild);
    oluacls_func(L, "removeChildByName", _cocos2d_Node_removeChildByName);
    oluacls_func(L, "removeChildByTag", _cocos2d_Node_removeChildByTag);
    oluacls_func(L, "removeComponent", _cocos2d_Node_removeComponent);
    oluacls_func(L, "removeFromParent", _cocos2d_Node_removeFromParent);
    oluacls_func(L, "removeFromParentAndCleanup", _cocos2d_Node_removeFromParentAndCleanup);
    oluacls_func(L, "reorderChild", _cocos2d_Node_reorderChild);
    oluacls_func(L, "resume", _cocos2d_Node_resume);
    oluacls_func(L, "runAction", _cocos2d_Node_runAction);
    oluacls_func(L, "schedule", _cocos2d_Node_schedule);
    oluacls_func(L, "scheduleOnce", _cocos2d_Node_scheduleOnce);
    oluacls_func(L, "scheduleUpdate", _cocos2d_Node_scheduleUpdate);
    oluacls_func(L, "scheduleUpdateWithPriority", _cocos2d_Node_scheduleUpdateWithPriority);
    oluacls_func(L, "setActionManager", _cocos2d_Node_setActionManager);
    oluacls_func(L, "setAdditionalTransform", _cocos2d_Node_setAdditionalTransform);
    oluacls_func(L, "setAnchorPoint", _cocos2d_Node_setAnchorPoint);
    oluacls_func(L, "setCameraMask", _cocos2d_Node_setCameraMask);
    oluacls_func(L, "setCascadeColorEnabled", _cocos2d_Node_setCascadeColorEnabled);
    oluacls_func(L, "setCascadeOpacityEnabled", _cocos2d_Node_setCascadeOpacityEnabled);
    oluacls_func(L, "setColor", _cocos2d_Node_setColor);
    oluacls_func(L, "setContentSize", _cocos2d_Node_setContentSize);
    oluacls_func(L, "setEventDispatcher", _cocos2d_Node_setEventDispatcher);
    oluacls_func(L, "setGLProgram", _cocos2d_Node_setGLProgram);
    oluacls_func(L, "setGLProgramState", _cocos2d_Node_setGLProgramState);
    oluacls_func(L, "setGlobalZOrder", _cocos2d_Node_setGlobalZOrder);
    oluacls_func(L, "setIgnoreAnchorPointForPosition", _cocos2d_Node_setIgnoreAnchorPointForPosition);
    oluacls_func(L, "setLocalZOrder", _cocos2d_Node_setLocalZOrder);
    oluacls_func(L, "setName", _cocos2d_Node_setName);
    oluacls_func(L, "setNodeToParentTransform", _cocos2d_Node_setNodeToParentTransform);
    oluacls_func(L, "setNormalizedPosition", _cocos2d_Node_setNormalizedPosition);
    oluacls_func(L, "setOnEnterCallback", _cocos2d_Node_setOnEnterCallback);
    oluacls_func(L, "setOnEnterTransitionDidFinishCallback", _cocos2d_Node_setOnEnterTransitionDidFinishCallback);
    oluacls_func(L, "setOnExitCallback", _cocos2d_Node_setOnExitCallback);
    oluacls_func(L, "setOnExitTransitionDidStartCallback", _cocos2d_Node_setOnExitTransitionDidStartCallback);
    oluacls_func(L, "setOpacity", _cocos2d_Node_setOpacity);
    oluacls_func(L, "setOpacityModifyRGB", _cocos2d_Node_setOpacityModifyRGB);
    oluacls_func(L, "setParent", _cocos2d_Node_setParent);
    oluacls_func(L, "setPhysicsBody", _cocos2d_Node_setPhysicsBody);
    oluacls_func(L, "setPosition", _cocos2d_Node_setPosition);
    oluacls_func(L, "setPosition3D", _cocos2d_Node_setPosition3D);
    oluacls_func(L, "setPositionNormalized", _cocos2d_Node_setPositionNormalized);
    oluacls_func(L, "setPositionX", _cocos2d_Node_setPositionX);
    oluacls_func(L, "setPositionY", _cocos2d_Node_setPositionY);
    oluacls_func(L, "setPositionZ", _cocos2d_Node_setPositionZ);
    oluacls_func(L, "setRotation", _cocos2d_Node_setRotation);
    oluacls_func(L, "setRotation3D", _cocos2d_Node_setRotation3D);
    oluacls_func(L, "setRotationQuat", _cocos2d_Node_setRotationQuat);
    oluacls_func(L, "setRotationSkewX", _cocos2d_Node_setRotationSkewX);
    oluacls_func(L, "setRotationSkewY", _cocos2d_Node_setRotationSkewY);
    oluacls_func(L, "setScale", _cocos2d_Node_setScale);
    oluacls_func(L, "setScaleX", _cocos2d_Node_setScaleX);
    oluacls_func(L, "setScaleY", _cocos2d_Node_setScaleY);
    oluacls_func(L, "setScaleZ", _cocos2d_Node_setScaleZ);
    oluacls_func(L, "setScheduler", _cocos2d_Node_setScheduler);
    oluacls_func(L, "setSkewX", _cocos2d_Node_setSkewX);
    oluacls_func(L, "setSkewY", _cocos2d_Node_setSkewY);
    oluacls_func(L, "setTag", _cocos2d_Node_setTag);
    oluacls_func(L, "setUserData", _cocos2d_Node_setUserData);
    oluacls_func(L, "setUserObject", _cocos2d_Node_setUserObject);
    oluacls_func(L, "setVisible", _cocos2d_Node_setVisible);
    oluacls_func(L, "sortAllChildren", _cocos2d_Node_sortAllChildren);
    oluacls_func(L, "stopAction", _cocos2d_Node_stopAction);
    oluacls_func(L, "stopActionByTag", _cocos2d_Node_stopActionByTag);
    oluacls_func(L, "stopActionsByFlags", _cocos2d_Node_stopActionsByFlags);
    oluacls_func(L, "stopAllActions", _cocos2d_Node_stopAllActions);
    oluacls_func(L, "stopAllActionsByTag", _cocos2d_Node_stopAllActionsByTag);
    oluacls_func(L, "unschedule", _cocos2d_Node_unschedule);
    oluacls_func(L, "unscheduleAllCallbacks", _cocos2d_Node_unscheduleAllCallbacks);
    oluacls_func(L, "unscheduleUpdate", _cocos2d_Node_unscheduleUpdate);
    oluacls_func(L, "update", _cocos2d_Node_update);
    oluacls_func(L, "updateDisplayedColor", _cocos2d_Node_updateDisplayedColor);
    oluacls_func(L, "updateDisplayedOpacity", _cocos2d_Node_updateDisplayedOpacity);
    oluacls_func(L, "updateOrderOfArrival", _cocos2d_Node_updateOrderOfArrival);
    oluacls_func(L, "updateTransform", _cocos2d_Node_updateTransform);
    oluacls_func(L, "visit", _cocos2d_Node_visit);
    oluacls_prop(L, "actionManager", _cocos2d_Node_getActionManager, _cocos2d_Node_setActionManager);
    oluacls_prop(L, "alpha", _cocos2d_Node_get_alpha, _cocos2d_Node_set_alpha);
    oluacls_prop(L, "anchorPoint", _cocos2d_Node_getAnchorPoint, _cocos2d_Node_setAnchorPoint);
    oluacls_prop(L, "anchorPointInPoints", _cocos2d_Node_getAnchorPointInPoints, nullptr);
    oluacls_prop(L, "anchorX", _cocos2d_Node_get_anchorX, _cocos2d_Node_set_anchorX);
    oluacls_prop(L, "anchorY", _cocos2d_Node_get_anchorY, _cocos2d_Node_set_anchorY);
    oluacls_prop(L, "attachedNodeCount", _cocos2d_Node_getAttachedNodeCount, nullptr);
    oluacls_prop(L, "boundingBox", _cocos2d_Node_getBoundingBox, nullptr);
    oluacls_prop(L, "cameraMask", _cocos2d_Node_getCameraMask, _cocos2d_Node_setCameraMask);
    oluacls_prop(L, "cascadeColorEnabled", _cocos2d_Node_isCascadeColorEnabled, _cocos2d_Node_setCascadeColorEnabled);
    oluacls_prop(L, "cascadeOpacityEnabled", _cocos2d_Node_isCascadeOpacityEnabled, _cocos2d_Node_setCascadeOpacityEnabled);
    oluacls_prop(L, "children", _cocos2d_Node_getChildren, nullptr);
    oluacls_prop(L, "childrenCount", _cocos2d_Node_getChildrenCount, nullptr);
    oluacls_prop(L, "color", _cocos2d_Node_getColor, _cocos2d_Node_setColor);
    oluacls_prop(L, "contentSize", _cocos2d_Node_getContentSize, _cocos2d_Node_setContentSize);
    oluacls_prop(L, "description", _cocos2d_Node_getDescription, nullptr);
    oluacls_prop(L, "displayedColor", _cocos2d_Node_getDisplayedColor, nullptr);
    oluacls_prop(L, "displayedOpacity", _cocos2d_Node_getDisplayedOpacity, nullptr);
    oluacls_prop(L, "eventDispatcher", _cocos2d_Node_getEventDispatcher, _cocos2d_Node_setEventDispatcher);
    oluacls_prop(L, "glProgram", _cocos2d_Node_getGLProgram, _cocos2d_Node_setGLProgram);
    oluacls_prop(L, "glProgramState", _cocos2d_Node_getGLProgramState, _cocos2d_Node_setGLProgramState);
    oluacls_prop(L, "globalZOrder", _cocos2d_Node_getGlobalZOrder, _cocos2d_Node_setGlobalZOrder);
    oluacls_prop(L, "height", _cocos2d_Node_get_height, _cocos2d_Node_set_height);
    oluacls_prop(L, "ignoreAnchorPointForPosition", _cocos2d_Node_isIgnoreAnchorPointForPosition, _cocos2d_Node_setIgnoreAnchorPointForPosition);
    oluacls_prop(L, "localZOrder", _cocos2d_Node_getLocalZOrder, _cocos2d_Node_setLocalZOrder);
    oluacls_prop(L, "name", _cocos2d_Node_getName, _cocos2d_Node_setName);
    oluacls_prop(L, "nodeToWorldAffineTransform", _cocos2d_Node_getNodeToWorldAffineTransform, nullptr);
    oluacls_prop(L, "nodeToWorldTransform", _cocos2d_Node_getNodeToWorldTransform, nullptr);
    oluacls_prop(L, "normalizedPosition", _cocos2d_Node_getNormalizedPosition, _cocos2d_Node_setNormalizedPosition);
    oluacls_prop(L, "numberOfRunningActions", _cocos2d_Node_getNumberOfRunningActions, nullptr);
    oluacls_prop(L, "onEnterCallback", _cocos2d_Node_getOnEnterCallback, _cocos2d_Node_setOnEnterCallback);
    oluacls_prop(L, "onEnterTransitionDidFinishCallback", _cocos2d_Node_getOnEnterTransitionDidFinishCallback, _cocos2d_Node_setOnEnterTransitionDidFinishCallback);
    oluacls_prop(L, "onExitCallback", _cocos2d_Node_getOnExitCallback, _cocos2d_Node_setOnExitCallback);
    oluacls_prop(L, "onExitTransitionDidStartCallback", _cocos2d_Node_getOnExitTransitionDidStartCallback, _cocos2d_Node_setOnExitTransitionDidStartCallback);
    oluacls_prop(L, "opacity", _cocos2d_Node_getOpacity, _cocos2d_Node_setOpacity);
    oluacls_prop(L, "opacityModifyRGB", _cocos2d_Node_isOpacityModifyRGB, _cocos2d_Node_setOpacityModifyRGB);
    oluacls_prop(L, "parent", _cocos2d_Node_getParent, _cocos2d_Node_setParent);
    oluacls_prop(L, "parentToNodeAffineTransform", _cocos2d_Node_getParentToNodeAffineTransform, nullptr);
    oluacls_prop(L, "parentToNodeTransform", _cocos2d_Node_getParentToNodeTransform, nullptr);
    oluacls_prop(L, "physicsBody", _cocos2d_Node_getPhysicsBody, _cocos2d_Node_setPhysicsBody);
    oluacls_prop(L, "position", _cocos2d_Node_getPosition, _cocos2d_Node_setPosition);
    oluacls_prop(L, "position3D", _cocos2d_Node_getPosition3D, _cocos2d_Node_setPosition3D);
    oluacls_prop(L, "positionNormalized", _cocos2d_Node_getPositionNormalized, _cocos2d_Node_setPositionNormalized);
    oluacls_prop(L, "positionX", _cocos2d_Node_getPositionX, _cocos2d_Node_setPositionX);
    oluacls_prop(L, "positionY", _cocos2d_Node_getPositionY, _cocos2d_Node_setPositionY);
    oluacls_prop(L, "positionZ", _cocos2d_Node_getPositionZ, _cocos2d_Node_setPositionZ);
    oluacls_prop(L, "rotation", _cocos2d_Node_getRotation, _cocos2d_Node_setRotation);
    oluacls_prop(L, "rotation3D", _cocos2d_Node_getRotation3D, _cocos2d_Node_setRotation3D);
    oluacls_prop(L, "rotationQuat", _cocos2d_Node_getRotationQuat, _cocos2d_Node_setRotationQuat);
    oluacls_prop(L, "rotationSkewX", _cocos2d_Node_getRotationSkewX, _cocos2d_Node_setRotationSkewX);
    oluacls_prop(L, "rotationSkewY", _cocos2d_Node_getRotationSkewY, _cocos2d_Node_setRotationSkewY);
    oluacls_prop(L, "running", _cocos2d_Node_isRunning, nullptr);
    oluacls_prop(L, "scale", _cocos2d_Node_getScale, _cocos2d_Node_setScale);
    oluacls_prop(L, "scaleX", _cocos2d_Node_getScaleX, _cocos2d_Node_setScaleX);
    oluacls_prop(L, "scaleY", _cocos2d_Node_getScaleY, _cocos2d_Node_setScaleY);
    oluacls_prop(L, "scaleZ", _cocos2d_Node_getScaleZ, _cocos2d_Node_setScaleZ);
    oluacls_prop(L, "scene", _cocos2d_Node_getScene, nullptr);
    oluacls_prop(L, "scheduler", _cocos2d_Node_getScheduler, _cocos2d_Node_setScheduler);
    oluacls_prop(L, "skewX", _cocos2d_Node_getSkewX, _cocos2d_Node_setSkewX);
    oluacls_prop(L, "skewY", _cocos2d_Node_getSkewY, _cocos2d_Node_setSkewY);
    oluacls_prop(L, "tag", _cocos2d_Node_getTag, _cocos2d_Node_setTag);
    oluacls_prop(L, "userData", _cocos2d_Node_getUserData, _cocos2d_Node_setUserData);
    oluacls_prop(L, "userObject", _cocos2d_Node_getUserObject, _cocos2d_Node_setUserObject);
    oluacls_prop(L, "visible", _cocos2d_Node_isVisible, _cocos2d_Node_setVisible);
    oluacls_prop(L, "width", _cocos2d_Node_get_width, _cocos2d_Node_set_width);
    oluacls_prop(L, "worldToNodeAffineTransform", _cocos2d_Node_getWorldToNodeAffineTransform, nullptr);
    oluacls_prop(L, "worldToNodeTransform", _cocos2d_Node_getWorldToNodeTransform, nullptr);
    oluacls_prop(L, "x", _cocos2d_Node_getPositionX, _cocos2d_Node_setPositionX);
    oluacls_prop(L, "y", _cocos2d_Node_getPositionY, _cocos2d_Node_setPositionY);
    oluacls_prop(L, "z", _cocos2d_Node_getPositionZ, _cocos2d_Node_setPositionZ);
    oluacls_const_integer(L, "INVALID_TAG", (lua_Integer)cocos2d::Node::INVALID_TAG);

    olua_registerluatype<cocos2d::Node>(L, "cc.Node");

    return 1;
}

static int _cocos2d_AtlasNode___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::AtlasNode *)olua_toobj(L, 1, "cc.AtlasNode");
    olua_push_cppobj(L, self, "cc.AtlasNode");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_AtlasNode_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */
    lua_Integer arg2 = 0;       /** tileWidth */
    lua_Integer arg3 = 0;       /** tileHeight */
    lua_Integer arg4 = 0;       /** itemsToRender */

    olua_check_std_string(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static cocos2d::AtlasNode *create(const std::string &filename, int tileWidth, int tileHeight, int itemsToRender)
    cocos2d::AtlasNode *ret = (cocos2d::AtlasNode *)cocos2d::AtlasNode::create(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.AtlasNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AtlasNode_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_olua_push_cocos2d_BlendFunc(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AtlasNode_getQuadsToDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // ssize_t getQuadsToDraw()
    ssize_t ret = (ssize_t)self->getQuadsToDraw();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AtlasNode_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture();
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AtlasNode_getTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // cocos2d::TextureAtlas *getTextureAtlas()
    cocos2d::TextureAtlas *ret = (cocos2d::TextureAtlas *)self->getTextureAtlas();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AtlasNode_initWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    lua_Integer arg2 = 0;       /** tileWidth */
    lua_Integer arg3 = 0;       /** tileHeight */
    lua_Integer arg4 = 0;       /** itemsToRender */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // bool initWithTexture(cocos2d::Texture2D *texture, int tileWidth, int tileHeight, int itemsToRender)
    bool ret = (bool)self->initWithTexture(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AtlasNode_initWithTileFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    std::string arg1;       /** tile */
    lua_Integer arg2 = 0;       /** tileWidth */
    lua_Integer arg3 = 0;       /** tileHeight */
    lua_Integer arg4 = 0;       /** itemsToRender */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // bool initWithTileFile(const std::string &tile, int tileWidth, int tileHeight, int itemsToRender)
    bool ret = (bool)self->initWithTileFile(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AtlasNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // AtlasNode()
    cocos2d::AtlasNode *ret = (cocos2d::AtlasNode *)new cocos2d::AtlasNode();
    int num_ret = olua_push_cppobj(L, ret, "cc.AtlasNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AtlasNode_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    auto_olua_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AtlasNode_setQuadsToDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    lua_Integer arg1 = 0;       /** quadsToDraw */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    olua_check_int(L, 2, &arg1);

    // void setQuadsToDraw(ssize_t quadsToDraw)
    self->setQuadsToDraw((ssize_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AtlasNode_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AtlasNode_setTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::TextureAtlas *arg1 = nullptr;       /** textureAtlas */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextureAtlas");

    // void setTextureAtlas(cocos2d::TextureAtlas *textureAtlas)
    self->setTextureAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AtlasNode_updateAtlasValues(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // void updateAtlasValues()
    self->updateAtlasValues();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_AtlasNode(lua_State *L)
{
    oluacls_class(L, "cc.AtlasNode", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_AtlasNode___move);
    oluacls_func(L, "create", _cocos2d_AtlasNode_create);
    oluacls_func(L, "getBlendFunc", _cocos2d_AtlasNode_getBlendFunc);
    oluacls_func(L, "getQuadsToDraw", _cocos2d_AtlasNode_getQuadsToDraw);
    oluacls_func(L, "getTexture", _cocos2d_AtlasNode_getTexture);
    oluacls_func(L, "getTextureAtlas", _cocos2d_AtlasNode_getTextureAtlas);
    oluacls_func(L, "initWithTexture", _cocos2d_AtlasNode_initWithTexture);
    oluacls_func(L, "initWithTileFile", _cocos2d_AtlasNode_initWithTileFile);
    oluacls_func(L, "new", _cocos2d_AtlasNode_new);
    oluacls_func(L, "setBlendFunc", _cocos2d_AtlasNode_setBlendFunc);
    oluacls_func(L, "setQuadsToDraw", _cocos2d_AtlasNode_setQuadsToDraw);
    oluacls_func(L, "setTexture", _cocos2d_AtlasNode_setTexture);
    oluacls_func(L, "setTextureAtlas", _cocos2d_AtlasNode_setTextureAtlas);
    oluacls_func(L, "updateAtlasValues", _cocos2d_AtlasNode_updateAtlasValues);
    oluacls_prop(L, "blendFunc", _cocos2d_AtlasNode_getBlendFunc, _cocos2d_AtlasNode_setBlendFunc);
    oluacls_prop(L, "quadsToDraw", _cocos2d_AtlasNode_getQuadsToDraw, _cocos2d_AtlasNode_setQuadsToDraw);
    oluacls_prop(L, "texture", _cocos2d_AtlasNode_getTexture, _cocos2d_AtlasNode_setTexture);
    oluacls_prop(L, "textureAtlas", _cocos2d_AtlasNode_getTextureAtlas, _cocos2d_AtlasNode_setTextureAtlas);

    olua_registerluatype<cocos2d::AtlasNode>(L, "cc.AtlasNode");

    return 1;
}

static int _cocos2d_ProtectedNode___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ProtectedNode *)olua_toobj(L, 1, "cc.ProtectedNode");
    olua_push_cppobj(L, self, "cc.ProtectedNode");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ProtectedNode_addProtectedChild1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void addProtectedChild(@ref(map protectedChildren) cocos2d::Node *child)
    self->addProtectedChild(arg1);

    // inject code after call
    olua_mapref(L, 1, "protectedChildren", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_addProtectedChild2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    lua_Integer arg2 = 0;       /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void addProtectedChild(@ref(map protectedChildren) cocos2d::Node *child, int localZOrder)
    self->addProtectedChild(arg1, (int)arg2);

    // inject code after call
    olua_mapref(L, 1, "protectedChildren", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_addProtectedChild3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    lua_Integer arg2 = 0;       /** localZOrder */
    lua_Integer arg3 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void addProtectedChild(@ref(map protectedChildren) cocos2d::Node *child, int localZOrder, int tag)
    self->addProtectedChild(arg1, (int)arg2, (int)arg3);

    // inject code after call
    olua_mapref(L, 1, "protectedChildren", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_addProtectedChild(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // void addProtectedChild(@ref(map protectedChildren) cocos2d::Node *child)
            return _cocos2d_ProtectedNode_addProtectedChild1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_int(L, 3))) {
            // void addProtectedChild(@ref(map protectedChildren) cocos2d::Node *child, int localZOrder)
            return _cocos2d_ProtectedNode_addProtectedChild2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_int(L, 3)) && (olua_is_int(L, 4))) {
            // void addProtectedChild(@ref(map protectedChildren) cocos2d::Node *child, int localZOrder, int tag)
            return _cocos2d_ProtectedNode_addProtectedChild3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ProtectedNode::addProtectedChild' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ProtectedNode_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ProtectedNode *create()
    cocos2d::ProtectedNode *ret = (cocos2d::ProtectedNode *)cocos2d::ProtectedNode::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ProtectedNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProtectedNode_disableCascadeColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");

    // void disableCascadeColor()
    self->disableCascadeColor();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_disableCascadeOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");

    // void disableCascadeOpacity()
    self->disableCascadeOpacity();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_getProtectedChildByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_int(L, 2, &arg1);

    // @ref(map protectedChildren) cocos2d::Node *getProtectedChildByTag(int tag)
    cocos2d::Node *ret = (cocos2d::Node *)self->getProtectedChildByTag((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Node");

    // inject code after call
    olua_mapref(L, 1, "protectedChildren", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProtectedNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // ProtectedNode()
    cocos2d::ProtectedNode *ret = (cocos2d::ProtectedNode *)new cocos2d::ProtectedNode();
    int num_ret = olua_push_cppobj(L, ret, "cc.ProtectedNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProtectedNode_removeAllProtectedChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");

    // @unref(all protectedChildren) void removeAllProtectedChildren()
    self->removeAllProtectedChildren();

    // inject code after call
    olua_unrefall(L, 1, "protectedChildren");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_removeAllProtectedChildrenWithCleanup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    bool arg1 = false;       /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_bool(L, 2, &arg1);

    // @unref(all protectedChildren) void removeAllProtectedChildrenWithCleanup(bool cleanup)
    self->removeAllProtectedChildrenWithCleanup(arg1);

    // inject code after call
    olua_unrefall(L, 1, "protectedChildren");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_removeProtectedChild1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    bool arg2 = false;       /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // void removeProtectedChild(@unref(map protectedChildren) cocos2d::Node *child, @optional bool cleanup)
    self->removeProtectedChild(arg1, arg2);

    // inject code after call
    olua_mapunref(L, 1, "protectedChildren", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_removeProtectedChild2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void removeProtectedChild(@unref(map protectedChildren) cocos2d::Node *child, @optional bool cleanup)
    self->removeProtectedChild(arg1);

    // inject code after call
    olua_mapunref(L, 1, "protectedChildren", 2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_removeProtectedChild(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Node"))) {
            // void removeProtectedChild(@unref(map protectedChildren) cocos2d::Node *child, @optional bool cleanup)
            return _cocos2d_ProtectedNode_removeProtectedChild2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void removeProtectedChild(@unref(map protectedChildren) cocos2d::Node *child, @optional bool cleanup)
            return _cocos2d_ProtectedNode_removeProtectedChild1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ProtectedNode::removeProtectedChild' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ProtectedNode_removeProtectedChildByTag1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */
    bool arg2 = false;       /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_int(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // inject code before call
    olua_startcmpunref(L, 1, "protectedChildren");

    // @unref(cmp protectedChildren) void removeProtectedChildByTag(int tag, @optional bool cleanup)
    self->removeProtectedChildByTag((int)arg1, arg2);

    // inject code after call
    olua_endcmpunref(L, 1, "protectedChildren");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_removeProtectedChildByTag2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    lua_Integer arg1 = 0;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_int(L, 2, &arg1);

    // inject code before call
    olua_startcmpunref(L, 1, "protectedChildren");

    // @unref(cmp protectedChildren) void removeProtectedChildByTag(int tag, @optional bool cleanup)
    self->removeProtectedChildByTag((int)arg1);

    // inject code after call
    olua_endcmpunref(L, 1, "protectedChildren");

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_removeProtectedChildByTag(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_int(L, 2))) {
            // @unref(cmp protectedChildren) void removeProtectedChildByTag(int tag, @optional bool cleanup)
            return _cocos2d_ProtectedNode_removeProtectedChildByTag2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_int(L, 2)) && (olua_is_bool(L, 3))) {
            // @unref(cmp protectedChildren) void removeProtectedChildByTag(int tag, @optional bool cleanup)
            return _cocos2d_ProtectedNode_removeProtectedChildByTag1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ProtectedNode::removeProtectedChildByTag' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ProtectedNode_reorderProtectedChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    lua_Integer arg2 = 0;       /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void reorderProtectedChild(cocos2d::Node *child, int localZOrder)
    self->reorderProtectedChild(arg1, (int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProtectedNode_sortAllProtectedChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");

    // void sortAllProtectedChildren()
    self->sortAllProtectedChildren();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ProtectedNode(lua_State *L)
{
    oluacls_class(L, "cc.ProtectedNode", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_ProtectedNode___move);
    oluacls_func(L, "addProtectedChild", _cocos2d_ProtectedNode_addProtectedChild);
    oluacls_func(L, "create", _cocos2d_ProtectedNode_create);
    oluacls_func(L, "disableCascadeColor", _cocos2d_ProtectedNode_disableCascadeColor);
    oluacls_func(L, "disableCascadeOpacity", _cocos2d_ProtectedNode_disableCascadeOpacity);
    oluacls_func(L, "getProtectedChildByTag", _cocos2d_ProtectedNode_getProtectedChildByTag);
    oluacls_func(L, "new", _cocos2d_ProtectedNode_new);
    oluacls_func(L, "removeAllProtectedChildren", _cocos2d_ProtectedNode_removeAllProtectedChildren);
    oluacls_func(L, "removeAllProtectedChildrenWithCleanup", _cocos2d_ProtectedNode_removeAllProtectedChildrenWithCleanup);
    oluacls_func(L, "removeProtectedChild", _cocos2d_ProtectedNode_removeProtectedChild);
    oluacls_func(L, "removeProtectedChildByTag", _cocos2d_ProtectedNode_removeProtectedChildByTag);
    oluacls_func(L, "reorderProtectedChild", _cocos2d_ProtectedNode_reorderProtectedChild);
    oluacls_func(L, "sortAllProtectedChildren", _cocos2d_ProtectedNode_sortAllProtectedChildren);

    olua_registerluatype<cocos2d::ProtectedNode>(L, "cc.ProtectedNode");

    return 1;
}

static int _cocos2d_DrawNode___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::DrawNode *)olua_toobj(L, 1, "cc.DrawNode");
    olua_push_cppobj(L, self, "cc.DrawNode");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_DrawNode_clear(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");

    // void clear()
    self->clear();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** defaultLineWidth */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::DrawNode *create(@optional GLfloat defaultLineWidth)
    cocos2d::DrawNode *ret = (cocos2d::DrawNode *)cocos2d::DrawNode::create((GLfloat)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.DrawNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DrawNode_create2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::DrawNode *create(@optional GLfloat defaultLineWidth)
    cocos2d::DrawNode *ret = (cocos2d::DrawNode *)cocos2d::DrawNode::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.DrawNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DrawNode_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::DrawNode *create(@optional GLfloat defaultLineWidth)
        return _cocos2d_DrawNode_create2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_number(L, 1))) {
            // static cocos2d::DrawNode *create(@optional GLfloat defaultLineWidth)
            return _cocos2d_DrawNode_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_DrawNode_drawCardinalSpline(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::PointArray *arg1 = nullptr;       /** config */
    lua_Number arg2 = 0;       /** tension */
    lua_Unsigned arg3 = 0;       /** segments */
    cocos2d::Color4F arg4;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.PointArray");
    olua_check_number(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    manual_olua_check_cocos2d_Color4F(L, 5, &arg4);

    // void drawCardinalSpline(cocos2d::PointArray *config, float tension, unsigned int segments, const cocos2d::Color4F &color)
    self->drawCardinalSpline(arg1, (float)arg2, (unsigned int)arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawCatmullRom(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::PointArray *arg1 = nullptr;       /** points */
    lua_Unsigned arg2 = 0;       /** segments */
    cocos2d::Color4F arg3;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.PointArray");
    olua_check_uint(L, 3, &arg2);
    manual_olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawCatmullRom(cocos2d::PointArray *points, unsigned int segments, const cocos2d::Color4F &color)
    self->drawCatmullRom(arg1, (unsigned int)arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawCircle1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** center */
    lua_Number arg2 = 0;       /** radius */
    lua_Number arg3 = 0;       /** angle */
    lua_Unsigned arg4 = 0;       /** segments */
    bool arg5 = false;       /** drawLineToCenter */
    lua_Number arg6 = 0;       /** scaleX */
    lua_Number arg7 = 0;       /** scaleY */
    cocos2d::Color4F arg8;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    olua_check_bool(L, 6, &arg5);
    olua_check_number(L, 7, &arg6);
    olua_check_number(L, 8, &arg7);
    manual_olua_check_cocos2d_Color4F(L, 9, &arg8);

    // void drawCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY, const cocos2d::Color4F &color)
    self->drawCircle(arg1, (float)arg2, (float)arg3, (unsigned int)arg4, arg5, (float)arg6, (float)arg7, arg8);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawCircle2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** center */
    lua_Number arg2 = 0;       /** radius */
    lua_Number arg3 = 0;       /** angle */
    lua_Unsigned arg4 = 0;       /** segments */
    bool arg5 = false;       /** drawLineToCenter */
    cocos2d::Color4F arg6;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    olua_check_bool(L, 6, &arg5);
    manual_olua_check_cocos2d_Color4F(L, 7, &arg6);

    // void drawCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, const cocos2d::Color4F &color)
    self->drawCircle(arg1, (float)arg2, (float)arg3, (unsigned int)arg4, arg5, arg6);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawCircle(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 6) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_uint(L, 5)) && (olua_is_bool(L, 6)) && (manual_olua_is_cocos2d_Color4F(L, 7))) {
            // void drawCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, const cocos2d::Color4F &color)
            return _cocos2d_DrawNode_drawCircle2(L);
        // }
    }

    if (num_args == 8) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_uint(L, 5)) && (olua_is_bool(L, 6)) && (olua_is_number(L, 7)) && (olua_is_number(L, 8)) && (manual_olua_is_cocos2d_Color4F(L, 9))) {
            // void drawCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY, const cocos2d::Color4F &color)
            return _cocos2d_DrawNode_drawCircle1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::drawCircle' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_DrawNode_drawCubicBezier(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** origin */
    cocos2d::Vec2 arg2;       /** control1 */
    cocos2d::Vec2 arg3;       /** control2 */
    cocos2d::Vec2 arg4;       /** destination */
    lua_Unsigned arg5 = 0;       /** segments */
    cocos2d::Color4F arg6;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);
    auto_olua_check_cocos2d_Vec2(L, 4, &arg3);
    auto_olua_check_cocos2d_Vec2(L, 5, &arg4);
    olua_check_uint(L, 6, &arg5);
    manual_olua_check_cocos2d_Color4F(L, 7, &arg6);

    // void drawCubicBezier(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &control1, const cocos2d::Vec2 &control2, const cocos2d::Vec2 &destination, unsigned int segments, const cocos2d::Color4F &color)
    self->drawCubicBezier(arg1, arg2, arg3, arg4, (unsigned int)arg5, arg6);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawDot(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */
    lua_Number arg2 = 0;       /** radius */
    cocos2d::Color4F arg3;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    manual_olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawDot(const cocos2d::Vec2 &pos, float radius, const cocos2d::Color4F &color)
    self->drawDot(arg1, (float)arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawLine(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** origin */
    cocos2d::Vec2 arg2;       /** destination */
    cocos2d::Color4F arg3;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);
    manual_olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawLine(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &destination, const cocos2d::Color4F &color)
    self->drawLine(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */
    lua_Number arg2 = 0;       /** pointSize */
    cocos2d::Color4F arg3;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    manual_olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawPoint(const cocos2d::Vec2 &point, const float pointSize, const cocos2d::Color4F &color)
    self->drawPoint(arg1, (float)arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawQuadBezier(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** origin */
    cocos2d::Vec2 arg2;       /** control */
    cocos2d::Vec2 arg3;       /** destination */
    lua_Unsigned arg4 = 0;       /** segments */
    cocos2d::Color4F arg5;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);
    auto_olua_check_cocos2d_Vec2(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    manual_olua_check_cocos2d_Color4F(L, 6, &arg5);

    // void drawQuadBezier(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &control, const cocos2d::Vec2 &destination, unsigned int segments, const cocos2d::Color4F &color)
    self->drawQuadBezier(arg1, arg2, arg3, (unsigned int)arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawRect1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** origin */
    cocos2d::Vec2 arg2;       /** destination */
    cocos2d::Color4F arg3;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);
    manual_olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawRect(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &destination, const cocos2d::Color4F &color)
    self->drawRect(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawRect2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** p1 */
    cocos2d::Vec2 arg2;       /** p2 */
    cocos2d::Vec2 arg3;       /** p3 */
    cocos2d::Vec2 arg4;       /** p4 */
    cocos2d::Color4F arg5;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);
    auto_olua_check_cocos2d_Vec2(L, 4, &arg3);
    auto_olua_check_cocos2d_Vec2(L, 5, &arg4);
    manual_olua_check_cocos2d_Color4F(L, 6, &arg5);

    // void drawRect(const cocos2d::Vec2 &p1, const cocos2d::Vec2 &p2, const cocos2d::Vec2 &p3, const cocos2d::Vec2 &p4, const cocos2d::Color4F &color)
    self->drawRect(arg1, arg2, arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawRect(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 3) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2)) && (auto_olua_is_cocos2d_Vec2(L, 3)) && (manual_olua_is_cocos2d_Color4F(L, 4))) {
            // void drawRect(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &destination, const cocos2d::Color4F &color)
            return _cocos2d_DrawNode_drawRect1(L);
        // }
    }

    if (num_args == 5) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2)) && (auto_olua_is_cocos2d_Vec2(L, 3)) && (auto_olua_is_cocos2d_Vec2(L, 4)) && (auto_olua_is_cocos2d_Vec2(L, 5)) && (manual_olua_is_cocos2d_Color4F(L, 6))) {
            // void drawRect(const cocos2d::Vec2 &p1, const cocos2d::Vec2 &p2, const cocos2d::Vec2 &p3, const cocos2d::Vec2 &p4, const cocos2d::Color4F &color)
            return _cocos2d_DrawNode_drawRect2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::drawRect' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_DrawNode_drawSegment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** from */
    cocos2d::Vec2 arg2;       /** to */
    lua_Number arg3 = 0;       /** radius */
    cocos2d::Color4F arg4;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    manual_olua_check_cocos2d_Color4F(L, 5, &arg4);

    // void drawSegment(const cocos2d::Vec2 &from, const cocos2d::Vec2 &to, float radius, const cocos2d::Color4F &color)
    self->drawSegment(arg1, arg2, (float)arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawSolidCircle1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** center */
    lua_Number arg2 = 0;       /** radius */
    lua_Number arg3 = 0;       /** angle */
    lua_Unsigned arg4 = 0;       /** segments */
    lua_Number arg5 = 0;       /** scaleX */
    lua_Number arg6 = 0;       /** scaleY */
    cocos2d::Color4F arg7;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);
    olua_check_number(L, 7, &arg6);
    manual_olua_check_cocos2d_Color4F(L, 8, &arg7);

    // void drawSolidCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, float scaleX, float scaleY, const cocos2d::Color4F &color)
    self->drawSolidCircle(arg1, (float)arg2, (float)arg3, (unsigned int)arg4, (float)arg5, (float)arg6, arg7);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawSolidCircle2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** center */
    lua_Number arg2 = 0;       /** radius */
    lua_Number arg3 = 0;       /** angle */
    lua_Unsigned arg4 = 0;       /** segments */
    cocos2d::Color4F arg5;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    manual_olua_check_cocos2d_Color4F(L, 6, &arg5);

    // void drawSolidCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, const cocos2d::Color4F &color)
    self->drawSolidCircle(arg1, (float)arg2, (float)arg3, (unsigned int)arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawSolidCircle(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 5) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_uint(L, 5)) && (manual_olua_is_cocos2d_Color4F(L, 6))) {
            // void drawSolidCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, const cocos2d::Color4F &color)
            return _cocos2d_DrawNode_drawSolidCircle2(L);
        // }
    }

    if (num_args == 7) {
        // if ((auto_olua_is_cocos2d_Vec2(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_uint(L, 5)) && (olua_is_number(L, 6)) && (olua_is_number(L, 7)) && (manual_olua_is_cocos2d_Color4F(L, 8))) {
            // void drawSolidCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, float scaleX, float scaleY, const cocos2d::Color4F &color)
            return _cocos2d_DrawNode_drawSolidCircle1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::drawSolidCircle' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_DrawNode_drawSolidRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** origin */
    cocos2d::Vec2 arg2;       /** destination */
    cocos2d::Color4F arg3;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);
    manual_olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawSolidRect(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &destination, const cocos2d::Color4F &color)
    self->drawSolidRect(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_drawTriangle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 arg1;       /** p1 */
    cocos2d::Vec2 arg2;       /** p2 */
    cocos2d::Vec2 arg3;       /** p3 */
    cocos2d::Color4F arg4;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);
    auto_olua_check_cocos2d_Vec2(L, 4, &arg3);
    manual_olua_check_cocos2d_Color4F(L, 5, &arg4);

    // void drawTriangle(const cocos2d::Vec2 &p1, const cocos2d::Vec2 &p2, const cocos2d::Vec2 &p3, const cocos2d::Color4F &color)
    self->drawTriangle(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_olua_push_cocos2d_BlendFunc(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DrawNode_getLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");

    // GLfloat getLineWidth()
    GLfloat ret = (GLfloat)self->getLineWidth();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DrawNode_isIsolated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");

    // bool isIsolated()
    bool ret = (bool)self->isIsolated();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DrawNode_onDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Mat4 arg1;       /** transform */
    lua_Unsigned arg2 = 0;       /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void onDraw(const cocos2d::Mat4 &transform, uint32_t flags)
    self->onDraw(arg1, (uint32_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_onDrawGLLine(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Mat4 arg1;       /** transform */
    lua_Unsigned arg2 = 0;       /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void onDrawGLLine(const cocos2d::Mat4 &transform, uint32_t flags)
    self->onDrawGLLine(arg1, (uint32_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_onDrawGLPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Mat4 arg1;       /** transform */
    lua_Unsigned arg2 = 0;       /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void onDrawGLPoint(const cocos2d::Mat4 &transform, uint32_t flags)
    self->onDrawGLPoint(arg1, (uint32_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    auto_olua_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_setIsolated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    bool arg1 = false;       /** isolated */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    olua_check_bool(L, 2, &arg1);

    // void setIsolated(bool isolated)
    self->setIsolated(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_DrawNode_setLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    lua_Number arg1 = 0;       /** lineWidth */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DrawNode");
    olua_check_number(L, 2, &arg1);

    // void setLineWidth(GLfloat lineWidth)
    self->setLineWidth((GLfloat)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_DrawNode(lua_State *L)
{
    oluacls_class(L, "cc.DrawNode", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_DrawNode___move);
    oluacls_func(L, "clear", _cocos2d_DrawNode_clear);
    oluacls_func(L, "create", _cocos2d_DrawNode_create);
    oluacls_func(L, "drawCardinalSpline", _cocos2d_DrawNode_drawCardinalSpline);
    oluacls_func(L, "drawCatmullRom", _cocos2d_DrawNode_drawCatmullRom);
    oluacls_func(L, "drawCircle", _cocos2d_DrawNode_drawCircle);
    oluacls_func(L, "drawCubicBezier", _cocos2d_DrawNode_drawCubicBezier);
    oluacls_func(L, "drawDot", _cocos2d_DrawNode_drawDot);
    oluacls_func(L, "drawLine", _cocos2d_DrawNode_drawLine);
    oluacls_func(L, "drawPoint", _cocos2d_DrawNode_drawPoint);
    oluacls_func(L, "drawQuadBezier", _cocos2d_DrawNode_drawQuadBezier);
    oluacls_func(L, "drawRect", _cocos2d_DrawNode_drawRect);
    oluacls_func(L, "drawSegment", _cocos2d_DrawNode_drawSegment);
    oluacls_func(L, "drawSolidCircle", _cocos2d_DrawNode_drawSolidCircle);
    oluacls_func(L, "drawSolidRect", _cocos2d_DrawNode_drawSolidRect);
    oluacls_func(L, "drawTriangle", _cocos2d_DrawNode_drawTriangle);
    oluacls_func(L, "getBlendFunc", _cocos2d_DrawNode_getBlendFunc);
    oluacls_func(L, "getLineWidth", _cocos2d_DrawNode_getLineWidth);
    oluacls_func(L, "isIsolated", _cocos2d_DrawNode_isIsolated);
    oluacls_func(L, "onDraw", _cocos2d_DrawNode_onDraw);
    oluacls_func(L, "onDrawGLLine", _cocos2d_DrawNode_onDrawGLLine);
    oluacls_func(L, "onDrawGLPoint", _cocos2d_DrawNode_onDrawGLPoint);
    oluacls_func(L, "setBlendFunc", _cocos2d_DrawNode_setBlendFunc);
    oluacls_func(L, "setIsolated", _cocos2d_DrawNode_setIsolated);
    oluacls_func(L, "setLineWidth", _cocos2d_DrawNode_setLineWidth);
    oluacls_prop(L, "blendFunc", _cocos2d_DrawNode_getBlendFunc, _cocos2d_DrawNode_setBlendFunc);
    oluacls_prop(L, "isolated", _cocos2d_DrawNode_isIsolated, _cocos2d_DrawNode_setIsolated);
    oluacls_prop(L, "lineWidth", _cocos2d_DrawNode_getLineWidth, _cocos2d_DrawNode_setLineWidth);

    olua_registerluatype<cocos2d::DrawNode>(L, "cc.DrawNode");

    return 1;
}

static int luaopen_cocos2d_TextHAlignment(lua_State *L)
{
    oluacls_class(L, "cc.TextHAlignment", nullptr);
    oluacls_const_integer(L, "CENTER", (lua_Integer)cocos2d::TextHAlignment::CENTER);
    oluacls_const_integer(L, "LEFT", (lua_Integer)cocos2d::TextHAlignment::LEFT);
    oluacls_const_integer(L, "RIGHT", (lua_Integer)cocos2d::TextHAlignment::RIGHT);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_TextVAlignment(lua_State *L)
{
    oluacls_class(L, "cc.TextVAlignment", nullptr);
    oluacls_const_integer(L, "BOTTOM", (lua_Integer)cocos2d::TextVAlignment::BOTTOM);
    oluacls_const_integer(L, "CENTER", (lua_Integer)cocos2d::TextVAlignment::CENTER);
    oluacls_const_integer(L, "TOP", (lua_Integer)cocos2d::TextVAlignment::TOP);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_GlyphCollection(lua_State *L)
{
    oluacls_class(L, "cc.GlyphCollection", nullptr);
    oluacls_const_integer(L, "ASCII", (lua_Integer)cocos2d::GlyphCollection::ASCII);
    oluacls_const_integer(L, "CUSTOM", (lua_Integer)cocos2d::GlyphCollection::CUSTOM);
    oluacls_const_integer(L, "DYNAMIC", (lua_Integer)cocos2d::GlyphCollection::DYNAMIC);
    oluacls_const_integer(L, "NEHE", (lua_Integer)cocos2d::GlyphCollection::NEHE);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_LabelEffect(lua_State *L)
{
    oluacls_class(L, "cc.LabelEffect", nullptr);
    oluacls_const_integer(L, "ALL", (lua_Integer)cocos2d::LabelEffect::ALL);
    oluacls_const_integer(L, "BOLD", (lua_Integer)cocos2d::LabelEffect::BOLD);
    oluacls_const_integer(L, "GLOW", (lua_Integer)cocos2d::LabelEffect::GLOW);
    oluacls_const_integer(L, "ITALICS", (lua_Integer)cocos2d::LabelEffect::ITALICS);
    oluacls_const_integer(L, "NORMAL", (lua_Integer)cocos2d::LabelEffect::NORMAL);
    oluacls_const_integer(L, "OUTLINE", (lua_Integer)cocos2d::LabelEffect::OUTLINE);
    oluacls_const_integer(L, "SHADOW", (lua_Integer)cocos2d::LabelEffect::SHADOW);
    oluacls_const_integer(L, "STRIKETHROUGH", (lua_Integer)cocos2d::LabelEffect::STRIKETHROUGH);
    oluacls_const_integer(L, "UNDERLINE", (lua_Integer)cocos2d::LabelEffect::UNDERLINE);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_Label_LabelType(lua_State *L)
{
    oluacls_class(L, "cc.Label.LabelType", nullptr);
    oluacls_const_integer(L, "BMFONT", (lua_Integer)cocos2d::Label::LabelType::BMFONT);
    oluacls_const_integer(L, "CHARMAP", (lua_Integer)cocos2d::Label::LabelType::CHARMAP);
    oluacls_const_integer(L, "STRING_TEXTURE", (lua_Integer)cocos2d::Label::LabelType::STRING_TEXTURE);
    oluacls_const_integer(L, "TTF", (lua_Integer)cocos2d::Label::LabelType::TTF);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_Label_Overflow(lua_State *L)
{
    oluacls_class(L, "cc.Label.Overflow", nullptr);
    oluacls_const_integer(L, "CLAMP", (lua_Integer)cocos2d::Label::Overflow::CLAMP);
    oluacls_const_integer(L, "NONE", (lua_Integer)cocos2d::Label::Overflow::NONE);
    oluacls_const_integer(L, "RESIZE_HEIGHT", (lua_Integer)cocos2d::Label::Overflow::RESIZE_HEIGHT);
    oluacls_const_integer(L, "SHRINK", (lua_Integer)cocos2d::Label::Overflow::SHRINK);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_Label___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Label *)olua_toobj(L, 1, "cc.Label");
    olua_push_cppobj(L, self, "cc.Label");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Label_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Label *create()
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithBMFont1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */
    lua_Unsigned arg3 = 0;       /** hAlignment */
    lua_Integer arg4 = 0;       /** maxLineWidth */
    cocos2d::Vec2 arg5;       /** imageOffset */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);
    auto_olua_check_cocos2d_Vec2(L, 5, &arg5);

    // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth, @optional const cocos2d::Vec2 &imageOffset)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithBMFont(arg1, arg2, (cocos2d::TextHAlignment)arg3, (int)arg4, arg5);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithBMFont2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);

    // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth, @optional const cocos2d::Vec2 &imageOffset)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithBMFont(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithBMFont3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */
    lua_Unsigned arg3 = 0;       /** hAlignment */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth, @optional const cocos2d::Vec2 &imageOffset)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithBMFont(arg1, arg2, (cocos2d::TextHAlignment)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithBMFont4(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */
    lua_Unsigned arg3 = 0;       /** hAlignment */
    lua_Integer arg4 = 0;       /** maxLineWidth */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth, @optional const cocos2d::Vec2 &imageOffset)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithBMFont(arg1, arg2, (cocos2d::TextHAlignment)arg3, (int)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithBMFont(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2))) {
            // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth, @optional const cocos2d::Vec2 &imageOffset)
            return _cocos2d_Label_createWithBMFont2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_uint(L, 3))) {
            // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth, @optional const cocos2d::Vec2 &imageOffset)
            return _cocos2d_Label_createWithBMFont3(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_uint(L, 3)) && (olua_is_int(L, 4))) {
            // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth, @optional const cocos2d::Vec2 &imageOffset)
            return _cocos2d_Label_createWithBMFont4(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_uint(L, 3)) && (olua_is_int(L, 4)) && (auto_olua_is_cocos2d_Vec2(L, 5))) {
            // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth, @optional const cocos2d::Vec2 &imageOffset)
            return _cocos2d_Label_createWithBMFont1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithBMFont' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_createWithCharMap1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** charMapFile */
    lua_Integer arg2 = 0;       /** itemWidth */
    lua_Integer arg3 = 0;       /** itemHeight */
    lua_Integer arg4 = 0;       /** startCharMap */

    olua_check_std_string(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static cocos2d::Label *createWithCharMap(const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithCharMap(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithCharMap2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    lua_Integer arg2 = 0;       /** itemWidth */
    lua_Integer arg3 = 0;       /** itemHeight */
    lua_Integer arg4 = 0;       /** startCharMap */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static cocos2d::Label *createWithCharMap(cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithCharMap(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithCharMap3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** plistFile */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::Label *createWithCharMap(const std::string &plistFile)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithCharMap(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithCharMap(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 1))) {
            // static cocos2d::Label *createWithCharMap(const std::string &plistFile)
            return _cocos2d_Label_createWithCharMap3(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_std_string(L, 1)) && (olua_is_int(L, 2)) && (olua_is_int(L, 3)) && (olua_is_int(L, 4))) {
            // static cocos2d::Label *createWithCharMap(const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
            return _cocos2d_Label_createWithCharMap1(L);
        }

        // if ((olua_is_cppobj(L, 1, "cc.Texture2D")) && (olua_is_int(L, 2)) && (olua_is_int(L, 3)) && (olua_is_int(L, 4))) {
            // static cocos2d::Label *createWithCharMap(cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
            return _cocos2d_Label_createWithCharMap2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithCharMap' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_createWithSystemFont1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** font */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */
    lua_Unsigned arg6 = 0;       /** vAlignment */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_olua_check_cocos2d_Size(L, 4, &arg4);
    olua_check_uint(L, 5, &arg5);
    olua_check_uint(L, 6, &arg6);

    // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithSystemFont(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5, (cocos2d::TextVAlignment)arg6);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithSystemFont2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** font */
    lua_Number arg3 = 0;       /** fontSize */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithSystemFont(arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithSystemFont3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** font */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_olua_check_cocos2d_Size(L, 4, &arg4);

    // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithSystemFont(arg1, arg2, (float)arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithSystemFont4(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** font */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_olua_check_cocos2d_Size(L, 4, &arg4);
    olua_check_uint(L, 5, &arg5);

    // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithSystemFont(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithSystemFont(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_createWithSystemFont2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_number(L, 3)) && (auto_olua_is_cocos2d_Size(L, 4))) {
            // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_createWithSystemFont3(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_number(L, 3)) && (auto_olua_is_cocos2d_Size(L, 4)) && (olua_is_uint(L, 5))) {
            // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_createWithSystemFont4(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_number(L, 3)) && (auto_olua_is_cocos2d_Size(L, 4)) && (olua_is_uint(L, 5)) && (olua_is_uint(L, 6))) {
            // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_createWithSystemFont1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithSystemFont' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_createWithTTF1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */
    lua_Unsigned arg6 = 0;       /** vAlignment */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_olua_check_cocos2d_Size(L, 4, &arg4);
    olua_check_uint(L, 5, &arg5);
    olua_check_uint(L, 6, &arg6);

    // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithTTF(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5, (cocos2d::TextVAlignment)arg6);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithTTF2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TTFConfig arg1;       /** ttfConfig */
    std::string arg2;       /** text */
    lua_Unsigned arg3 = 0;       /** hAlignment */
    lua_Integer arg4 = 0;       /** maxLineWidth */

    auto_olua_check_cocos2d_TTFConfig(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithTTF(arg1, arg2, (cocos2d::TextHAlignment)arg3, (int)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithTTF3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    lua_Number arg3 = 0;       /** fontSize */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithTTF(arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithTTF4(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_olua_check_cocos2d_Size(L, 4, &arg4);

    // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithTTF(arg1, arg2, (float)arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithTTF5(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_olua_check_cocos2d_Size(L, 4, &arg4);
    olua_check_uint(L, 5, &arg5);

    // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithTTF(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithTTF6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TTFConfig arg1;       /** ttfConfig */
    std::string arg2;       /** text */

    auto_olua_check_cocos2d_TTFConfig(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);

    // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithTTF(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithTTF7(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TTFConfig arg1;       /** ttfConfig */
    std::string arg2;       /** text */
    lua_Unsigned arg3 = 0;       /** hAlignment */

    auto_olua_check_cocos2d_TTFConfig(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithTTF(arg1, arg2, (cocos2d::TextHAlignment)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_createWithTTF(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((auto_olua_is_cocos2d_TTFConfig(L, 1)) && (olua_is_std_string(L, 2))) {
            // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
            return _cocos2d_Label_createWithTTF6(L);
        // }
    }

    if (num_args == 3) {
        if ((auto_olua_is_cocos2d_TTFConfig(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_uint(L, 3))) {
            // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
            return _cocos2d_Label_createWithTTF7(L);
        }

        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_createWithTTF3(L);
        // }
    }

    if (num_args == 4) {
        if ((auto_olua_is_cocos2d_TTFConfig(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_uint(L, 3)) && (olua_is_int(L, 4))) {
            // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
            return _cocos2d_Label_createWithTTF2(L);
        }

        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_number(L, 3)) && (auto_olua_is_cocos2d_Size(L, 4))) {
            // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_createWithTTF4(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_number(L, 3)) && (auto_olua_is_cocos2d_Size(L, 4)) && (olua_is_uint(L, 5))) {
            // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_createWithTTF5(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_number(L, 3)) && (auto_olua_is_cocos2d_Size(L, 4)) && (olua_is_uint(L, 5)) && (olua_is_uint(L, 6))) {
            // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_createWithTTF1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithTTF' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_disableEffect1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void disableEffect()
    self->disableEffect();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_disableEffect2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;       /** effect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void disableEffect(cocos2d::LabelEffect effect)
    self->disableEffect((cocos2d::LabelEffect)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_disableEffect(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // void disableEffect()
        return _cocos2d_Label_disableEffect1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_uint(L, 2))) {
            // void disableEffect(cocos2d::LabelEffect effect)
            return _cocos2d_Label_disableEffect2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::disableEffect' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_enableBold(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void enableBold()
    self->enableBold();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableGlow(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** glowColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void enableGlow(const cocos2d::Color4B &glowColor)
    self->enableGlow(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableItalics(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void enableItalics()
    self->enableItalics();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableOutline1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** outlineColor */
    lua_Integer arg2 = 0;       /** outlineSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void enableOutline(const cocos2d::Color4B &outlineColor, @optional int outlineSize)
    self->enableOutline(arg1, (int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableOutline2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** outlineColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void enableOutline(const cocos2d::Color4B &outlineColor, @optional int outlineSize)
    self->enableOutline(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableOutline(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 2))) {
            // void enableOutline(const cocos2d::Color4B &outlineColor, @optional int outlineSize)
            return _cocos2d_Label_enableOutline2(L);
        // }
    }

    if (num_args == 2) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 2)) && (olua_is_int(L, 3))) {
            // void enableOutline(const cocos2d::Color4B &outlineColor, @optional int outlineSize)
            return _cocos2d_Label_enableOutline1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::enableOutline' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_enableShadow1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** shadowColor */
    cocos2d::Size arg2;       /** offset */
    lua_Integer arg3 = 0;       /** blurRadius */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);
    auto_olua_check_cocos2d_Size(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
    self->enableShadow(arg1, arg2, (int)arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableShadow2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
    self->enableShadow();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableShadow3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** shadowColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
    self->enableShadow(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableShadow4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** shadowColor */
    cocos2d::Size arg2;       /** offset */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);
    auto_olua_check_cocos2d_Size(L, 3, &arg2);

    // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
    self->enableShadow(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableShadow(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
        return _cocos2d_Label_enableShadow2(L);
    }

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 2))) {
            // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
            return _cocos2d_Label_enableShadow3(L);
        // }
    }

    if (num_args == 2) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 2)) && (auto_olua_is_cocos2d_Size(L, 3))) {
            // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
            return _cocos2d_Label_enableShadow4(L);
        // }
    }

    if (num_args == 3) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 2)) && (auto_olua_is_cocos2d_Size(L, 3)) && (olua_is_int(L, 4))) {
            // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
            return _cocos2d_Label_enableShadow1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::enableShadow' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_enableStrikethrough(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void enableStrikethrough()
    self->enableStrikethrough();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableUnderline(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void enableUnderline()
    self->enableUnderline();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_enableWrap(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    bool arg1 = false;       /** enable */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_bool(L, 2, &arg1);

    // void enableWrap(bool enable)
    self->enableWrap(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_getAdditionalKerning(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getAdditionalKerning()
    float ret = (float)self->getAdditionalKerning();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getBMFontFilePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const std::string &getBMFontFilePath()
    const std::string &ret = (const std::string &)self->getBMFontFilePath();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getBMFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getBMFontSize()
    float ret = (float)self->getBMFontSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_olua_push_cocos2d_BlendFunc(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getDimensions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const cocos2d::Size &getDimensions()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getDimensions();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getEffectColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::Color4F getEffectColor()
    cocos2d::Color4F ret = (cocos2d::Color4F)self->getEffectColor();
    int num_ret = manual_olua_push_cocos2d_Color4F(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getFontAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::FontAtlas *getFontAtlas()
    cocos2d::FontAtlas *ret = (cocos2d::FontAtlas *)self->getFontAtlas();
    int num_ret = olua_push_cppobj(L, ret, "cc.FontAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getHeight()
    float ret = (float)self->getHeight();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getHorizontalAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::TextHAlignment getHorizontalAlignment()
    cocos2d::TextHAlignment ret = (cocos2d::TextHAlignment)self->getHorizontalAlignment();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getLabelEffectType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::LabelEffect getLabelEffectType()
    cocos2d::LabelEffect ret = (cocos2d::LabelEffect)self->getLabelEffectType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getLabelType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::Label::LabelType getLabelType()
    cocos2d::Label::LabelType ret = (cocos2d::Label::LabelType)self->getLabelType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getLetter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Integer arg1 = 0;       /** lettetIndex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_int(L, 2, &arg1);

    // cocos2d::Sprite *getLetter(int lettetIndex)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)self->getLetter((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getLineHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getLineHeight()
    float ret = (float)self->getLineHeight();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getLineSpacing(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getLineSpacing()
    float ret = (float)self->getLineSpacing();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getMaxLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getMaxLineWidth()
    float ret = (float)self->getMaxLineWidth();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getOutlineSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getOutlineSize()
    float ret = (float)self->getOutlineSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getOverflow(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::Label::Overflow getOverflow()
    cocos2d::Label::Overflow ret = (cocos2d::Label::Overflow)self->getOverflow();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getRenderingFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getRenderingFontSize()
    float ret = (float)self->getRenderingFontSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getShadowBlurRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getShadowBlurRadius()
    float ret = (float)self->getShadowBlurRadius();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getShadowColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::Color4F getShadowColor()
    cocos2d::Color4F ret = (cocos2d::Color4F)self->getShadowColor();
    int num_ret = manual_olua_push_cocos2d_Color4F(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getShadowOffset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::Size getShadowOffset()
    cocos2d::Size ret = (cocos2d::Size)self->getShadowOffset();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const std::string &getString()
    const std::string &ret = (const std::string &)self->getString();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getStringLength(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // int getStringLength()
    int ret = (int)self->getStringLength();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getStringNumLines(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // int getStringNumLines()
    int ret = (int)self->getStringNumLines();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getSystemFontName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const std::string &getSystemFontName()
    const std::string &ret = (const std::string &)self->getSystemFontName();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getSystemFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getSystemFontSize()
    float ret = (float)self->getSystemFontSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getTTFConfig(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const cocos2d::TTFConfig &getTTFConfig()
    const cocos2d::TTFConfig &ret = (const cocos2d::TTFConfig &)self->getTTFConfig();
    int num_ret = auto_olua_push_cocos2d_TTFConfig(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getTextAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::TextHAlignment getTextAlignment()
    cocos2d::TextHAlignment ret = (cocos2d::TextHAlignment)self->getTextAlignment();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getTextColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const cocos2d::Color4B &getTextColor()
    const cocos2d::Color4B &ret = (const cocos2d::Color4B &)self->getTextColor();
    int num_ret = manual_olua_push_cocos2d_Color4B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getVerticalAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // cocos2d::TextVAlignment getVerticalAlignment()
    cocos2d::TextVAlignment ret = (cocos2d::TextVAlignment)self->getVerticalAlignment();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_getWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getWidth()
    float ret = (float)self->getWidth();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_initWithTTF1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */
    lua_Unsigned arg6 = 0;       /** vAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    auto_olua_check_cocos2d_Size(L, 5, &arg4);
    olua_check_uint(L, 6, &arg5);
    olua_check_uint(L, 7, &arg6);

    // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    bool ret = (bool)self->initWithTTF(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5, (cocos2d::TextVAlignment)arg6);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_initWithTTF2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TTFConfig arg1;       /** ttfConfig */
    std::string arg2;       /** text */
    lua_Unsigned arg3 = 0;       /** hAlignment */
    lua_Integer arg4 = 0;       /** maxLineWidth */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    auto_olua_check_cocos2d_TTFConfig(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
    bool ret = (bool)self->initWithTTF(arg1, arg2, (cocos2d::TextHAlignment)arg3, (int)arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_initWithTTF3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    lua_Number arg3 = 0;       /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    bool ret = (bool)self->initWithTTF(arg1, arg2, (float)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_initWithTTF4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    auto_olua_check_cocos2d_Size(L, 5, &arg4);

    // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    bool ret = (bool)self->initWithTTF(arg1, arg2, (float)arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_initWithTTF5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    lua_Number arg3 = 0;       /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;       /** hAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    auto_olua_check_cocos2d_Size(L, 5, &arg4);
    olua_check_uint(L, 6, &arg5);

    // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    bool ret = (bool)self->initWithTTF(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_initWithTTF6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TTFConfig arg1;       /** ttfConfig */
    std::string arg2;       /** text */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    auto_olua_check_cocos2d_TTFConfig(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
    bool ret = (bool)self->initWithTTF(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_initWithTTF7(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TTFConfig arg1;       /** ttfConfig */
    std::string arg2;       /** text */
    lua_Unsigned arg3 = 0;       /** hAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    auto_olua_check_cocos2d_TTFConfig(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
    bool ret = (bool)self->initWithTTF(arg1, arg2, (cocos2d::TextHAlignment)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_initWithTTF(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((auto_olua_is_cocos2d_TTFConfig(L, 2)) && (olua_is_std_string(L, 3))) {
            // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
            return _cocos2d_Label_initWithTTF6(L);
        // }
    }

    if (num_args == 3) {
        if ((auto_olua_is_cocos2d_TTFConfig(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_uint(L, 4))) {
            // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
            return _cocos2d_Label_initWithTTF7(L);
        }

        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4))) {
            // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_initWithTTF3(L);
        // }
    }

    if (num_args == 4) {
        if ((auto_olua_is_cocos2d_TTFConfig(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_uint(L, 4)) && (olua_is_int(L, 5))) {
            // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
            return _cocos2d_Label_initWithTTF2(L);
        }

        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5))) {
            // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_initWithTTF4(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5)) && (olua_is_uint(L, 6))) {
            // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_initWithTTF5(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5)) && (olua_is_uint(L, 6)) && (olua_is_uint(L, 7))) {
            // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_initWithTTF1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::initWithTTF' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_isClipMarginEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // bool isClipMarginEnabled()
    bool ret = (bool)self->isClipMarginEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_isShadowEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // bool isShadowEnabled()
    bool ret = (bool)self->isShadowEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_isWrapEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // bool isWrapEnabled()
    bool ret = (bool)self->isWrapEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_requestSystemFontRefresh(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void requestSystemFontRefresh()
    self->requestSystemFontRefresh();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setAdditionalKerning(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;       /** space */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setAdditionalKerning(float space)
    self->setAdditionalKerning((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setAlignment1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;       /** hAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void setAlignment(cocos2d::TextHAlignment hAlignment)
    self->setAlignment((cocos2d::TextHAlignment)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setAlignment2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;       /** hAlignment */
    lua_Unsigned arg2 = 0;       /** vAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void setAlignment(cocos2d::TextHAlignment hAlignment, cocos2d::TextVAlignment vAlignment)
    self->setAlignment((cocos2d::TextHAlignment)arg1, (cocos2d::TextVAlignment)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setAlignment(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_uint(L, 2))) {
            // void setAlignment(cocos2d::TextHAlignment hAlignment)
            return _cocos2d_Label_setAlignment1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_uint(L, 2)) && (olua_is_uint(L, 3))) {
            // void setAlignment(cocos2d::TextHAlignment hAlignment, cocos2d::TextVAlignment vAlignment)
            return _cocos2d_Label_setAlignment2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::setAlignment' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_setBMFontFilePath1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */
    cocos2d::Vec2 arg2;       /** imageOffset */
    lua_Number arg3 = 0;       /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool setBMFontFilePath(const std::string &bmfontFilePath, @optional const cocos2d::Vec2 &imageOffset, @optional float fontSize)
    bool ret = (bool)self->setBMFontFilePath(arg1, arg2, (float)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_setBMFontFilePath2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);

    // bool setBMFontFilePath(const std::string &bmfontFilePath, @optional const cocos2d::Vec2 &imageOffset, @optional float fontSize)
    bool ret = (bool)self->setBMFontFilePath(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_setBMFontFilePath3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */
    cocos2d::Vec2 arg2;       /** imageOffset */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg2);

    // bool setBMFontFilePath(const std::string &bmfontFilePath, @optional const cocos2d::Vec2 &imageOffset, @optional float fontSize)
    bool ret = (bool)self->setBMFontFilePath(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_setBMFontFilePath(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // bool setBMFontFilePath(const std::string &bmfontFilePath, @optional const cocos2d::Vec2 &imageOffset, @optional float fontSize)
            return _cocos2d_Label_setBMFontFilePath2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (auto_olua_is_cocos2d_Vec2(L, 3))) {
            // bool setBMFontFilePath(const std::string &bmfontFilePath, @optional const cocos2d::Vec2 &imageOffset, @optional float fontSize)
            return _cocos2d_Label_setBMFontFilePath3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 2)) && (auto_olua_is_cocos2d_Vec2(L, 3)) && (olua_is_number(L, 4))) {
            // bool setBMFontFilePath(const std::string &bmfontFilePath, @optional const cocos2d::Vec2 &imageOffset, @optional float fontSize)
            return _cocos2d_Label_setBMFontFilePath1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::setBMFontFilePath' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_setBMFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;       /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setBMFontSize(float fontSize)
    self->setBMFontSize((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    auto_olua_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setCharMap1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** charMapFile */
    lua_Integer arg2 = 0;       /** itemWidth */
    lua_Integer arg3 = 0;       /** itemHeight */
    lua_Integer arg4 = 0;       /** startCharMap */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // bool setCharMap(const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
    bool ret = (bool)self->setCharMap(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_setCharMap2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    lua_Integer arg2 = 0;       /** itemWidth */
    lua_Integer arg3 = 0;       /** itemHeight */
    lua_Integer arg4 = 0;       /** startCharMap */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // bool setCharMap(cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
    bool ret = (bool)self->setCharMap(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_setCharMap3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** plistFile */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);

    // bool setCharMap(const std::string &plistFile)
    bool ret = (bool)self->setCharMap(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_setCharMap(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // bool setCharMap(const std::string &plistFile)
            return _cocos2d_Label_setCharMap3(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_std_string(L, 2)) && (olua_is_int(L, 3)) && (olua_is_int(L, 4)) && (olua_is_int(L, 5))) {
            // bool setCharMap(const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
            return _cocos2d_Label_setCharMap1(L);
        }

        // if ((olua_is_cppobj(L, 2, "cc.Texture2D")) && (olua_is_int(L, 3)) && (olua_is_int(L, 4)) && (olua_is_int(L, 5))) {
            // bool setCharMap(cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
            return _cocos2d_Label_setCharMap2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::setCharMap' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_setClipMarginEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    bool arg1 = false;       /** clipEnabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_bool(L, 2, &arg1);

    // void setClipMarginEnabled(bool clipEnabled)
    self->setClipMarginEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setDimensions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;       /** width */
    lua_Number arg2 = 0;       /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setDimensions(float width, float height)
    self->setDimensions((float)arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;       /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setHeight(float height)
    self->setHeight((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setHorizontalAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;       /** hAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void setHorizontalAlignment(cocos2d::TextHAlignment hAlignment)
    self->setHorizontalAlignment((cocos2d::TextHAlignment)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setLineBreakWithoutSpace(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    bool arg1 = false;       /** breakWithoutSpace */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_bool(L, 2, &arg1);

    // void setLineBreakWithoutSpace(bool breakWithoutSpace)
    self->setLineBreakWithoutSpace(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setLineHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;       /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setLineHeight(float height)
    self->setLineHeight((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setLineSpacing(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;       /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setLineSpacing(float height)
    self->setLineSpacing((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setMaxLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;       /** maxLineWidth */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setMaxLineWidth(float maxLineWidth)
    self->setMaxLineWidth((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setOverflow(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;       /** overflow */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void setOverflow(cocos2d::Label::Overflow overflow)
    self->setOverflow((cocos2d::Label::Overflow)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);

    // void setString(const std::string &text)
    self->setString(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setSystemFontName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** font */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);

    // void setSystemFontName(const std::string &font)
    self->setSystemFontName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setSystemFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;       /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setSystemFontSize(float fontSize)
    self->setSystemFontSize((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setTTFConfig(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TTFConfig arg1;       /** ttfConfig */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    auto_olua_check_cocos2d_TTFConfig(L, 2, &arg1);

    // bool setTTFConfig(const cocos2d::TTFConfig &ttfConfig)
    bool ret = (bool)self->setTTFConfig(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Label_setTextColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void setTextColor(const cocos2d::Color4B &color)
    self->setTextColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setVerticalAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;       /** vAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void setVerticalAlignment(cocos2d::TextVAlignment vAlignment)
    self->setVerticalAlignment((cocos2d::TextVAlignment)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_setWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;       /** width */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setWidth(float width)
    self->setWidth((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Label_updateContent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void updateContent()
    self->updateContent();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Label(lua_State *L)
{
    oluacls_class(L, "cc.Label", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_Label___move);
    oluacls_func(L, "create", _cocos2d_Label_create);
    oluacls_func(L, "createWithBMFont", _cocos2d_Label_createWithBMFont);
    oluacls_func(L, "createWithCharMap", _cocos2d_Label_createWithCharMap);
    oluacls_func(L, "createWithSystemFont", _cocos2d_Label_createWithSystemFont);
    oluacls_func(L, "createWithTTF", _cocos2d_Label_createWithTTF);
    oluacls_func(L, "disableEffect", _cocos2d_Label_disableEffect);
    oluacls_func(L, "enableBold", _cocos2d_Label_enableBold);
    oluacls_func(L, "enableGlow", _cocos2d_Label_enableGlow);
    oluacls_func(L, "enableItalics", _cocos2d_Label_enableItalics);
    oluacls_func(L, "enableOutline", _cocos2d_Label_enableOutline);
    oluacls_func(L, "enableShadow", _cocos2d_Label_enableShadow);
    oluacls_func(L, "enableStrikethrough", _cocos2d_Label_enableStrikethrough);
    oluacls_func(L, "enableUnderline", _cocos2d_Label_enableUnderline);
    oluacls_func(L, "enableWrap", _cocos2d_Label_enableWrap);
    oluacls_func(L, "getAdditionalKerning", _cocos2d_Label_getAdditionalKerning);
    oluacls_func(L, "getBMFontFilePath", _cocos2d_Label_getBMFontFilePath);
    oluacls_func(L, "getBMFontSize", _cocos2d_Label_getBMFontSize);
    oluacls_func(L, "getBlendFunc", _cocos2d_Label_getBlendFunc);
    oluacls_func(L, "getDimensions", _cocos2d_Label_getDimensions);
    oluacls_func(L, "getEffectColor", _cocos2d_Label_getEffectColor);
    oluacls_func(L, "getFontAtlas", _cocos2d_Label_getFontAtlas);
    oluacls_func(L, "getHeight", _cocos2d_Label_getHeight);
    oluacls_func(L, "getHorizontalAlignment", _cocos2d_Label_getHorizontalAlignment);
    oluacls_func(L, "getLabelEffectType", _cocos2d_Label_getLabelEffectType);
    oluacls_func(L, "getLabelType", _cocos2d_Label_getLabelType);
    oluacls_func(L, "getLetter", _cocos2d_Label_getLetter);
    oluacls_func(L, "getLineHeight", _cocos2d_Label_getLineHeight);
    oluacls_func(L, "getLineSpacing", _cocos2d_Label_getLineSpacing);
    oluacls_func(L, "getMaxLineWidth", _cocos2d_Label_getMaxLineWidth);
    oluacls_func(L, "getOutlineSize", _cocos2d_Label_getOutlineSize);
    oluacls_func(L, "getOverflow", _cocos2d_Label_getOverflow);
    oluacls_func(L, "getRenderingFontSize", _cocos2d_Label_getRenderingFontSize);
    oluacls_func(L, "getShadowBlurRadius", _cocos2d_Label_getShadowBlurRadius);
    oluacls_func(L, "getShadowColor", _cocos2d_Label_getShadowColor);
    oluacls_func(L, "getShadowOffset", _cocos2d_Label_getShadowOffset);
    oluacls_func(L, "getString", _cocos2d_Label_getString);
    oluacls_func(L, "getStringLength", _cocos2d_Label_getStringLength);
    oluacls_func(L, "getStringNumLines", _cocos2d_Label_getStringNumLines);
    oluacls_func(L, "getSystemFontName", _cocos2d_Label_getSystemFontName);
    oluacls_func(L, "getSystemFontSize", _cocos2d_Label_getSystemFontSize);
    oluacls_func(L, "getTTFConfig", _cocos2d_Label_getTTFConfig);
    oluacls_func(L, "getTextAlignment", _cocos2d_Label_getTextAlignment);
    oluacls_func(L, "getTextColor", _cocos2d_Label_getTextColor);
    oluacls_func(L, "getVerticalAlignment", _cocos2d_Label_getVerticalAlignment);
    oluacls_func(L, "getWidth", _cocos2d_Label_getWidth);
    oluacls_func(L, "initWithTTF", _cocos2d_Label_initWithTTF);
    oluacls_func(L, "isClipMarginEnabled", _cocos2d_Label_isClipMarginEnabled);
    oluacls_func(L, "isShadowEnabled", _cocos2d_Label_isShadowEnabled);
    oluacls_func(L, "isWrapEnabled", _cocos2d_Label_isWrapEnabled);
    oluacls_func(L, "requestSystemFontRefresh", _cocos2d_Label_requestSystemFontRefresh);
    oluacls_func(L, "setAdditionalKerning", _cocos2d_Label_setAdditionalKerning);
    oluacls_func(L, "setAlignment", _cocos2d_Label_setAlignment);
    oluacls_func(L, "setBMFontFilePath", _cocos2d_Label_setBMFontFilePath);
    oluacls_func(L, "setBMFontSize", _cocos2d_Label_setBMFontSize);
    oluacls_func(L, "setBlendFunc", _cocos2d_Label_setBlendFunc);
    oluacls_func(L, "setCharMap", _cocos2d_Label_setCharMap);
    oluacls_func(L, "setClipMarginEnabled", _cocos2d_Label_setClipMarginEnabled);
    oluacls_func(L, "setDimensions", _cocos2d_Label_setDimensions);
    oluacls_func(L, "setHeight", _cocos2d_Label_setHeight);
    oluacls_func(L, "setHorizontalAlignment", _cocos2d_Label_setHorizontalAlignment);
    oluacls_func(L, "setLineBreakWithoutSpace", _cocos2d_Label_setLineBreakWithoutSpace);
    oluacls_func(L, "setLineHeight", _cocos2d_Label_setLineHeight);
    oluacls_func(L, "setLineSpacing", _cocos2d_Label_setLineSpacing);
    oluacls_func(L, "setMaxLineWidth", _cocos2d_Label_setMaxLineWidth);
    oluacls_func(L, "setOverflow", _cocos2d_Label_setOverflow);
    oluacls_func(L, "setString", _cocos2d_Label_setString);
    oluacls_func(L, "setSystemFontName", _cocos2d_Label_setSystemFontName);
    oluacls_func(L, "setSystemFontSize", _cocos2d_Label_setSystemFontSize);
    oluacls_func(L, "setTTFConfig", _cocos2d_Label_setTTFConfig);
    oluacls_func(L, "setTextColor", _cocos2d_Label_setTextColor);
    oluacls_func(L, "setVerticalAlignment", _cocos2d_Label_setVerticalAlignment);
    oluacls_func(L, "setWidth", _cocos2d_Label_setWidth);
    oluacls_func(L, "updateContent", _cocos2d_Label_updateContent);
    oluacls_prop(L, "additionalKerning", _cocos2d_Label_getAdditionalKerning, _cocos2d_Label_setAdditionalKerning);
    oluacls_prop(L, "blendFunc", _cocos2d_Label_getBlendFunc, _cocos2d_Label_setBlendFunc);
    oluacls_prop(L, "bmFontFilePath", _cocos2d_Label_getBMFontFilePath, _cocos2d_Label_setBMFontFilePath);
    oluacls_prop(L, "bmFontSize", _cocos2d_Label_getBMFontSize, _cocos2d_Label_setBMFontSize);
    oluacls_prop(L, "clipMarginEnabled", _cocos2d_Label_isClipMarginEnabled, _cocos2d_Label_setClipMarginEnabled);
    oluacls_prop(L, "dimensions", _cocos2d_Label_getDimensions, _cocos2d_Label_setDimensions);
    oluacls_prop(L, "effectColor", _cocos2d_Label_getEffectColor, nullptr);
    oluacls_prop(L, "fontAtlas", _cocos2d_Label_getFontAtlas, nullptr);
    oluacls_prop(L, "height", _cocos2d_Label_getHeight, _cocos2d_Label_setHeight);
    oluacls_prop(L, "horizontalAlignment", _cocos2d_Label_getHorizontalAlignment, _cocos2d_Label_setHorizontalAlignment);
    oluacls_prop(L, "labelEffectType", _cocos2d_Label_getLabelEffectType, nullptr);
    oluacls_prop(L, "labelType", _cocos2d_Label_getLabelType, nullptr);
    oluacls_prop(L, "lineHeight", _cocos2d_Label_getLineHeight, _cocos2d_Label_setLineHeight);
    oluacls_prop(L, "lineSpacing", _cocos2d_Label_getLineSpacing, _cocos2d_Label_setLineSpacing);
    oluacls_prop(L, "maxLineWidth", _cocos2d_Label_getMaxLineWidth, _cocos2d_Label_setMaxLineWidth);
    oluacls_prop(L, "outlineSize", _cocos2d_Label_getOutlineSize, nullptr);
    oluacls_prop(L, "overflow", _cocos2d_Label_getOverflow, _cocos2d_Label_setOverflow);
    oluacls_prop(L, "renderingFontSize", _cocos2d_Label_getRenderingFontSize, nullptr);
    oluacls_prop(L, "shadowBlurRadius", _cocos2d_Label_getShadowBlurRadius, nullptr);
    oluacls_prop(L, "shadowColor", _cocos2d_Label_getShadowColor, nullptr);
    oluacls_prop(L, "shadowEnabled", _cocos2d_Label_isShadowEnabled, nullptr);
    oluacls_prop(L, "shadowOffset", _cocos2d_Label_getShadowOffset, nullptr);
    oluacls_prop(L, "string", _cocos2d_Label_getString, _cocos2d_Label_setString);
    oluacls_prop(L, "stringLength", _cocos2d_Label_getStringLength, nullptr);
    oluacls_prop(L, "stringNumLines", _cocos2d_Label_getStringNumLines, nullptr);
    oluacls_prop(L, "systemFontName", _cocos2d_Label_getSystemFontName, _cocos2d_Label_setSystemFontName);
    oluacls_prop(L, "systemFontSize", _cocos2d_Label_getSystemFontSize, _cocos2d_Label_setSystemFontSize);
    oluacls_prop(L, "textAlignment", _cocos2d_Label_getTextAlignment, nullptr);
    oluacls_prop(L, "textColor", _cocos2d_Label_getTextColor, _cocos2d_Label_setTextColor);
    oluacls_prop(L, "ttfConfig", _cocos2d_Label_getTTFConfig, _cocos2d_Label_setTTFConfig);
    oluacls_prop(L, "verticalAlignment", _cocos2d_Label_getVerticalAlignment, _cocos2d_Label_setVerticalAlignment);
    oluacls_prop(L, "width", _cocos2d_Label_getWidth, _cocos2d_Label_setWidth);
    oluacls_prop(L, "wrapEnabled", _cocos2d_Label_isWrapEnabled, nullptr);

    olua_registerluatype<cocos2d::Label>(L, "cc.Label");

    return 1;
}

static int _cocos2d_LabelAtlas___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::LabelAtlas *)olua_toobj(L, 1, "cc.LabelAtlas");
    olua_push_cppobj(L, self, "cc.LabelAtlas");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_LabelAtlas_create1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LabelAtlas *create()
    cocos2d::LabelAtlas *ret = (cocos2d::LabelAtlas *)cocos2d::LabelAtlas::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.LabelAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LabelAtlas_create2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** string */
    std::string arg2;       /** charMapFile */
    lua_Integer arg3 = 0;       /** itemWidth */
    lua_Integer arg4 = 0;       /** itemHeight */
    lua_Integer arg5 = 0;       /** startCharMap */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);
    olua_check_int(L, 5, &arg5);

    // static cocos2d::LabelAtlas *create(const std::string &string, const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
    cocos2d::LabelAtlas *ret = (cocos2d::LabelAtlas *)cocos2d::LabelAtlas::create(arg1, arg2, (int)arg3, (int)arg4, (int)arg5);
    int num_ret = olua_push_cppobj(L, ret, "cc.LabelAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LabelAtlas_create3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** string */
    std::string arg2;       /** fntFile */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);

    // static cocos2d::LabelAtlas *create(const std::string &string, const std::string &fntFile)
    cocos2d::LabelAtlas *ret = (cocos2d::LabelAtlas *)cocos2d::LabelAtlas::create(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.LabelAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LabelAtlas_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::LabelAtlas *create()
        return _cocos2d_LabelAtlas_create1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2))) {
            // static cocos2d::LabelAtlas *create(const std::string &string, const std::string &fntFile)
            return _cocos2d_LabelAtlas_create3(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_int(L, 3)) && (olua_is_int(L, 4)) && (olua_is_int(L, 5))) {
            // static cocos2d::LabelAtlas *create(const std::string &string, const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
            return _cocos2d_LabelAtlas_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LabelAtlas::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LabelAtlas_getString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LabelAtlas");

    // const std::string &getString()
    const std::string &ret = (const std::string &)self->getString();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LabelAtlas_initWithString1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;
    std::string arg1;       /** string */
    std::string arg2;       /** charMapFile */
    lua_Integer arg3 = 0;       /** itemWidth */
    lua_Integer arg4 = 0;       /** itemHeight */
    lua_Integer arg5 = 0;       /** startCharMap */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LabelAtlas");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);

    // bool initWithString(const std::string &string, const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
    bool ret = (bool)self->initWithString(arg1, arg2, (int)arg3, (int)arg4, (int)arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LabelAtlas_initWithString2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;
    std::string arg1;       /** string */
    std::string arg2;       /** fntFile */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LabelAtlas");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool initWithString(const std::string &string, const std::string &fntFile)
    bool ret = (bool)self->initWithString(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LabelAtlas_initWithString3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;
    std::string arg1;       /** string */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */
    lua_Integer arg3 = 0;       /** itemWidth */
    lua_Integer arg4 = 0;       /** itemHeight */
    lua_Integer arg5 = 0;       /** startCharMap */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LabelAtlas");
    olua_check_std_string(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Texture2D");
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);

    // bool initWithString(const std::string &string, cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
    bool ret = (bool)self->initWithString(arg1, arg2, (int)arg3, (int)arg4, (int)arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LabelAtlas_initWithString(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3))) {
            // bool initWithString(const std::string &string, const std::string &fntFile)
            return _cocos2d_LabelAtlas_initWithString2(L);
        // }
    }

    if (num_args == 5) {
        if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_int(L, 4)) && (olua_is_int(L, 5)) && (olua_is_int(L, 6))) {
            // bool initWithString(const std::string &string, const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
            return _cocos2d_LabelAtlas_initWithString1(L);
        }

        // if ((olua_is_std_string(L, 2)) && (olua_is_cppobj(L, 3, "cc.Texture2D")) && (olua_is_int(L, 4)) && (olua_is_int(L, 5)) && (olua_is_int(L, 6))) {
            // bool initWithString(const std::string &string, cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
            return _cocos2d_LabelAtlas_initWithString3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LabelAtlas::initWithString' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LabelAtlas_new(lua_State *L)
{
    olua_startinvoke(L);

    // LabelAtlas()
    cocos2d::LabelAtlas *ret = (cocos2d::LabelAtlas *)new cocos2d::LabelAtlas();
    int num_ret = olua_push_cppobj(L, ret, "cc.LabelAtlas");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LabelAtlas_setString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;
    std::string arg1;       /** label */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LabelAtlas");
    olua_check_std_string(L, 2, &arg1);

    // void setString(const std::string &label)
    self->setString(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_LabelAtlas(lua_State *L)
{
    oluacls_class(L, "cc.LabelAtlas", "cc.AtlasNode");
    oluacls_func(L, "__move", _cocos2d_LabelAtlas___move);
    oluacls_func(L, "create", _cocos2d_LabelAtlas_create);
    oluacls_func(L, "getString", _cocos2d_LabelAtlas_getString);
    oluacls_func(L, "initWithString", _cocos2d_LabelAtlas_initWithString);
    oluacls_func(L, "new", _cocos2d_LabelAtlas_new);
    oluacls_func(L, "setString", _cocos2d_LabelAtlas_setString);
    oluacls_prop(L, "string", _cocos2d_LabelAtlas_getString, _cocos2d_LabelAtlas_setString);

    olua_registerluatype<cocos2d::LabelAtlas>(L, "cc.LabelAtlas");

    return 1;
}

static int _cocos2d_FontAtlas___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FontAtlas *)olua_toobj(L, 1, "cc.FontAtlas");
    olua_push_cppobj(L, self, "cc.FontAtlas");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FontAtlas_addTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    lua_Integer arg2 = 0;       /** slot */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 3, &arg2);

    // void addTexture(cocos2d::Texture2D *texture, int slot)
    self->addTexture(arg1, (int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FontAtlas_getFontName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");

    // std::string getFontName()
    std::string ret = (std::string)self->getFontName();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FontAtlas_getLineHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");

    // float getLineHeight()
    float ret = (float)self->getLineHeight();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FontAtlas_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;
    lua_Integer arg1 = 0;       /** slot */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");
    olua_check_int(L, 2, &arg1);

    // cocos2d::Texture2D *getTexture(int slot)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FontAtlas_listenRendererRecreated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventCustom");

    // void listenRendererRecreated(cocos2d::EventCustom *event)
    self->listenRendererRecreated(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FontAtlas_purgeTexturesAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");

    // void purgeTexturesAtlas()
    self->purgeTexturesAtlas();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FontAtlas_setAliasTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");

    // void setAliasTexParameters()
    self->setAliasTexParameters();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FontAtlas_setAntiAliasTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");

    // void setAntiAliasTexParameters()
    self->setAntiAliasTexParameters();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FontAtlas_setLineHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;
    lua_Number arg1 = 0;       /** newHeight */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");
    olua_check_number(L, 2, &arg1);

    // void setLineHeight(float newHeight)
    self->setLineHeight((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FontAtlas_get_CMD_PURGE_FONTATLAS(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *CMD_PURGE_FONTATLAS
    const char *ret = (const char *)cocos2d::FontAtlas::CMD_PURGE_FONTATLAS;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FontAtlas_set_CMD_PURGE_FONTATLAS(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** CMD_PURGE_FONTATLAS */

    olua_check_string(L, 1, &arg1);

    // static const char *CMD_PURGE_FONTATLAS
    cocos2d::FontAtlas::CMD_PURGE_FONTATLAS = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FontAtlas_get_CMD_RESET_FONTATLAS(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *CMD_RESET_FONTATLAS
    const char *ret = (const char *)cocos2d::FontAtlas::CMD_RESET_FONTATLAS;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FontAtlas_set_CMD_RESET_FONTATLAS(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** CMD_RESET_FONTATLAS */

    olua_check_string(L, 1, &arg1);

    // static const char *CMD_RESET_FONTATLAS
    cocos2d::FontAtlas::CMD_RESET_FONTATLAS = arg1;

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_FontAtlas(lua_State *L)
{
    oluacls_class(L, "cc.FontAtlas", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_FontAtlas___move);
    oluacls_func(L, "addTexture", _cocos2d_FontAtlas_addTexture);
    oluacls_func(L, "getFontName", _cocos2d_FontAtlas_getFontName);
    oluacls_func(L, "getLineHeight", _cocos2d_FontAtlas_getLineHeight);
    oluacls_func(L, "getTexture", _cocos2d_FontAtlas_getTexture);
    oluacls_func(L, "listenRendererRecreated", _cocos2d_FontAtlas_listenRendererRecreated);
    oluacls_func(L, "purgeTexturesAtlas", _cocos2d_FontAtlas_purgeTexturesAtlas);
    oluacls_func(L, "setAliasTexParameters", _cocos2d_FontAtlas_setAliasTexParameters);
    oluacls_func(L, "setAntiAliasTexParameters", _cocos2d_FontAtlas_setAntiAliasTexParameters);
    oluacls_func(L, "setLineHeight", _cocos2d_FontAtlas_setLineHeight);
    oluacls_prop(L, "fontName", _cocos2d_FontAtlas_getFontName, nullptr);
    oluacls_prop(L, "lineHeight", _cocos2d_FontAtlas_getLineHeight, _cocos2d_FontAtlas_setLineHeight);
    oluacls_prop(L, "CMD_PURGE_FONTATLAS", _cocos2d_FontAtlas_get_CMD_PURGE_FONTATLAS, _cocos2d_FontAtlas_set_CMD_PURGE_FONTATLAS);
    oluacls_prop(L, "CMD_RESET_FONTATLAS", _cocos2d_FontAtlas_get_CMD_RESET_FONTATLAS, _cocos2d_FontAtlas_set_CMD_RESET_FONTATLAS);
    oluacls_const_integer(L, "CacheTextureHeight", (lua_Integer)cocos2d::FontAtlas::CacheTextureHeight);
    oluacls_const_integer(L, "CacheTextureWidth", (lua_Integer)cocos2d::FontAtlas::CacheTextureWidth);

    olua_registerluatype<cocos2d::FontAtlas>(L, "cc.FontAtlas");

    return 1;
}

static int _cocos2d_ClippingRectangleNode___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ClippingRectangleNode *)olua_toobj(L, 1, "cc.ClippingRectangleNode");
    olua_push_cppobj(L, self, "cc.ClippingRectangleNode");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ClippingRectangleNode_create1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Rect arg1;       /** clippingRegion */

    manual_olua_check_cocos2d_Rect(L, 1, &arg1);

    // static cocos2d::ClippingRectangleNode *create(const cocos2d::Rect &clippingRegion)
    cocos2d::ClippingRectangleNode *ret = (cocos2d::ClippingRectangleNode *)cocos2d::ClippingRectangleNode::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ClippingRectangleNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ClippingRectangleNode_create2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ClippingRectangleNode *create()
    cocos2d::ClippingRectangleNode *ret = (cocos2d::ClippingRectangleNode *)cocos2d::ClippingRectangleNode::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ClippingRectangleNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ClippingRectangleNode_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::ClippingRectangleNode *create()
        return _cocos2d_ClippingRectangleNode_create2(L);
    }

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Rect(L, 1))) {
            // static cocos2d::ClippingRectangleNode *create(const cocos2d::Rect &clippingRegion)
            return _cocos2d_ClippingRectangleNode_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ClippingRectangleNode::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ClippingRectangleNode_getClippingRegion(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingRectangleNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ClippingRectangleNode");

    // const cocos2d::Rect &getClippingRegion()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getClippingRegion();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ClippingRectangleNode_isClippingEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingRectangleNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ClippingRectangleNode");

    // bool isClippingEnabled()
    bool ret = (bool)self->isClippingEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ClippingRectangleNode_setClippingEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingRectangleNode *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ClippingRectangleNode");
    olua_check_bool(L, 2, &arg1);

    // void setClippingEnabled(bool enabled)
    self->setClippingEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ClippingRectangleNode_setClippingRegion(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingRectangleNode *self = nullptr;
    cocos2d::Rect arg1;       /** clippingRegion */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ClippingRectangleNode");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setClippingRegion(const cocos2d::Rect &clippingRegion)
    self->setClippingRegion(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ClippingRectangleNode(lua_State *L)
{
    oluacls_class(L, "cc.ClippingRectangleNode", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_ClippingRectangleNode___move);
    oluacls_func(L, "create", _cocos2d_ClippingRectangleNode_create);
    oluacls_func(L, "getClippingRegion", _cocos2d_ClippingRectangleNode_getClippingRegion);
    oluacls_func(L, "isClippingEnabled", _cocos2d_ClippingRectangleNode_isClippingEnabled);
    oluacls_func(L, "setClippingEnabled", _cocos2d_ClippingRectangleNode_setClippingEnabled);
    oluacls_func(L, "setClippingRegion", _cocos2d_ClippingRectangleNode_setClippingRegion);
    oluacls_prop(L, "clippingEnabled", _cocos2d_ClippingRectangleNode_isClippingEnabled, _cocos2d_ClippingRectangleNode_setClippingEnabled);
    oluacls_prop(L, "clippingRegion", _cocos2d_ClippingRectangleNode_getClippingRegion, _cocos2d_ClippingRectangleNode_setClippingRegion);

    olua_registerluatype<cocos2d::ClippingRectangleNode>(L, "cc.ClippingRectangleNode");

    return 1;
}

static int _cocos2d_RenderTexture___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::RenderTexture *)olua_toobj(L, 1, "cc.RenderTexture");
    olua_push_cppobj(L, self, "cc.RenderTexture");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_RenderTexture_begin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");

    // void begin()
    self->begin();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_beginWithClear1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Number arg1 = 0;       /** r */
    lua_Number arg2 = 0;       /** g */
    lua_Number arg3 = 0;       /** b */
    lua_Number arg4 = 0;       /** a */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void beginWithClear(float r, float g, float b, float a)
    self->beginWithClear((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_beginWithClear2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Number arg1 = 0;       /** r */
    lua_Number arg2 = 0;       /** g */
    lua_Number arg3 = 0;       /** b */
    lua_Number arg4 = 0;       /** a */
    lua_Number arg5 = 0;       /** depthValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void beginWithClear(float r, float g, float b, float a, float depthValue)
    self->beginWithClear((float)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_beginWithClear3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Number arg1 = 0;       /** r */
    lua_Number arg2 = 0;       /** g */
    lua_Number arg3 = 0;       /** b */
    lua_Number arg4 = 0;       /** a */
    lua_Number arg5 = 0;       /** depthValue */
    lua_Integer arg6 = 0;       /** stencilValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);
    olua_check_int(L, 7, &arg6);

    // void beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)
    self->beginWithClear((float)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5, (int)arg6);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_beginWithClear(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 4) {
        // if ((olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5))) {
            // void beginWithClear(float r, float g, float b, float a)
            return _cocos2d_RenderTexture_beginWithClear1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5)) && (olua_is_number(L, 6))) {
            // void beginWithClear(float r, float g, float b, float a, float depthValue)
            return _cocos2d_RenderTexture_beginWithClear2(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5)) && (olua_is_number(L, 6)) && (olua_is_int(L, 7))) {
            // void beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)
            return _cocos2d_RenderTexture_beginWithClear3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::beginWithClear' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_RenderTexture_clear(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Number arg1 = 0;       /** r */
    lua_Number arg2 = 0;       /** g */
    lua_Number arg3 = 0;       /** b */
    lua_Number arg4 = 0;       /** a */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void clear(float r, float g, float b, float a)
    self->clear((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_clearDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Number arg1 = 0;       /** depthValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);

    // void clearDepth(float depthValue)
    self->clearDepth((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_clearStencil(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Integer arg1 = 0;       /** stencilValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_int(L, 2, &arg1);

    // void clearStencil(int stencilValue)
    self->clearStencil((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** w */
    lua_Integer arg2 = 0;       /** h */
    lua_Unsigned arg3 = 0;       /** format */
    lua_Unsigned arg4 = 0;       /** depthStencilFormat */

    olua_check_int(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_uint(L, 4, &arg4);

    // static cocos2d::RenderTexture *create(int w, int h, Texture2D::PixelFormat format, GLuint depthStencilFormat)
    cocos2d::RenderTexture *ret = (cocos2d::RenderTexture *)cocos2d::RenderTexture::create((int)arg1, (int)arg2, (cocos2d::Texture2D::PixelFormat)arg3, (GLuint)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.RenderTexture");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** w */
    lua_Integer arg2 = 0;       /** h */
    lua_Unsigned arg3 = 0;       /** format */

    olua_check_int(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::RenderTexture *create(int w, int h, Texture2D::PixelFormat format)
    cocos2d::RenderTexture *ret = (cocos2d::RenderTexture *)cocos2d::RenderTexture::create((int)arg1, (int)arg2, (cocos2d::Texture2D::PixelFormat)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.RenderTexture");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_create3(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** w */
    lua_Integer arg2 = 0;       /** h */

    olua_check_int(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);

    // static cocos2d::RenderTexture *create(int w, int h)
    cocos2d::RenderTexture *ret = (cocos2d::RenderTexture *)cocos2d::RenderTexture::create((int)arg1, (int)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.RenderTexture");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_int(L, 1)) && (olua_is_int(L, 2))) {
            // static cocos2d::RenderTexture *create(int w, int h)
            return _cocos2d_RenderTexture_create3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_int(L, 1)) && (olua_is_int(L, 2)) && (olua_is_uint(L, 3))) {
            // static cocos2d::RenderTexture *create(int w, int h, Texture2D::PixelFormat format)
            return _cocos2d_RenderTexture_create2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_int(L, 1)) && (olua_is_int(L, 2)) && (olua_is_uint(L, 3)) && (olua_is_uint(L, 4))) {
            // static cocos2d::RenderTexture *create(int w, int h, Texture2D::PixelFormat format, GLuint depthStencilFormat)
            return _cocos2d_RenderTexture_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_RenderTexture_end(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");

    // void end()
    self->end();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_getClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");

    // const cocos2d::Color4F &getClearColor()
    const cocos2d::Color4F &ret = (const cocos2d::Color4F &)self->getClearColor();
    int num_ret = manual_olua_push_cocos2d_Color4F(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_getClearDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");

    // float getClearDepth()
    float ret = (float)self->getClearDepth();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_getClearFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");

    // unsigned int getClearFlags()
    unsigned int ret = (unsigned int)self->getClearFlags();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_getClearStencil(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");

    // int getClearStencil()
    int ret = (int)self->getClearStencil();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_getSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");

    // cocos2d::Sprite *getSprite()
    cocos2d::Sprite *ret = (cocos2d::Sprite *)self->getSprite();
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_initWithWidthAndHeight1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Integer arg1 = 0;       /** w */
    lua_Integer arg2 = 0;       /** h */
    lua_Unsigned arg3 = 0;       /** format */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // bool initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat format)
    bool ret = (bool)self->initWithWidthAndHeight((int)arg1, (int)arg2, (cocos2d::Texture2D::PixelFormat)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_initWithWidthAndHeight2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Integer arg1 = 0;       /** w */
    lua_Integer arg2 = 0;       /** h */
    lua_Unsigned arg3 = 0;       /** format */
    lua_Unsigned arg4 = 0;       /** depthStencilFormat */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);

    // bool initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat format, GLuint depthStencilFormat)
    bool ret = (bool)self->initWithWidthAndHeight((int)arg1, (int)arg2, (cocos2d::Texture2D::PixelFormat)arg3, (GLuint)arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_initWithWidthAndHeight(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 3) {
        // if ((olua_is_int(L, 2)) && (olua_is_int(L, 3)) && (olua_is_uint(L, 4))) {
            // bool initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat format)
            return _cocos2d_RenderTexture_initWithWidthAndHeight1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_int(L, 2)) && (olua_is_int(L, 3)) && (olua_is_uint(L, 4)) && (olua_is_uint(L, 5))) {
            // bool initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat format, GLuint depthStencilFormat)
            return _cocos2d_RenderTexture_initWithWidthAndHeight2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::initWithWidthAndHeight' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_RenderTexture_isAutoDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");

    // bool isAutoDraw()
    bool ret = (bool)self->isAutoDraw();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_listenToBackground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventCustom");

    // void listenToBackground(cocos2d::EventCustom *event)
    self->listenToBackground(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_listenToForeground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventCustom");

    // void listenToForeground(cocos2d::EventCustom *event)
    self->listenToForeground(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_new(lua_State *L)
{
    olua_startinvoke(L);

    // RenderTexture()
    cocos2d::RenderTexture *ret = (cocos2d::RenderTexture *)new cocos2d::RenderTexture();
    int num_ret = olua_push_cppobj(L, ret, "cc.RenderTexture");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_newImage1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    bool arg1 = false;       /** flipImage */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_bool(L, 2, &arg1);

    // cocos2d::Image *newImage(@optional bool flipImage)
    cocos2d::Image *ret = (cocos2d::Image *)self->newImage(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Image");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_newImage2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");

    // cocos2d::Image *newImage(@optional bool flipImage)
    cocos2d::Image *ret = (cocos2d::Image *)self->newImage();
    int num_ret = olua_push_cppobj(L, ret, "cc.Image");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_newImage(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        // cocos2d::Image *newImage(@optional bool flipImage)
        return _cocos2d_RenderTexture_newImage2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_bool(L, 2))) {
            // cocos2d::Image *newImage(@optional bool flipImage)
            return _cocos2d_RenderTexture_newImage1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::newImage' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_RenderTexture_saveToFile1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isRGBA */
    std::function<void(cocos2d::RenderTexture *, const std::string &)> arg3;       /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    if (olua_is_std_function(L, 4)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "saveToFile";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 4, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg3 = [callback_store_obj, func, MT](cocos2d::RenderTexture *arg1, const std::string &arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                olua_push_cppobj(L, arg1, "cc.RenderTexture");
                olua_push_std_string(L, arg2);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_TAG_WHOLE);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "saveToFile";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg3 = nullptr;
    }

    // bool saveToFile(const std::string& filename, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
    bool ret = (bool)self->saveToFile(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFile2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    lua_Unsigned arg2 = 0;       /** format */
    bool arg3 = false;       /** isRGBA */
    std::function<void(cocos2d::RenderTexture *, const std::string &)> arg4;       /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);

    if (olua_is_std_function(L, 5)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "saveToFile";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 5, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg4 = [callback_store_obj, func, MT](cocos2d::RenderTexture *arg1, const std::string &arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                olua_push_cppobj(L, arg1, "cc.RenderTexture");
                olua_push_std_string(L, arg2);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_TAG_WHOLE);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "saveToFile";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg4 = nullptr;
    }

    // bool saveToFile(const std::string& filename, Image::Format format, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
    bool ret = (bool)self->saveToFile(arg1, (cocos2d::Image::Format)arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFile3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);

    // bool saveToFile(const std::string& filename, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
    bool ret = (bool)self->saveToFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFile4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isRGBA */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool saveToFile(const std::string& filename, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
    bool ret = (bool)self->saveToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFile5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    lua_Unsigned arg2 = 0;       /** format */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // bool saveToFile(const std::string& filename, Image::Format format, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
    bool ret = (bool)self->saveToFile(arg1, (cocos2d::Image::Format)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFile6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    lua_Unsigned arg2 = 0;       /** format */
    bool arg3 = false;       /** isRGBA */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);

    // bool saveToFile(const std::string& filename, Image::Format format, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
    bool ret = (bool)self->saveToFile(arg1, (cocos2d::Image::Format)arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFile(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // bool saveToFile(const std::string& filename, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
            return _cocos2d_RenderTexture_saveToFile3(L);
        // }
    }

    if (num_args == 2) {
        if ((olua_is_std_string(L, 2)) && (olua_is_bool(L, 3))) {
            // bool saveToFile(const std::string& filename, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
            return _cocos2d_RenderTexture_saveToFile4(L);
        }

        // if ((olua_is_std_string(L, 2)) && (olua_is_uint(L, 3))) {
            // bool saveToFile(const std::string& filename, Image::Format format, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
            return _cocos2d_RenderTexture_saveToFile5(L);
        // }
    }

    if (num_args == 3) {
        if ((olua_is_std_string(L, 2)) && (olua_is_bool(L, 3)) && (olua_is_std_function(L, 4))) {
            // bool saveToFile(const std::string& filename, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
            return _cocos2d_RenderTexture_saveToFile1(L);
        }

        // if ((olua_is_std_string(L, 2)) && (olua_is_uint(L, 3)) && (olua_is_bool(L, 4))) {
            // bool saveToFile(const std::string& filename, Image::Format format, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
            return _cocos2d_RenderTexture_saveToFile6(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_uint(L, 3)) && (olua_is_bool(L, 4)) && (olua_is_std_function(L, 5))) {
            // bool saveToFile(const std::string& filename, Image::Format format, bool isRGBA = true, std::function<void (RenderTexture*, const std::string&)> callback = nullptr)
            return _cocos2d_RenderTexture_saveToFile2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::saveToFile' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_RenderTexture_saveToFileAsNonPMA1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** fileName */
    lua_Unsigned arg2 = 0;       /** format */
    bool arg3 = false;       /** isRGBA */
    std::function<void(cocos2d::RenderTexture *, const std::string &)> arg4;       /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);

    void *callback_store_obj = (void *)self;
    std::string tag = "saveToFile";
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 5, OLUA_TAG_REPLACE);
    lua_State *MT = olua_mainthread();
    arg4 = [callback_store_obj, func, MT](cocos2d::RenderTexture *arg1, const std::string &arg2) {
        lua_State *L = olua_mainthread();

        if (MT == L) {
            int top = lua_gettop(L);
            olua_push_cppobj(L, arg1, "cc.RenderTexture");
            olua_push_std_string(L, arg2);

            olua_callback(L, callback_store_obj, func.c_str(), 2);

            olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // bool saveToFileAsNonPMA(const std::string& fileName, Image::Format format, bool isRGBA, const std::function<void(RenderTexture*, const std::string&)>& callback)
    bool ret = (bool)self->saveToFileAsNonPMA(arg1, (cocos2d::Image::Format)arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFileAsNonPMA2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isRGBA */
    std::function<void(cocos2d::RenderTexture *, const std::string &)> arg3;       /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    if (olua_is_std_function(L, 4)) {
        void *callback_store_obj = (void *)self;
        std::string tag = "saveToFile";
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 4, OLUA_TAG_REPLACE);
        lua_State *MT = olua_mainthread();
        arg3 = [callback_store_obj, func, MT](cocos2d::RenderTexture *arg1, const std::string &arg2) {
            lua_State *L = olua_mainthread();

            if (MT == L) {
                int top = lua_gettop(L);
                olua_push_cppobj(L, arg1, "cc.RenderTexture");
                olua_push_std_string(L, arg2);

                olua_callback(L, callback_store_obj, func.c_str(), 2);

                olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_TAG_WHOLE);

                lua_settop(L, top);
            }
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = "saveToFile";
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_TAG_SUBEQUAL);
        arg3 = nullptr;
    }

    // bool saveToFileAsNonPMA(const std::string& filename, bool isRGBA = true, const std::function<void(RenderTexture*, const std::string&)>& callback = nullptr)
    bool ret = (bool)self->saveToFileAsNonPMA(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFileAsNonPMA3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);

    // bool saveToFileAsNonPMA(const std::string& filename, bool isRGBA = true, const std::function<void(RenderTexture*, const std::string&)>& callback = nullptr)
    bool ret = (bool)self->saveToFileAsNonPMA(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFileAsNonPMA4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isRGBA */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_std_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool saveToFileAsNonPMA(const std::string& filename, bool isRGBA = true, const std::function<void(RenderTexture*, const std::string&)>& callback = nullptr)
    bool ret = (bool)self->saveToFileAsNonPMA(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_RenderTexture_saveToFileAsNonPMA(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // bool saveToFileAsNonPMA(const std::string& filename, bool isRGBA = true, const std::function<void(RenderTexture*, const std::string&)>& callback = nullptr)
            return _cocos2d_RenderTexture_saveToFileAsNonPMA3(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_bool(L, 3))) {
            // bool saveToFileAsNonPMA(const std::string& filename, bool isRGBA = true, const std::function<void(RenderTexture*, const std::string&)>& callback = nullptr)
            return _cocos2d_RenderTexture_saveToFileAsNonPMA4(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_bool(L, 3)) && (olua_is_std_function(L, 4))) {
            // bool saveToFileAsNonPMA(const std::string& filename, bool isRGBA = true, const std::function<void(RenderTexture*, const std::string&)>& callback = nullptr)
            return _cocos2d_RenderTexture_saveToFileAsNonPMA2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_uint(L, 3)) && (olua_is_bool(L, 4)) && (olua_is_std_function(L, 5))) {
            // bool saveToFileAsNonPMA(const std::string& fileName, Image::Format format, bool isRGBA, const std::function<void(RenderTexture*, const std::string&)>& callback)
            return _cocos2d_RenderTexture_saveToFileAsNonPMA1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::saveToFileAsNonPMA' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_RenderTexture_setAutoDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    bool arg1 = false;       /** isAutoDraw */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_bool(L, 2, &arg1);

    // void setAutoDraw(bool isAutoDraw)
    self->setAutoDraw(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_setClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::Color4F arg1;       /** clearColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    manual_olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setClearColor(const cocos2d::Color4F &clearColor)
    self->setClearColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_setClearDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Number arg1 = 0;       /** clearDepth */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);

    // void setClearDepth(float clearDepth)
    self->setClearDepth((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_setClearFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Unsigned arg1 = 0;       /** clearFlags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_uint(L, 2, &arg1);

    // void setClearFlags(unsigned int clearFlags)
    self->setClearFlags((unsigned int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_setClearStencil(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    lua_Integer arg1 = 0;       /** clearStencil */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_int(L, 2, &arg1);

    // void setClearStencil(int clearStencil)
    self->setClearStencil((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_setKeepMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    bool arg1 = false;       /** keepMatrix */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_bool(L, 2, &arg1);

    // void setKeepMatrix(bool keepMatrix)
    self->setKeepMatrix(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_setSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");

    // void setSprite(cocos2d::Sprite *sprite)
    self->setSprite(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_RenderTexture_setVirtualViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::Vec2 arg1;       /** rtBegin */
    cocos2d::Rect arg2;       /** fullRect */
    cocos2d::Rect arg3;       /** fullViewport */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RenderTexture");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);
    manual_olua_check_cocos2d_Rect(L, 4, &arg3);

    // void setVirtualViewport(const cocos2d::Vec2 &rtBegin, const cocos2d::Rect &fullRect, const cocos2d::Rect &fullViewport)
    self->setVirtualViewport(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_RenderTexture(lua_State *L)
{
    oluacls_class(L, "cc.RenderTexture", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_RenderTexture___move);
    oluacls_func(L, "begin", _cocos2d_RenderTexture_begin);
    oluacls_func(L, "beginVisit", _cocos2d_RenderTexture_begin);
    oluacls_func(L, "beginWithClear", _cocos2d_RenderTexture_beginWithClear);
    oluacls_func(L, "clear", _cocos2d_RenderTexture_clear);
    oluacls_func(L, "clearDepth", _cocos2d_RenderTexture_clearDepth);
    oluacls_func(L, "clearStencil", _cocos2d_RenderTexture_clearStencil);
    oluacls_func(L, "create", _cocos2d_RenderTexture_create);
    oluacls_func(L, "end", _cocos2d_RenderTexture_end);
    oluacls_func(L, "endVisit", _cocos2d_RenderTexture_end);
    oluacls_func(L, "getClearColor", _cocos2d_RenderTexture_getClearColor);
    oluacls_func(L, "getClearDepth", _cocos2d_RenderTexture_getClearDepth);
    oluacls_func(L, "getClearFlags", _cocos2d_RenderTexture_getClearFlags);
    oluacls_func(L, "getClearStencil", _cocos2d_RenderTexture_getClearStencil);
    oluacls_func(L, "getSprite", _cocos2d_RenderTexture_getSprite);
    oluacls_func(L, "initWithWidthAndHeight", _cocos2d_RenderTexture_initWithWidthAndHeight);
    oluacls_func(L, "isAutoDraw", _cocos2d_RenderTexture_isAutoDraw);
    oluacls_func(L, "listenToBackground", _cocos2d_RenderTexture_listenToBackground);
    oluacls_func(L, "listenToForeground", _cocos2d_RenderTexture_listenToForeground);
    oluacls_func(L, "new", _cocos2d_RenderTexture_new);
    oluacls_func(L, "newImage", _cocos2d_RenderTexture_newImage);
    oluacls_func(L, "saveToFile", _cocos2d_RenderTexture_saveToFile);
    oluacls_func(L, "saveToFileAsNonPMA", _cocos2d_RenderTexture_saveToFileAsNonPMA);
    oluacls_func(L, "setAutoDraw", _cocos2d_RenderTexture_setAutoDraw);
    oluacls_func(L, "setClearColor", _cocos2d_RenderTexture_setClearColor);
    oluacls_func(L, "setClearDepth", _cocos2d_RenderTexture_setClearDepth);
    oluacls_func(L, "setClearFlags", _cocos2d_RenderTexture_setClearFlags);
    oluacls_func(L, "setClearStencil", _cocos2d_RenderTexture_setClearStencil);
    oluacls_func(L, "setKeepMatrix", _cocos2d_RenderTexture_setKeepMatrix);
    oluacls_func(L, "setSprite", _cocos2d_RenderTexture_setSprite);
    oluacls_func(L, "setVirtualViewport", _cocos2d_RenderTexture_setVirtualViewport);
    oluacls_prop(L, "autoDraw", _cocos2d_RenderTexture_isAutoDraw, _cocos2d_RenderTexture_setAutoDraw);
    oluacls_prop(L, "clearColor", _cocos2d_RenderTexture_getClearColor, _cocos2d_RenderTexture_setClearColor);
    oluacls_prop(L, "clearDepth", _cocos2d_RenderTexture_getClearDepth, _cocos2d_RenderTexture_setClearDepth);
    oluacls_prop(L, "clearFlags", _cocos2d_RenderTexture_getClearFlags, _cocos2d_RenderTexture_setClearFlags);
    oluacls_prop(L, "clearStencil", _cocos2d_RenderTexture_getClearStencil, _cocos2d_RenderTexture_setClearStencil);
    oluacls_prop(L, "sprite", _cocos2d_RenderTexture_getSprite, _cocos2d_RenderTexture_setSprite);

    olua_registerluatype<cocos2d::RenderTexture>(L, "cc.RenderTexture");

    return 1;
}

static int luaopen_cocos2d_ProgressTimer_Type(lua_State *L)
{
    oluacls_class(L, "cc.ProgressTimer.Type", nullptr);
    oluacls_const_integer(L, "BAR", (lua_Integer)cocos2d::ProgressTimer::Type::BAR);
    oluacls_const_integer(L, "RADIAL", (lua_Integer)cocos2d::ProgressTimer::Type::RADIAL);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_ProgressTimer___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ProgressTimer *)olua_toobj(L, 1, "cc.ProgressTimer");
    olua_push_cppobj(L, self, "cc.ProgressTimer");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ProgressTimer_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *arg1 = nullptr;       /** sp */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Sprite");

    // static cocos2d::ProgressTimer *create(cocos2d::Sprite *sp)
    cocos2d::ProgressTimer *ret = (cocos2d::ProgressTimer *)cocos2d::ProgressTimer::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ProgressTimer");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTimer_getBarChangeRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");

    // cocos2d::Vec2 getBarChangeRate()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getBarChangeRate();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTimer_getMidpoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");

    // cocos2d::Vec2 getMidpoint()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getMidpoint();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTimer_getPercentage(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");

    // float getPercentage()
    float ret = (float)self->getPercentage();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTimer_getSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");

    // cocos2d::Sprite *getSprite()
    cocos2d::Sprite *ret = (cocos2d::Sprite *)self->getSprite();
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTimer_getType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");

    // cocos2d::ProgressTimer::Type getType()
    cocos2d::ProgressTimer::Type ret = (cocos2d::ProgressTimer::Type)self->getType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTimer_initWithSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sp */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");

    // bool initWithSprite(cocos2d::Sprite *sp)
    bool ret = (bool)self->initWithSprite(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTimer_isReverseDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");

    // bool isReverseDirection()
    bool ret = (bool)self->isReverseDirection();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTimer_new(lua_State *L)
{
    olua_startinvoke(L);

    // ProgressTimer()
    cocos2d::ProgressTimer *ret = (cocos2d::ProgressTimer *)new cocos2d::ProgressTimer();
    int num_ret = olua_push_cppobj(L, ret, "cc.ProgressTimer");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ProgressTimer_setBarChangeRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    cocos2d::Vec2 arg1;       /** barChangeRate */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setBarChangeRate(const cocos2d::Vec2 &barChangeRate)
    self->setBarChangeRate(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProgressTimer_setMidpoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setMidpoint(const cocos2d::Vec2 &point)
    self->setMidpoint(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProgressTimer_setPercentage(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    lua_Number arg1 = 0;       /** percentage */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");
    olua_check_number(L, 2, &arg1);

    // void setPercentage(float percentage)
    self->setPercentage((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProgressTimer_setReverseDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");
    olua_check_bool(L, 2, &arg1);

    // void setReverseDirection(bool value)
    self->setReverseDirection(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProgressTimer_setSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");

    // void setSprite(cocos2d::Sprite *sprite)
    self->setSprite(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ProgressTimer_setType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProgressTimer");
    olua_check_uint(L, 2, &arg1);

    // void setType(cocos2d::ProgressTimer::Type type)
    self->setType((cocos2d::ProgressTimer::Type)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ProgressTimer(lua_State *L)
{
    oluacls_class(L, "cc.ProgressTimer", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_ProgressTimer___move);
    oluacls_func(L, "create", _cocos2d_ProgressTimer_create);
    oluacls_func(L, "getBarChangeRate", _cocos2d_ProgressTimer_getBarChangeRate);
    oluacls_func(L, "getMidpoint", _cocos2d_ProgressTimer_getMidpoint);
    oluacls_func(L, "getPercentage", _cocos2d_ProgressTimer_getPercentage);
    oluacls_func(L, "getSprite", _cocos2d_ProgressTimer_getSprite);
    oluacls_func(L, "getType", _cocos2d_ProgressTimer_getType);
    oluacls_func(L, "initWithSprite", _cocos2d_ProgressTimer_initWithSprite);
    oluacls_func(L, "isReverseDirection", _cocos2d_ProgressTimer_isReverseDirection);
    oluacls_func(L, "new", _cocos2d_ProgressTimer_new);
    oluacls_func(L, "setBarChangeRate", _cocos2d_ProgressTimer_setBarChangeRate);
    oluacls_func(L, "setMidpoint", _cocos2d_ProgressTimer_setMidpoint);
    oluacls_func(L, "setPercentage", _cocos2d_ProgressTimer_setPercentage);
    oluacls_func(L, "setReverseDirection", _cocos2d_ProgressTimer_setReverseDirection);
    oluacls_func(L, "setSprite", _cocos2d_ProgressTimer_setSprite);
    oluacls_func(L, "setType", _cocos2d_ProgressTimer_setType);
    oluacls_prop(L, "barChangeRate", _cocos2d_ProgressTimer_getBarChangeRate, _cocos2d_ProgressTimer_setBarChangeRate);
    oluacls_prop(L, "midpoint", _cocos2d_ProgressTimer_getMidpoint, _cocos2d_ProgressTimer_setMidpoint);
    oluacls_prop(L, "percentage", _cocos2d_ProgressTimer_getPercentage, _cocos2d_ProgressTimer_setPercentage);
    oluacls_prop(L, "reverseDirection", _cocos2d_ProgressTimer_isReverseDirection, _cocos2d_ProgressTimer_setReverseDirection);
    oluacls_prop(L, "sprite", _cocos2d_ProgressTimer_getSprite, _cocos2d_ProgressTimer_setSprite);
    oluacls_prop(L, "type", _cocos2d_ProgressTimer_getType, _cocos2d_ProgressTimer_setType);

    olua_registerluatype<cocos2d::ProgressTimer>(L, "cc.ProgressTimer");

    return 1;
}

static int _cocos2d_AnimationFrame___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::AnimationFrame *)olua_toobj(L, 1, "cc.AnimationFrame");
    olua_push_cppobj(L, self, "cc.AnimationFrame");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_AnimationFrame_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");

    // cocos2d::AnimationFrame *clone()
    cocos2d::AnimationFrame *ret = (cocos2d::AnimationFrame *)self->clone();
    int num_ret = olua_push_cppobj(L, ret, "cc.AnimationFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationFrame_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */
    lua_Number arg2 = 0;       /** delayUnits */
    cocos2d::ValueMap arg3;       /** userInfo */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.SpriteFrame");
    olua_check_number(L, 2, &arg2);
    manual_olua_check_cocos2d_ValueMap(L, 3, &arg3);

    // static cocos2d::AnimationFrame *create(cocos2d::SpriteFrame *spriteFrame, float delayUnits, const cocos2d::ValueMap &userInfo)
    cocos2d::AnimationFrame *ret = (cocos2d::AnimationFrame *)cocos2d::AnimationFrame::create(arg1, (float)arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.AnimationFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationFrame_getDelayUnits(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");

    // float getDelayUnits()
    float ret = (float)self->getDelayUnits();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationFrame_getSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");

    // cocos2d::SpriteFrame *getSpriteFrame()
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)self->getSpriteFrame();
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationFrame_getUserInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");

    // const cocos2d::ValueMap &getUserInfo()
    const cocos2d::ValueMap &ret = (const cocos2d::ValueMap &)self->getUserInfo();
    int num_ret = manual_olua_push_cocos2d_ValueMap(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationFrame_initWithSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */
    lua_Number arg2 = 0;       /** delayUnits */
    cocos2d::ValueMap arg3;       /** userInfo */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");
    olua_check_number(L, 3, &arg2);
    manual_olua_check_cocos2d_ValueMap(L, 4, &arg3);

    // bool initWithSpriteFrame(cocos2d::SpriteFrame *spriteFrame, float delayUnits, const cocos2d::ValueMap &userInfo)
    bool ret = (bool)self->initWithSpriteFrame(arg1, (float)arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationFrame_new(lua_State *L)
{
    olua_startinvoke(L);

    // AnimationFrame()
    cocos2d::AnimationFrame *ret = (cocos2d::AnimationFrame *)new cocos2d::AnimationFrame();
    int num_ret = olua_push_cppobj(L, ret, "cc.AnimationFrame");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationFrame_setDelayUnits(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;
    lua_Number arg1 = 0;       /** delayUnits */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");
    olua_check_number(L, 2, &arg1);

    // void setDelayUnits(float delayUnits)
    self->setDelayUnits((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AnimationFrame_setSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** frame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");

    // void setSpriteFrame(cocos2d::SpriteFrame *frame)
    self->setSpriteFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AnimationFrame_setUserInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;
    cocos2d::ValueMap arg1;       /** userInfo */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");
    manual_olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setUserInfo(const cocos2d::ValueMap &userInfo)
    self->setUserInfo(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_AnimationFrame(lua_State *L)
{
    oluacls_class(L, "cc.AnimationFrame", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_AnimationFrame___move);
    oluacls_func(L, "clone", _cocos2d_AnimationFrame_clone);
    oluacls_func(L, "create", _cocos2d_AnimationFrame_create);
    oluacls_func(L, "getDelayUnits", _cocos2d_AnimationFrame_getDelayUnits);
    oluacls_func(L, "getSpriteFrame", _cocos2d_AnimationFrame_getSpriteFrame);
    oluacls_func(L, "getUserInfo", _cocos2d_AnimationFrame_getUserInfo);
    oluacls_func(L, "initWithSpriteFrame", _cocos2d_AnimationFrame_initWithSpriteFrame);
    oluacls_func(L, "new", _cocos2d_AnimationFrame_new);
    oluacls_func(L, "setDelayUnits", _cocos2d_AnimationFrame_setDelayUnits);
    oluacls_func(L, "setSpriteFrame", _cocos2d_AnimationFrame_setSpriteFrame);
    oluacls_func(L, "setUserInfo", _cocos2d_AnimationFrame_setUserInfo);
    oluacls_prop(L, "delayUnits", _cocos2d_AnimationFrame_getDelayUnits, _cocos2d_AnimationFrame_setDelayUnits);
    oluacls_prop(L, "spriteFrame", _cocos2d_AnimationFrame_getSpriteFrame, _cocos2d_AnimationFrame_setSpriteFrame);
    oluacls_prop(L, "userInfo", _cocos2d_AnimationFrame_getUserInfo, _cocos2d_AnimationFrame_setUserInfo);

    olua_registerluatype<cocos2d::AnimationFrame>(L, "cc.AnimationFrame");

    return 1;
}

static int _cocos2d_Animation___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Animation *)olua_toobj(L, 1, "cc.Animation");
    olua_push_cppobj(L, self, "cc.Animation");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Animation_addSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** frame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");

    // void addSpriteFrame(cocos2d::SpriteFrame *frame)
    self->addSpriteFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Animation_addSpriteFrameWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_std_string(L, 2, &arg1);

    // void addSpriteFrameWithFile(const std::string &filename)
    self->addSpriteFrameWithFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Animation_addSpriteFrameWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);

    // void addSpriteFrameWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
    self->addSpriteFrameWithTexture(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Animation_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // cocos2d::Animation *clone()
    cocos2d::Animation *ret = (cocos2d::Animation *)self->clone();
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_create1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Animation *create()
    cocos2d::Animation *ret = (cocos2d::Animation *)cocos2d::Animation::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** arrayOfAnimationFrameNames */
    lua_Number arg2 = 0;       /** delayPerUnit */
    lua_Unsigned arg3 = 0;       /** loops */

    manual_olua_check_cocos2d_Vector(L, 1, arg1, "cc.AnimationFrame");
    olua_check_number(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::Animation *create(const Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit, @optional unsigned int loops)
    cocos2d::Animation *ret = (cocos2d::Animation *)cocos2d::Animation::create(arg1, (float)arg2, (unsigned int)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_create3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** arrayOfAnimationFrameNames */
    lua_Number arg2 = 0;       /** delayPerUnit */

    manual_olua_check_cocos2d_Vector(L, 1, arg1, "cc.AnimationFrame");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::Animation *create(const Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit, @optional unsigned int loops)
    cocos2d::Animation *ret = (cocos2d::Animation *)cocos2d::Animation::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::Animation *create()
        return _cocos2d_Animation_create1(L);
    }

    if (num_args == 2) {
        // if ((manual_olua_is_cocos2d_Vector(L, 1)) && (olua_is_number(L, 2))) {
            // static cocos2d::Animation *create(const Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit, @optional unsigned int loops)
            return _cocos2d_Animation_create3(L);
        // }
    }

    if (num_args == 3) {
        // if ((manual_olua_is_cocos2d_Vector(L, 1)) && (olua_is_number(L, 2)) && (olua_is_uint(L, 3))) {
            // static cocos2d::Animation *create(const Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit, @optional unsigned int loops)
            return _cocos2d_Animation_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Animation::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Animation_createWithSpriteFrames1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */
    lua_Number arg2 = 0;       /** delay */
    lua_Unsigned arg3 = 0;       /** loops */

    manual_olua_check_cocos2d_Vector(L, 1, arg1, "cc.SpriteFrame");
    olua_check_number(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::Animation *createWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
    cocos2d::Animation *ret = (cocos2d::Animation *)cocos2d::Animation::createWithSpriteFrames(arg1, (float)arg2, (unsigned int)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_createWithSpriteFrames2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */

    manual_olua_check_cocos2d_Vector(L, 1, arg1, "cc.SpriteFrame");

    // static cocos2d::Animation *createWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
    cocos2d::Animation *ret = (cocos2d::Animation *)cocos2d::Animation::createWithSpriteFrames(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_createWithSpriteFrames3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */
    lua_Number arg2 = 0;       /** delay */

    manual_olua_check_cocos2d_Vector(L, 1, arg1, "cc.SpriteFrame");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::Animation *createWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
    cocos2d::Animation *ret = (cocos2d::Animation *)cocos2d::Animation::createWithSpriteFrames(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_createWithSpriteFrames(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Vector(L, 1))) {
            // static cocos2d::Animation *createWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
            return _cocos2d_Animation_createWithSpriteFrames2(L);
        // }
    }

    if (num_args == 2) {
        // if ((manual_olua_is_cocos2d_Vector(L, 1)) && (olua_is_number(L, 2))) {
            // static cocos2d::Animation *createWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
            return _cocos2d_Animation_createWithSpriteFrames3(L);
        // }
    }

    if (num_args == 3) {
        // if ((manual_olua_is_cocos2d_Vector(L, 1)) && (olua_is_number(L, 2)) && (olua_is_uint(L, 3))) {
            // static cocos2d::Animation *createWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
            return _cocos2d_Animation_createWithSpriteFrames1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Animation::createWithSpriteFrames' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Animation_getDelayPerUnit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // float getDelayPerUnit()
    float ret = (float)self->getDelayPerUnit();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_getDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // float getDuration()
    float ret = (float)self->getDuration();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_getFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // const Vector<cocos2d::AnimationFrame *> &getFrames()
    const cocos2d::Vector<cocos2d::AnimationFrame *> &ret = (const cocos2d::Vector<cocos2d::AnimationFrame *> &)self->getFrames();
    int num_ret = manual_olua_push_cocos2d_Vector(L, ret, "cc.AnimationFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_getLoops(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // unsigned int getLoops()
    unsigned int ret = (unsigned int)self->getLoops();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_getRestoreOriginalFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // bool getRestoreOriginalFrame()
    bool ret = (bool)self->getRestoreOriginalFrame();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_getTotalDelayUnits(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // float getTotalDelayUnits()
    float ret = (float)self->getTotalDelayUnits();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // bool init()
    bool ret = (bool)self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_initWithAnimationFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** arrayOfAnimationFrameNames */
    lua_Number arg2 = 0;       /** delayPerUnit */
    lua_Unsigned arg3 = 0;       /** loops */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    manual_olua_check_cocos2d_Vector(L, 2, arg1, "cc.AnimationFrame");
    olua_check_number(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // bool initWithAnimationFrames(const Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)
    bool ret = (bool)self->initWithAnimationFrames(arg1, (float)arg2, (unsigned int)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_initWithSpriteFrames1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */
    lua_Number arg2 = 0;       /** delay */
    lua_Unsigned arg3 = 0;       /** loops */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    manual_olua_check_cocos2d_Vector(L, 2, arg1, "cc.SpriteFrame");
    olua_check_number(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // bool initWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
    bool ret = (bool)self->initWithSpriteFrames(arg1, (float)arg2, (unsigned int)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_initWithSpriteFrames2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    manual_olua_check_cocos2d_Vector(L, 2, arg1, "cc.SpriteFrame");

    // bool initWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
    bool ret = (bool)self->initWithSpriteFrames(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_initWithSpriteFrames3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */
    lua_Number arg2 = 0;       /** delay */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    manual_olua_check_cocos2d_Vector(L, 2, arg1, "cc.SpriteFrame");
    olua_check_number(L, 3, &arg2);

    // bool initWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
    bool ret = (bool)self->initWithSpriteFrames(arg1, (float)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_initWithSpriteFrames(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Vector(L, 2))) {
            // bool initWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
            return _cocos2d_Animation_initWithSpriteFrames2(L);
        // }
    }

    if (num_args == 2) {
        // if ((manual_olua_is_cocos2d_Vector(L, 2)) && (olua_is_number(L, 3))) {
            // bool initWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
            return _cocos2d_Animation_initWithSpriteFrames3(L);
        // }
    }

    if (num_args == 3) {
        // if ((manual_olua_is_cocos2d_Vector(L, 2)) && (olua_is_number(L, 3)) && (olua_is_uint(L, 4))) {
            // bool initWithSpriteFrames(const Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
            return _cocos2d_Animation_initWithSpriteFrames1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Animation::initWithSpriteFrames' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Animation_new(lua_State *L)
{
    olua_startinvoke(L);

    // Animation()
    cocos2d::Animation *ret = (cocos2d::Animation *)new cocos2d::Animation();
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Animation_setDelayPerUnit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    lua_Number arg1 = 0;       /** delayPerUnit */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_number(L, 2, &arg1);

    // void setDelayPerUnit(float delayPerUnit)
    self->setDelayPerUnit((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Animation_setFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** frames */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    manual_olua_check_cocos2d_Vector(L, 2, arg1, "cc.AnimationFrame");

    // void setFrames(const Vector<cocos2d::AnimationFrame *> &frames)
    self->setFrames(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Animation_setLoops(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    lua_Unsigned arg1 = 0;       /** loops */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_uint(L, 2, &arg1);

    // void setLoops(unsigned int loops)
    self->setLoops((unsigned int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Animation_setRestoreOriginalFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    bool arg1 = false;       /** restoreOriginalFrame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_bool(L, 2, &arg1);

    // void setRestoreOriginalFrame(bool restoreOriginalFrame)
    self->setRestoreOriginalFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Animation(lua_State *L)
{
    oluacls_class(L, "cc.Animation", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_Animation___move);
    oluacls_func(L, "addSpriteFrame", _cocos2d_Animation_addSpriteFrame);
    oluacls_func(L, "addSpriteFrameWithFile", _cocos2d_Animation_addSpriteFrameWithFile);
    oluacls_func(L, "addSpriteFrameWithTexture", _cocos2d_Animation_addSpriteFrameWithTexture);
    oluacls_func(L, "clone", _cocos2d_Animation_clone);
    oluacls_func(L, "create", _cocos2d_Animation_create);
    oluacls_func(L, "createWithSpriteFrames", _cocos2d_Animation_createWithSpriteFrames);
    oluacls_func(L, "getDelayPerUnit", _cocos2d_Animation_getDelayPerUnit);
    oluacls_func(L, "getDuration", _cocos2d_Animation_getDuration);
    oluacls_func(L, "getFrames", _cocos2d_Animation_getFrames);
    oluacls_func(L, "getLoops", _cocos2d_Animation_getLoops);
    oluacls_func(L, "getRestoreOriginalFrame", _cocos2d_Animation_getRestoreOriginalFrame);
    oluacls_func(L, "getTotalDelayUnits", _cocos2d_Animation_getTotalDelayUnits);
    oluacls_func(L, "init", _cocos2d_Animation_init);
    oluacls_func(L, "initWithAnimationFrames", _cocos2d_Animation_initWithAnimationFrames);
    oluacls_func(L, "initWithSpriteFrames", _cocos2d_Animation_initWithSpriteFrames);
    oluacls_func(L, "new", _cocos2d_Animation_new);
    oluacls_func(L, "setDelayPerUnit", _cocos2d_Animation_setDelayPerUnit);
    oluacls_func(L, "setFrames", _cocos2d_Animation_setFrames);
    oluacls_func(L, "setLoops", _cocos2d_Animation_setLoops);
    oluacls_func(L, "setRestoreOriginalFrame", _cocos2d_Animation_setRestoreOriginalFrame);
    oluacls_prop(L, "delayPerUnit", _cocos2d_Animation_getDelayPerUnit, _cocos2d_Animation_setDelayPerUnit);
    oluacls_prop(L, "duration", _cocos2d_Animation_getDuration, nullptr);
    oluacls_prop(L, "frames", _cocos2d_Animation_getFrames, _cocos2d_Animation_setFrames);
    oluacls_prop(L, "loops", _cocos2d_Animation_getLoops, _cocos2d_Animation_setLoops);
    oluacls_prop(L, "restoreOriginalFrame", _cocos2d_Animation_getRestoreOriginalFrame, _cocos2d_Animation_setRestoreOriginalFrame);
    oluacls_prop(L, "totalDelayUnits", _cocos2d_Animation_getTotalDelayUnits, nullptr);

    olua_registerluatype<cocos2d::Animation>(L, "cc.Animation");

    return 1;
}

static int _cocos2d_SpriteFrame___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::SpriteFrame *)olua_toobj(L, 1, "cc.SpriteFrame");
    olua_push_cppobj(L, self, "cc.SpriteFrame");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_SpriteFrame_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // cocos2d::SpriteFrame *clone()
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)self->clone();
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_create1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */

    olua_check_std_string(L, 1, &arg1);
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);

    // static cocos2d::SpriteFrame *create(const std::string &filename, const cocos2d::Rect &rect)
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)cocos2d::SpriteFrame::create(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_create2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;       /** rotated */
    cocos2d::Vec2 arg4;       /** offset */
    cocos2d::Size arg5;       /** originalSize */

    olua_check_std_string(L, 1, &arg1);
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);
    olua_check_bool(L, 3, &arg3);
    auto_olua_check_cocos2d_Vec2(L, 4, &arg4);
    auto_olua_check_cocos2d_Size(L, 5, &arg5);

    // static cocos2d::SpriteFrame *create(const std::string &filename, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)cocos2d::SpriteFrame::create(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (manual_olua_is_cocos2d_Rect(L, 2))) {
            // static cocos2d::SpriteFrame *create(const std::string &filename, const cocos2d::Rect &rect)
            return _cocos2d_SpriteFrame_create1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_string(L, 1)) && (manual_olua_is_cocos2d_Rect(L, 2)) && (olua_is_bool(L, 3)) && (auto_olua_is_cocos2d_Vec2(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5))) {
            // static cocos2d::SpriteFrame *create(const std::string &filename, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
            return _cocos2d_SpriteFrame_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteFrame_createWithTexture1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect arg2;       /** rect */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);

    // static cocos2d::SpriteFrame *createWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)cocos2d::SpriteFrame::createWithTexture(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_createWithTexture2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;       /** rotated */
    cocos2d::Vec2 arg4;       /** offset */
    cocos2d::Size arg5;       /** originalSize */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);
    olua_check_bool(L, 3, &arg3);
    auto_olua_check_cocos2d_Vec2(L, 4, &arg4);
    auto_olua_check_cocos2d_Size(L, 5, &arg5);

    // static cocos2d::SpriteFrame *createWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)cocos2d::SpriteFrame::createWithTexture(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_createWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 1, "cc.Texture2D")) && (manual_olua_is_cocos2d_Rect(L, 2))) {
            // static cocos2d::SpriteFrame *createWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
            return _cocos2d_SpriteFrame_createWithTexture1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_cppobj(L, 1, "cc.Texture2D")) && (manual_olua_is_cocos2d_Rect(L, 2)) && (olua_is_bool(L, 3)) && (auto_olua_is_cocos2d_Vec2(L, 4)) && (auto_olua_is_cocos2d_Size(L, 5))) {
            // static cocos2d::SpriteFrame *createWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
            return _cocos2d_SpriteFrame_createWithTexture2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::createWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteFrame_getAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const cocos2d::Vec2 &getAnchorPoint()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getAnchorPoint();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_getCenterRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const cocos2d::Rect &getCenterRect()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getCenterRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_getOffset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const cocos2d::Vec2 &getOffset()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getOffset();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_getOffsetInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const cocos2d::Vec2 &getOffsetInPixels()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getOffsetInPixels();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_getOriginalSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const cocos2d::Size &getOriginalSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getOriginalSize();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_getOriginalSizeInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const cocos2d::Size &getOriginalSizeInPixels()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getOriginalSizeInPixels();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_getRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const cocos2d::Rect &getRect()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_getRectInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const cocos2d::Rect &getRectInPixels()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getRectInPixels();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture();
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_hasAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // bool hasAnchorPoint()
    bool ret = (bool)self->hasAnchorPoint();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_hasCenterRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // bool hasCenterRect()
    bool ret = (bool)self->hasCenterRect();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_hasPolygonInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // bool hasPolygonInfo()
    bool ret = (bool)self->hasPolygonInfo();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTexture1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);

    // bool initWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithTexture(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTexture2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;       /** rotated */
    cocos2d::Vec2 arg4;       /** offset */
    cocos2d::Size arg5;       /** originalSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);
    auto_olua_check_cocos2d_Vec2(L, 5, &arg4);
    auto_olua_check_cocos2d_Size(L, 6, &arg5);

    // bool initWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
    bool ret = (bool)self->initWithTexture(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Texture2D")) && (manual_olua_is_cocos2d_Rect(L, 3))) {
            // bool initWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
            return _cocos2d_SpriteFrame_initWithTexture1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_cppobj(L, 2, "cc.Texture2D")) && (manual_olua_is_cocos2d_Rect(L, 3)) && (olua_is_bool(L, 4)) && (auto_olua_is_cocos2d_Vec2(L, 5)) && (auto_olua_is_cocos2d_Size(L, 6))) {
            // bool initWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
            return _cocos2d_SpriteFrame_initWithTexture2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::initWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteFrame_initWithTextureFilename1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_std_string(L, 2, &arg1);
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);

    // bool initWithTextureFilename(const std::string &filename, const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithTextureFilename(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTextureFilename2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;       /** rotated */
    cocos2d::Vec2 arg4;       /** offset */
    cocos2d::Size arg5;       /** originalSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_std_string(L, 2, &arg1);
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);
    auto_olua_check_cocos2d_Vec2(L, 5, &arg4);
    auto_olua_check_cocos2d_Size(L, 6, &arg5);

    // bool initWithTextureFilename(const std::string &filename, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
    bool ret = (bool)self->initWithTextureFilename(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTextureFilename(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (manual_olua_is_cocos2d_Rect(L, 3))) {
            // bool initWithTextureFilename(const std::string &filename, const cocos2d::Rect &rect)
            return _cocos2d_SpriteFrame_initWithTextureFilename1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_string(L, 2)) && (manual_olua_is_cocos2d_Rect(L, 3)) && (olua_is_bool(L, 4)) && (auto_olua_is_cocos2d_Vec2(L, 5)) && (auto_olua_is_cocos2d_Size(L, 6))) {
            // bool initWithTextureFilename(const std::string &filename, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
            return _cocos2d_SpriteFrame_initWithTextureFilename2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::initWithTextureFilename' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteFrame_isRotated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // bool isRotated()
    bool ret = (bool)self->isRotated();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_new(lua_State *L)
{
    olua_startinvoke(L);

    // SpriteFrame()
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)new cocos2d::SpriteFrame();
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrame");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Vec2 arg1;       /** anchorPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setAnchorPoint(const cocos2d::Vec2 &anchorPoint)
    self->setAnchorPoint(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrame_setCenterRectInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Rect arg1;       /** centerRect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setCenterRectInPixels(const cocos2d::Rect &centerRect)
    self->setCenterRectInPixels(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrame_setOffset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Vec2 arg1;       /** offsets */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setOffset(const cocos2d::Vec2 &offsets)
    self->setOffset(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrame_setOffsetInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Vec2 arg1;       /** offsetInPixels */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setOffsetInPixels(const cocos2d::Vec2 &offsetInPixels)
    self->setOffsetInPixels(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrame_setOriginalSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Size arg1;       /** sizeInPixels */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);

    // void setOriginalSize(const cocos2d::Size &sizeInPixels)
    self->setOriginalSize(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrame_setOriginalSizeInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Size arg1;       /** sizeInPixels */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);

    // void setOriginalSizeInPixels(const cocos2d::Size &sizeInPixels)
    self->setOriginalSizeInPixels(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrame_setRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setRect(const cocos2d::Rect &rect)
    self->setRect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrame_setRectInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Rect arg1;       /** rectInPixels */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setRectInPixels(const cocos2d::Rect &rectInPixels)
    self->setRectInPixels(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrame_setRotated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    bool arg1 = false;       /** rotated */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_bool(L, 2, &arg1);

    // void setRotated(bool rotated)
    self->setRotated(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrame_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *pobTexture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_SpriteFrame(lua_State *L)
{
    oluacls_class(L, "cc.SpriteFrame", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_SpriteFrame___move);
    oluacls_func(L, "clone", _cocos2d_SpriteFrame_clone);
    oluacls_func(L, "create", _cocos2d_SpriteFrame_create);
    oluacls_func(L, "createWithTexture", _cocos2d_SpriteFrame_createWithTexture);
    oluacls_func(L, "getAnchorPoint", _cocos2d_SpriteFrame_getAnchorPoint);
    oluacls_func(L, "getCenterRect", _cocos2d_SpriteFrame_getCenterRect);
    oluacls_func(L, "getOffset", _cocos2d_SpriteFrame_getOffset);
    oluacls_func(L, "getOffsetInPixels", _cocos2d_SpriteFrame_getOffsetInPixels);
    oluacls_func(L, "getOriginalSize", _cocos2d_SpriteFrame_getOriginalSize);
    oluacls_func(L, "getOriginalSizeInPixels", _cocos2d_SpriteFrame_getOriginalSizeInPixels);
    oluacls_func(L, "getRect", _cocos2d_SpriteFrame_getRect);
    oluacls_func(L, "getRectInPixels", _cocos2d_SpriteFrame_getRectInPixels);
    oluacls_func(L, "getTexture", _cocos2d_SpriteFrame_getTexture);
    oluacls_func(L, "hasAnchorPoint", _cocos2d_SpriteFrame_hasAnchorPoint);
    oluacls_func(L, "hasCenterRect", _cocos2d_SpriteFrame_hasCenterRect);
    oluacls_func(L, "hasPolygonInfo", _cocos2d_SpriteFrame_hasPolygonInfo);
    oluacls_func(L, "initWithTexture", _cocos2d_SpriteFrame_initWithTexture);
    oluacls_func(L, "initWithTextureFilename", _cocos2d_SpriteFrame_initWithTextureFilename);
    oluacls_func(L, "isRotated", _cocos2d_SpriteFrame_isRotated);
    oluacls_func(L, "new", _cocos2d_SpriteFrame_new);
    oluacls_func(L, "setAnchorPoint", _cocos2d_SpriteFrame_setAnchorPoint);
    oluacls_func(L, "setCenterRectInPixels", _cocos2d_SpriteFrame_setCenterRectInPixels);
    oluacls_func(L, "setOffset", _cocos2d_SpriteFrame_setOffset);
    oluacls_func(L, "setOffsetInPixels", _cocos2d_SpriteFrame_setOffsetInPixels);
    oluacls_func(L, "setOriginalSize", _cocos2d_SpriteFrame_setOriginalSize);
    oluacls_func(L, "setOriginalSizeInPixels", _cocos2d_SpriteFrame_setOriginalSizeInPixels);
    oluacls_func(L, "setRect", _cocos2d_SpriteFrame_setRect);
    oluacls_func(L, "setRectInPixels", _cocos2d_SpriteFrame_setRectInPixels);
    oluacls_func(L, "setRotated", _cocos2d_SpriteFrame_setRotated);
    oluacls_func(L, "setTexture", _cocos2d_SpriteFrame_setTexture);
    oluacls_prop(L, "anchorPoint", _cocos2d_SpriteFrame_getAnchorPoint, _cocos2d_SpriteFrame_setAnchorPoint);
    oluacls_prop(L, "centerRect", _cocos2d_SpriteFrame_getCenterRect, nullptr);
    oluacls_prop(L, "offset", _cocos2d_SpriteFrame_getOffset, _cocos2d_SpriteFrame_setOffset);
    oluacls_prop(L, "offsetInPixels", _cocos2d_SpriteFrame_getOffsetInPixels, _cocos2d_SpriteFrame_setOffsetInPixels);
    oluacls_prop(L, "originalSize", _cocos2d_SpriteFrame_getOriginalSize, _cocos2d_SpriteFrame_setOriginalSize);
    oluacls_prop(L, "originalSizeInPixels", _cocos2d_SpriteFrame_getOriginalSizeInPixels, _cocos2d_SpriteFrame_setOriginalSizeInPixels);
    oluacls_prop(L, "rect", _cocos2d_SpriteFrame_getRect, _cocos2d_SpriteFrame_setRect);
    oluacls_prop(L, "rectInPixels", _cocos2d_SpriteFrame_getRectInPixels, _cocos2d_SpriteFrame_setRectInPixels);
    oluacls_prop(L, "rotated", _cocos2d_SpriteFrame_isRotated, _cocos2d_SpriteFrame_setRotated);
    oluacls_prop(L, "texture", _cocos2d_SpriteFrame_getTexture, _cocos2d_SpriteFrame_setTexture);

    olua_registerluatype<cocos2d::SpriteFrame>(L, "cc.SpriteFrame");

    return 1;
}

static int _cocos2d_Sprite___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Sprite *)olua_toobj(L, 1, "cc.Sprite");
    olua_push_cppobj(L, self, "cc.Sprite");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Sprite_create1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Sprite *create()
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_create2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::Sprite *create(const std::string &filename)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_create3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */

    olua_check_std_string(L, 1, &arg1);
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);

    // static cocos2d::Sprite *create(const std::string &filename, const cocos2d::Rect &rect)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::create(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::Sprite *create()
        return _cocos2d_Sprite_create1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 1))) {
            // static cocos2d::Sprite *create(const std::string &filename)
            return _cocos2d_Sprite_create2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (manual_olua_is_cocos2d_Rect(L, 2))) {
            // static cocos2d::Sprite *create(const std::string &filename, const cocos2d::Rect &rect)
            return _cocos2d_Sprite_create3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Sprite_createWithSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.SpriteFrame");

    // static cocos2d::Sprite *createWithSpriteFrame(cocos2d::SpriteFrame *spriteFrame)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::createWithSpriteFrame(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_createWithSpriteFrameName(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** spriteFrameName */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::Sprite *createWithSpriteFrameName(const std::string &spriteFrameName)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::createWithSpriteFrameName(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_createWithTexture1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");

    // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::createWithTexture(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_createWithTexture2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;       /** rotated */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);
    olua_check_bool(L, 3, &arg3);

    // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, @optional bool rotated)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::createWithTexture(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_createWithTexture3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect arg2;       /** rect */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);

    // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, @optional bool rotated)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::createWithTexture(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_createWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 1, "cc.Texture2D"))) {
            // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture)
            return _cocos2d_Sprite_createWithTexture1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 1, "cc.Texture2D")) && (manual_olua_is_cocos2d_Rect(L, 2))) {
            // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, @optional bool rotated)
            return _cocos2d_Sprite_createWithTexture3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_cppobj(L, 1, "cc.Texture2D")) && (manual_olua_is_cocos2d_Rect(L, 2)) && (olua_is_bool(L, 3))) {
            // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, @optional bool rotated)
            return _cocos2d_Sprite_createWithTexture2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::createWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Sprite_getAtlasIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // ssize_t getAtlasIndex()
    ssize_t ret = (ssize_t)self->getAtlasIndex();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getBatchNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // cocos2d::SpriteBatchNode *getBatchNode()
    cocos2d::SpriteBatchNode *ret = (cocos2d::SpriteBatchNode *)self->getBatchNode();
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_olua_push_cocos2d_BlendFunc(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getCenterRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // cocos2d::Rect getCenterRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getCenterRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getCenterRectNormalized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // cocos2d::Rect getCenterRectNormalized()
    cocos2d::Rect ret = (cocos2d::Rect)self->getCenterRectNormalized();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getOffsetPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // const cocos2d::Vec2 &getOffsetPosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getOffsetPosition();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getResourceName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // const std::string &getResourceName()
    const std::string &ret = (const std::string &)self->getResourceName();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getResourceType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // int getResourceType()
    int ret = (int)self->getResourceType();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // cocos2d::SpriteFrame *getSpriteFrame()
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)self->getSpriteFrame();
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture();
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // cocos2d::TextureAtlas *getTextureAtlas()
    cocos2d::TextureAtlas *ret = (cocos2d::TextureAtlas *)self->getTextureAtlas();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_getTextureRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // const cocos2d::Rect &getTextureRect()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getTextureRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_initWithFile1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_std_string(L, 2, &arg1);

    // bool initWithFile(const std::string &filename)
    bool ret = (bool)self->initWithFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_initWithFile2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_std_string(L, 2, &arg1);
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);

    // bool initWithFile(const std::string &filename, const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_initWithFile(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // bool initWithFile(const std::string &filename)
            return _cocos2d_Sprite_initWithFile1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (manual_olua_is_cocos2d_Rect(L, 3))) {
            // bool initWithFile(const std::string &filename, const cocos2d::Rect &rect)
            return _cocos2d_Sprite_initWithFile2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::initWithFile' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Sprite_initWithSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");

    // bool initWithSpriteFrame(cocos2d::SpriteFrame *spriteFrame)
    bool ret = (bool)self->initWithSpriteFrame(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_initWithSpriteFrameName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** spriteFrameName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_std_string(L, 2, &arg1);

    // bool initWithSpriteFrameName(const std::string &spriteFrameName)
    bool ret = (bool)self->initWithSpriteFrameName(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_initWithTexture1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // bool initWithTexture(cocos2d::Texture2D *texture)
    bool ret = (bool)self->initWithTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_initWithTexture2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);

    // bool initWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithTexture(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_initWithTexture3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;       /** rotated */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);

    // bool initWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, bool rotated)
    bool ret = (bool)self->initWithTexture(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_initWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Texture2D"))) {
            // bool initWithTexture(cocos2d::Texture2D *texture)
            return _cocos2d_Sprite_initWithTexture1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Texture2D")) && (manual_olua_is_cocos2d_Rect(L, 3))) {
            // bool initWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect)
            return _cocos2d_Sprite_initWithTexture2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_cppobj(L, 2, "cc.Texture2D")) && (manual_olua_is_cocos2d_Rect(L, 3)) && (olua_is_bool(L, 4))) {
            // bool initWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, bool rotated)
            return _cocos2d_Sprite_initWithTexture3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::initWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Sprite_isDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // bool isDirty()
    bool ret = (bool)self->isDirty();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_isFlippedX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // bool isFlippedX()
    bool ret = (bool)self->isFlippedX();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_isFlippedY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // bool isFlippedY()
    bool ret = (bool)self->isFlippedY();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_isFrameDisplayed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** frame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");

    // bool isFrameDisplayed(cocos2d::SpriteFrame *frame)
    bool ret = (bool)self->isFrameDisplayed(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_isStretchEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // bool isStretchEnabled()
    bool ret = (bool)self->isStretchEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_isTextureRectRotated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");

    // bool isTextureRectRotated()
    bool ret = (bool)self->isTextureRectRotated();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_new(lua_State *L)
{
    olua_startinvoke(L);

    // Sprite()
    cocos2d::Sprite *ret = (cocos2d::Sprite *)new cocos2d::Sprite();
    int num_ret = olua_push_cppobj(L, ret, "cc.Sprite");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Sprite_setAtlasIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    lua_Integer arg1 = 0;       /** atlasIndex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_int(L, 2, &arg1);

    // void setAtlasIndex(ssize_t atlasIndex)
    self->setAtlasIndex((ssize_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setBatchNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::SpriteBatchNode *arg1 = nullptr;       /** spriteBatchNode */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteBatchNode");

    // void setBatchNode(cocos2d::SpriteBatchNode *spriteBatchNode)
    self->setBatchNode(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    auto_olua_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setCenterRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setCenterRect(const cocos2d::Rect &rect)
    self->setCenterRect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setCenterRectNormalized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setCenterRectNormalized(const cocos2d::Rect &rect)
    self->setCenterRectNormalized(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    bool arg1 = false;       /** dirty */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_bool(L, 2, &arg1);

    // void setDirty(bool dirty)
    self->setDirty(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setDisplayFrameWithAnimationName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** animationName */
    lua_Integer arg2 = 0;       /** frameIndex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setDisplayFrameWithAnimationName(const std::string &animationName, ssize_t frameIndex)
    self->setDisplayFrameWithAnimationName(arg1, (ssize_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setFlippedX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    bool arg1 = false;       /** flippedX */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_bool(L, 2, &arg1);

    // void setFlippedX(bool flippedX)
    self->setFlippedX(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setFlippedY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    bool arg1 = false;       /** flippedY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_bool(L, 2, &arg1);

    // void setFlippedY(bool flippedY)
    self->setFlippedY(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setSpriteFrame1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** spriteFrameName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_std_string(L, 2, &arg1);

    // void setSpriteFrame(const std::string &spriteFrameName)
    self->setSpriteFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setSpriteFrame2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** newFrame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");

    // void setSpriteFrame(cocos2d::SpriteFrame *newFrame)
    self->setSpriteFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setSpriteFrame(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if ((olua_is_std_string(L, 2))) {
            // void setSpriteFrame(const std::string &spriteFrameName)
            return _cocos2d_Sprite_setSpriteFrame1(L);
        }

        // if ((olua_is_cppobj(L, 2, "cc.SpriteFrame"))) {
            // void setSpriteFrame(cocos2d::SpriteFrame *newFrame)
            return _cocos2d_Sprite_setSpriteFrame2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::setSpriteFrame' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Sprite_setStretchEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_bool(L, 2, &arg1);

    // void setStretchEnabled(bool enabled)
    self->setStretchEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setTexture1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_std_string(L, 2, &arg1);

    // void setTexture(const std::string &filename)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setTexture2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setTexture(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if ((olua_is_std_string(L, 2))) {
            // void setTexture(const std::string &filename)
            return _cocos2d_Sprite_setTexture1(L);
        }

        // if ((olua_is_cppobj(L, 2, "cc.Texture2D"))) {
            // void setTexture(cocos2d::Texture2D *texture)
            return _cocos2d_Sprite_setTexture2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::setTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Sprite_setTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::TextureAtlas *arg1 = nullptr;       /** textureAtlas */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextureAtlas");

    // void setTextureAtlas(cocos2d::TextureAtlas *textureAtlas)
    self->setTextureAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setTextureRect1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setTextureRect(const cocos2d::Rect &rect)
    self->setTextureRect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setTextureRect2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect arg1;       /** rect */
    bool arg2 = false;       /** rotated */
    cocos2d::Size arg3;       /** untrimmedSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);
    auto_olua_check_cocos2d_Size(L, 4, &arg3);

    // void setTextureRect(const cocos2d::Rect &rect, bool rotated, const cocos2d::Size &untrimmedSize)
    self->setTextureRect(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Sprite_setTextureRect(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Rect(L, 2))) {
            // void setTextureRect(const cocos2d::Rect &rect)
            return _cocos2d_Sprite_setTextureRect1(L);
        // }
    }

    if (num_args == 3) {
        // if ((manual_olua_is_cocos2d_Rect(L, 2)) && (olua_is_bool(L, 3)) && (auto_olua_is_cocos2d_Size(L, 4))) {
            // void setTextureRect(const cocos2d::Rect &rect, bool rotated, const cocos2d::Size &untrimmedSize)
            return _cocos2d_Sprite_setTextureRect2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::setTextureRect' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Sprite_setVertexRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Sprite");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setVertexRect(const cocos2d::Rect &rect)
    self->setVertexRect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Sprite(lua_State *L)
{
    oluacls_class(L, "cc.Sprite", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_Sprite___move);
    oluacls_func(L, "create", _cocos2d_Sprite_create);
    oluacls_func(L, "createWithSpriteFrame", _cocos2d_Sprite_createWithSpriteFrame);
    oluacls_func(L, "createWithSpriteFrameName", _cocos2d_Sprite_createWithSpriteFrameName);
    oluacls_func(L, "createWithTexture", _cocos2d_Sprite_createWithTexture);
    oluacls_func(L, "getAtlasIndex", _cocos2d_Sprite_getAtlasIndex);
    oluacls_func(L, "getBatchNode", _cocos2d_Sprite_getBatchNode);
    oluacls_func(L, "getBlendFunc", _cocos2d_Sprite_getBlendFunc);
    oluacls_func(L, "getCenterRect", _cocos2d_Sprite_getCenterRect);
    oluacls_func(L, "getCenterRectNormalized", _cocos2d_Sprite_getCenterRectNormalized);
    oluacls_func(L, "getOffsetPosition", _cocos2d_Sprite_getOffsetPosition);
    oluacls_func(L, "getResourceName", _cocos2d_Sprite_getResourceName);
    oluacls_func(L, "getResourceType", _cocos2d_Sprite_getResourceType);
    oluacls_func(L, "getSpriteFrame", _cocos2d_Sprite_getSpriteFrame);
    oluacls_func(L, "getTexture", _cocos2d_Sprite_getTexture);
    oluacls_func(L, "getTextureAtlas", _cocos2d_Sprite_getTextureAtlas);
    oluacls_func(L, "getTextureRect", _cocos2d_Sprite_getTextureRect);
    oluacls_func(L, "initWithFile", _cocos2d_Sprite_initWithFile);
    oluacls_func(L, "initWithSpriteFrame", _cocos2d_Sprite_initWithSpriteFrame);
    oluacls_func(L, "initWithSpriteFrameName", _cocos2d_Sprite_initWithSpriteFrameName);
    oluacls_func(L, "initWithTexture", _cocos2d_Sprite_initWithTexture);
    oluacls_func(L, "isDirty", _cocos2d_Sprite_isDirty);
    oluacls_func(L, "isFlippedX", _cocos2d_Sprite_isFlippedX);
    oluacls_func(L, "isFlippedY", _cocos2d_Sprite_isFlippedY);
    oluacls_func(L, "isFrameDisplayed", _cocos2d_Sprite_isFrameDisplayed);
    oluacls_func(L, "isStretchEnabled", _cocos2d_Sprite_isStretchEnabled);
    oluacls_func(L, "isTextureRectRotated", _cocos2d_Sprite_isTextureRectRotated);
    oluacls_func(L, "new", _cocos2d_Sprite_new);
    oluacls_func(L, "setAtlasIndex", _cocos2d_Sprite_setAtlasIndex);
    oluacls_func(L, "setBatchNode", _cocos2d_Sprite_setBatchNode);
    oluacls_func(L, "setBlendFunc", _cocos2d_Sprite_setBlendFunc);
    oluacls_func(L, "setCenterRect", _cocos2d_Sprite_setCenterRect);
    oluacls_func(L, "setCenterRectNormalized", _cocos2d_Sprite_setCenterRectNormalized);
    oluacls_func(L, "setDirty", _cocos2d_Sprite_setDirty);
    oluacls_func(L, "setDisplayFrameWithAnimationName", _cocos2d_Sprite_setDisplayFrameWithAnimationName);
    oluacls_func(L, "setFlippedX", _cocos2d_Sprite_setFlippedX);
    oluacls_func(L, "setFlippedY", _cocos2d_Sprite_setFlippedY);
    oluacls_func(L, "setSpriteFrame", _cocos2d_Sprite_setSpriteFrame);
    oluacls_func(L, "setStretchEnabled", _cocos2d_Sprite_setStretchEnabled);
    oluacls_func(L, "setTexture", _cocos2d_Sprite_setTexture);
    oluacls_func(L, "setTextureAtlas", _cocos2d_Sprite_setTextureAtlas);
    oluacls_func(L, "setTextureRect", _cocos2d_Sprite_setTextureRect);
    oluacls_func(L, "setVertexRect", _cocos2d_Sprite_setVertexRect);
    oluacls_prop(L, "atlasIndex", _cocos2d_Sprite_getAtlasIndex, _cocos2d_Sprite_setAtlasIndex);
    oluacls_prop(L, "batchNode", _cocos2d_Sprite_getBatchNode, _cocos2d_Sprite_setBatchNode);
    oluacls_prop(L, "blendFunc", _cocos2d_Sprite_getBlendFunc, _cocos2d_Sprite_setBlendFunc);
    oluacls_prop(L, "centerRect", _cocos2d_Sprite_getCenterRect, _cocos2d_Sprite_setCenterRect);
    oluacls_prop(L, "centerRectNormalized", _cocos2d_Sprite_getCenterRectNormalized, _cocos2d_Sprite_setCenterRectNormalized);
    oluacls_prop(L, "dirty", _cocos2d_Sprite_isDirty, _cocos2d_Sprite_setDirty);
    oluacls_prop(L, "flippedX", _cocos2d_Sprite_isFlippedX, _cocos2d_Sprite_setFlippedX);
    oluacls_prop(L, "flippedY", _cocos2d_Sprite_isFlippedY, _cocos2d_Sprite_setFlippedY);
    oluacls_prop(L, "offsetPosition", _cocos2d_Sprite_getOffsetPosition, nullptr);
    oluacls_prop(L, "resourceName", _cocos2d_Sprite_getResourceName, nullptr);
    oluacls_prop(L, "resourceType", _cocos2d_Sprite_getResourceType, nullptr);
    oluacls_prop(L, "spriteFrame", _cocos2d_Sprite_getSpriteFrame, _cocos2d_Sprite_setSpriteFrame);
    oluacls_prop(L, "stretchEnabled", _cocos2d_Sprite_isStretchEnabled, _cocos2d_Sprite_setStretchEnabled);
    oluacls_prop(L, "texture", _cocos2d_Sprite_getTexture, _cocos2d_Sprite_setTexture);
    oluacls_prop(L, "textureAtlas", _cocos2d_Sprite_getTextureAtlas, _cocos2d_Sprite_setTextureAtlas);
    oluacls_prop(L, "textureRect", _cocos2d_Sprite_getTextureRect, _cocos2d_Sprite_setTextureRect);
    oluacls_prop(L, "textureRectRotated", _cocos2d_Sprite_isTextureRectRotated, nullptr);
    oluacls_const_integer(L, "INDEX_NOT_INITIALIZED", (lua_Integer)cocos2d::Sprite::INDEX_NOT_INITIALIZED);

    olua_registerluatype<cocos2d::Sprite>(L, "cc.Sprite");

    return 1;
}

static int _cocos2d_SpriteBatchNode___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::SpriteBatchNode *)olua_toobj(L, 1, "cc.SpriteBatchNode");
    olua_push_cppobj(L, self, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_SpriteBatchNode_addSpriteWithoutQuad(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** child */
    lua_Integer arg2 = 0;       /** z */
    lua_Integer arg3 = 0;       /** aTag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // cocos2d::SpriteBatchNode *addSpriteWithoutQuad(cocos2d::Sprite *child, int z, int aTag)
    cocos2d::SpriteBatchNode *ret = (cocos2d::SpriteBatchNode *)self->addSpriteWithoutQuad(arg1, (int)arg2, (int)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_appendChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");

    // void appendChild(cocos2d::Sprite *sprite)
    self->appendChild(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteBatchNode_atlasIndexForChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */
    lua_Integer arg2 = 0;       /** z */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");
    olua_check_int(L, 3, &arg2);

    // ssize_t atlasIndexForChild(cocos2d::Sprite *sprite, int z)
    ssize_t ret = (ssize_t)self->atlasIndexForChild(arg1, (int)arg2);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_create1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** fileImage */
    lua_Integer arg2 = 0;       /** capacity */

    olua_check_std_string(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);

    // static cocos2d::SpriteBatchNode *create(const std::string &fileImage, @optional ssize_t capacity)
    cocos2d::SpriteBatchNode *ret = (cocos2d::SpriteBatchNode *)cocos2d::SpriteBatchNode::create(arg1, (ssize_t)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_create2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** fileImage */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::SpriteBatchNode *create(const std::string &fileImage, @optional ssize_t capacity)
    cocos2d::SpriteBatchNode *ret = (cocos2d::SpriteBatchNode *)cocos2d::SpriteBatchNode::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 1))) {
            // static cocos2d::SpriteBatchNode *create(const std::string &fileImage, @optional ssize_t capacity)
            return _cocos2d_SpriteBatchNode_create2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_int(L, 2))) {
            // static cocos2d::SpriteBatchNode *create(const std::string &fileImage, @optional ssize_t capacity)
            return _cocos2d_SpriteBatchNode_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteBatchNode::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteBatchNode_createWithTexture1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** tex */
    lua_Integer arg2 = 0;       /** capacity */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 2, &arg2);

    // static cocos2d::SpriteBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
    cocos2d::SpriteBatchNode *ret = (cocos2d::SpriteBatchNode *)cocos2d::SpriteBatchNode::createWithTexture(arg1, (ssize_t)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_createWithTexture2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** tex */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");

    // static cocos2d::SpriteBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
    cocos2d::SpriteBatchNode *ret = (cocos2d::SpriteBatchNode *)cocos2d::SpriteBatchNode::createWithTexture(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_createWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 1, "cc.Texture2D"))) {
            // static cocos2d::SpriteBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
            return _cocos2d_SpriteBatchNode_createWithTexture2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 1, "cc.Texture2D")) && (olua_is_int(L, 2))) {
            // static cocos2d::SpriteBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
            return _cocos2d_SpriteBatchNode_createWithTexture1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteBatchNode::createWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteBatchNode_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_olua_push_cocos2d_BlendFunc(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_getDescendants(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");

    // const std::vector<Sprite *> &getDescendants()
    const std::vector<cocos2d::Sprite *> &ret = (const std::vector<cocos2d::Sprite *> &)self->getDescendants();
    int num_ret = olua_push_std_vector(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture();
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_getTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");

    // cocos2d::TextureAtlas *getTextureAtlas()
    cocos2d::TextureAtlas *ret = (cocos2d::TextureAtlas *)self->getTextureAtlas();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_highestAtlasIndexInChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");

    // ssize_t highestAtlasIndexInChild(cocos2d::Sprite *sprite)
    ssize_t ret = (ssize_t)self->highestAtlasIndexInChild(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_increaseAtlasCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");

    // void increaseAtlasCapacity()
    self->increaseAtlasCapacity();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteBatchNode_initWithFile1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    std::string arg1;       /** fileImage */
    lua_Integer arg2 = 0;       /** capacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // bool initWithFile(const std::string &fileImage, @optional ssize_t capacity)
    bool ret = (bool)self->initWithFile(arg1, (ssize_t)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_initWithFile2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    std::string arg1;       /** fileImage */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_std_string(L, 2, &arg1);

    // bool initWithFile(const std::string &fileImage, @optional ssize_t capacity)
    bool ret = (bool)self->initWithFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_initWithFile(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // bool initWithFile(const std::string &fileImage, @optional ssize_t capacity)
            return _cocos2d_SpriteBatchNode_initWithFile2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_int(L, 3))) {
            // bool initWithFile(const std::string &fileImage, @optional ssize_t capacity)
            return _cocos2d_SpriteBatchNode_initWithFile1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteBatchNode::initWithFile' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteBatchNode_initWithTexture1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** tex */
    lua_Integer arg2 = 0;       /** capacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 3, &arg2);

    // bool initWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
    bool ret = (bool)self->initWithTexture(arg1, (ssize_t)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_initWithTexture2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** tex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // bool initWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
    bool ret = (bool)self->initWithTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_initWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 2, "cc.Texture2D"))) {
            // bool initWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
            return _cocos2d_SpriteBatchNode_initWithTexture2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 2, "cc.Texture2D")) && (olua_is_int(L, 3))) {
            // bool initWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
            return _cocos2d_SpriteBatchNode_initWithTexture1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteBatchNode::initWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteBatchNode_insertQuadFromSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */
    lua_Integer arg2 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");
    olua_check_int(L, 3, &arg2);

    // void insertQuadFromSprite(cocos2d::Sprite *sprite, ssize_t index)
    self->insertQuadFromSprite(arg1, (ssize_t)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteBatchNode_lowestAtlasIndexInChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");

    // ssize_t lowestAtlasIndexInChild(cocos2d::Sprite *sprite)
    ssize_t ret = (ssize_t)self->lowestAtlasIndexInChild(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // SpriteBatchNode()
    cocos2d::SpriteBatchNode *ret = (cocos2d::SpriteBatchNode *)new cocos2d::SpriteBatchNode();
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteBatchNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_rebuildIndexInOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** parent */
    lua_Integer arg2 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");
    olua_check_int(L, 3, &arg2);

    // ssize_t rebuildIndexInOrder(cocos2d::Sprite *parent, ssize_t index)
    ssize_t ret = (ssize_t)self->rebuildIndexInOrder(arg1, (ssize_t)arg2);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteBatchNode_removeChildAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    lua_Integer arg1 = 0;       /** index */
    bool arg2 = false;       /** doCleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_int(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void removeChildAtIndex(ssize_t index, bool doCleanup)
    self->removeChildAtIndex((ssize_t)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteBatchNode_removeSpriteFromAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Sprite");

    // void removeSpriteFromAtlas(cocos2d::Sprite *sprite)
    self->removeSpriteFromAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteBatchNode_reorderBatch(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    bool arg1 = false;       /** reorder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_bool(L, 2, &arg1);

    // void reorderBatch(bool reorder)
    self->reorderBatch(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteBatchNode_reserveCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    lua_Integer arg1 = 0;       /** newCapacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_int(L, 2, &arg1);

    // void reserveCapacity(ssize_t newCapacity)
    self->reserveCapacity((ssize_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteBatchNode_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    auto_olua_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteBatchNode_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteBatchNode_setTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::TextureAtlas *arg1 = nullptr;       /** textureAtlas */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextureAtlas");

    // void setTextureAtlas(cocos2d::TextureAtlas *textureAtlas)
    self->setTextureAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_SpriteBatchNode(lua_State *L)
{
    oluacls_class(L, "cc.SpriteBatchNode", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_SpriteBatchNode___move);
    oluacls_func(L, "addSpriteWithoutQuad", _cocos2d_SpriteBatchNode_addSpriteWithoutQuad);
    oluacls_func(L, "appendChild", _cocos2d_SpriteBatchNode_appendChild);
    oluacls_func(L, "atlasIndexForChild", _cocos2d_SpriteBatchNode_atlasIndexForChild);
    oluacls_func(L, "create", _cocos2d_SpriteBatchNode_create);
    oluacls_func(L, "createWithTexture", _cocos2d_SpriteBatchNode_createWithTexture);
    oluacls_func(L, "getBlendFunc", _cocos2d_SpriteBatchNode_getBlendFunc);
    oluacls_func(L, "getDescendants", _cocos2d_SpriteBatchNode_getDescendants);
    oluacls_func(L, "getTexture", _cocos2d_SpriteBatchNode_getTexture);
    oluacls_func(L, "getTextureAtlas", _cocos2d_SpriteBatchNode_getTextureAtlas);
    oluacls_func(L, "highestAtlasIndexInChild", _cocos2d_SpriteBatchNode_highestAtlasIndexInChild);
    oluacls_func(L, "increaseAtlasCapacity", _cocos2d_SpriteBatchNode_increaseAtlasCapacity);
    oluacls_func(L, "initWithFile", _cocos2d_SpriteBatchNode_initWithFile);
    oluacls_func(L, "initWithTexture", _cocos2d_SpriteBatchNode_initWithTexture);
    oluacls_func(L, "insertQuadFromSprite", _cocos2d_SpriteBatchNode_insertQuadFromSprite);
    oluacls_func(L, "lowestAtlasIndexInChild", _cocos2d_SpriteBatchNode_lowestAtlasIndexInChild);
    oluacls_func(L, "new", _cocos2d_SpriteBatchNode_new);
    oluacls_func(L, "rebuildIndexInOrder", _cocos2d_SpriteBatchNode_rebuildIndexInOrder);
    oluacls_func(L, "removeChildAtIndex", _cocos2d_SpriteBatchNode_removeChildAtIndex);
    oluacls_func(L, "removeSpriteFromAtlas", _cocos2d_SpriteBatchNode_removeSpriteFromAtlas);
    oluacls_func(L, "reorderBatch", _cocos2d_SpriteBatchNode_reorderBatch);
    oluacls_func(L, "reserveCapacity", _cocos2d_SpriteBatchNode_reserveCapacity);
    oluacls_func(L, "setBlendFunc", _cocos2d_SpriteBatchNode_setBlendFunc);
    oluacls_func(L, "setTexture", _cocos2d_SpriteBatchNode_setTexture);
    oluacls_func(L, "setTextureAtlas", _cocos2d_SpriteBatchNode_setTextureAtlas);
    oluacls_prop(L, "blendFunc", _cocos2d_SpriteBatchNode_getBlendFunc, _cocos2d_SpriteBatchNode_setBlendFunc);
    oluacls_prop(L, "descendants", _cocos2d_SpriteBatchNode_getDescendants, nullptr);
    oluacls_prop(L, "texture", _cocos2d_SpriteBatchNode_getTexture, _cocos2d_SpriteBatchNode_setTexture);
    oluacls_prop(L, "textureAtlas", _cocos2d_SpriteBatchNode_getTextureAtlas, _cocos2d_SpriteBatchNode_setTextureAtlas);

    olua_registerluatype<cocos2d::SpriteBatchNode>(L, "cc.SpriteBatchNode");

    return 1;
}

static int _cocos2d_SpriteFrameCache___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::SpriteFrameCache *)olua_toobj(L, 1, "cc.SpriteFrameCache");
    olua_push_cppobj(L, self, "cc.SpriteFrameCache");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_SpriteFrameCache_addSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** frame */
    std::string arg2;       /** frameName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");
    olua_check_std_string(L, 3, &arg2);

    // void addSpriteFrame(cocos2d::SpriteFrame *frame, const std::string &frameName)
    self->addSpriteFrame(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_addSpriteFramesWithFile1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);

    // void addSpriteFramesWithFile(const std::string &plist)
    self->addSpriteFramesWithFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_addSpriteFramesWithFile2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */
    std::string arg2;       /** textureFileName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void addSpriteFramesWithFile(const std::string &plist, const std::string &textureFileName)
    self->addSpriteFramesWithFile(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_addSpriteFramesWithFile3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Texture2D");

    // void addSpriteFramesWithFile(const std::string &plist, cocos2d::Texture2D *texture)
    self->addSpriteFramesWithFile(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_addSpriteFramesWithFile(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 2))) {
            // void addSpriteFramesWithFile(const std::string &plist)
            return _cocos2d_SpriteFrameCache_addSpriteFramesWithFile1(L);
        // }
    }

    if (num_args == 2) {
        if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3))) {
            // void addSpriteFramesWithFile(const std::string &plist, const std::string &textureFileName)
            return _cocos2d_SpriteFrameCache_addSpriteFramesWithFile2(L);
        }

        // if ((olua_is_std_string(L, 2)) && (olua_is_cppobj(L, 3, "cc.Texture2D"))) {
            // void addSpriteFramesWithFile(const std::string &plist, cocos2d::Texture2D *texture)
            return _cocos2d_SpriteFrameCache_addSpriteFramesWithFile3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrameCache::addSpriteFramesWithFile' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteFrameCache_addSpriteFramesWithFileContent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist_content */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Texture2D");

    // void addSpriteFramesWithFileContent(const std::string &plist_content, cocos2d::Texture2D *texture)
    self->addSpriteFramesWithFileContent(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_destroyInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static void destroyInstance()
    cocos2d::SpriteFrameCache::destroyInstance();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::SpriteFrameCache *getInstance()
    cocos2d::SpriteFrameCache *ret = (cocos2d::SpriteFrameCache *)cocos2d::SpriteFrameCache::getInstance();
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrameCache");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrameCache_getSpriteFrameByName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::SpriteFrame *getSpriteFrameByName(const std::string &name)
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)self->getSpriteFrameByName(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrameCache_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");

    // bool init()
    bool ret = (bool)self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrameCache_isSpriteFramesWithFileLoaded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);

    // bool isSpriteFramesWithFileLoaded(const std::string &plist)
    bool ret = (bool)self->isSpriteFramesWithFileLoaded(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrameCache_reloadTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);

    // bool reloadTexture(const std::string &plist)
    bool ret = (bool)self->reloadTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpriteFrameCache_removeSpriteFrameByName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);

    // void removeSpriteFrameByName(const std::string &name)
    self->removeSpriteFrameByName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_removeSpriteFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");

    // void removeSpriteFrames()
    self->removeSpriteFrames();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_removeSpriteFramesFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);

    // void removeSpriteFramesFromFile(const std::string &plist)
    self->removeSpriteFramesFromFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_removeSpriteFramesFromFileContent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist_content */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_std_string(L, 2, &arg1);

    // void removeSpriteFramesFromFileContent(const std::string &plist_content)
    self->removeSpriteFramesFromFileContent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_removeSpriteFramesFromTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void removeSpriteFramesFromTexture(cocos2d::Texture2D *texture)
    self->removeSpriteFramesFromTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpriteFrameCache_removeUnusedSpriteFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrameCache");

    // void removeUnusedSpriteFrames()
    self->removeUnusedSpriteFrames();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_SpriteFrameCache(lua_State *L)
{
    oluacls_class(L, "cc.SpriteFrameCache", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_SpriteFrameCache___move);
    oluacls_func(L, "addSpriteFrame", _cocos2d_SpriteFrameCache_addSpriteFrame);
    oluacls_func(L, "addSpriteFramesWithFile", _cocos2d_SpriteFrameCache_addSpriteFramesWithFile);
    oluacls_func(L, "addSpriteFramesWithFileContent", _cocos2d_SpriteFrameCache_addSpriteFramesWithFileContent);
    oluacls_func(L, "destroyInstance", _cocos2d_SpriteFrameCache_destroyInstance);
    oluacls_func(L, "getInstance", _cocos2d_SpriteFrameCache_getInstance);
    oluacls_func(L, "getSpriteFrameByName", _cocos2d_SpriteFrameCache_getSpriteFrameByName);
    oluacls_func(L, "init", _cocos2d_SpriteFrameCache_init);
    oluacls_func(L, "isSpriteFramesWithFileLoaded", _cocos2d_SpriteFrameCache_isSpriteFramesWithFileLoaded);
    oluacls_func(L, "reloadTexture", _cocos2d_SpriteFrameCache_reloadTexture);
    oluacls_func(L, "removeSpriteFrameByName", _cocos2d_SpriteFrameCache_removeSpriteFrameByName);
    oluacls_func(L, "removeSpriteFrames", _cocos2d_SpriteFrameCache_removeSpriteFrames);
    oluacls_func(L, "removeSpriteFramesFromFile", _cocos2d_SpriteFrameCache_removeSpriteFramesFromFile);
    oluacls_func(L, "removeSpriteFramesFromFileContent", _cocos2d_SpriteFrameCache_removeSpriteFramesFromFileContent);
    oluacls_func(L, "removeSpriteFramesFromTexture", _cocos2d_SpriteFrameCache_removeSpriteFramesFromTexture);
    oluacls_func(L, "removeUnusedSpriteFrames", _cocos2d_SpriteFrameCache_removeUnusedSpriteFrames);
    oluacls_prop(L, "instance", _cocos2d_SpriteFrameCache_getInstance, nullptr);

    olua_registerluatype<cocos2d::SpriteFrameCache>(L, "cc.SpriteFrameCache");

    return 1;
}

static int _cocos2d_AnimationCache___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::AnimationCache *)olua_toobj(L, 1, "cc.AnimationCache");
    olua_push_cppobj(L, self, "cc.AnimationCache");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_AnimationCache_addAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    cocos2d::Animation *arg1 = nullptr;       /** animation */
    std::string arg2;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Animation");
    olua_check_std_string(L, 3, &arg2);

    // void addAnimation(cocos2d::Animation *animation, const std::string &name)
    self->addAnimation(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AnimationCache_addAnimationsWithDictionary(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    cocos2d::ValueMap arg1;       /** dictionary */
    std::string arg2;       /** plist */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationCache");
    manual_olua_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void addAnimationsWithDictionary(const cocos2d::ValueMap &dictionary, const std::string &plist)
    self->addAnimationsWithDictionary(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AnimationCache_addAnimationsWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationCache");
    olua_check_std_string(L, 2, &arg1);

    // void addAnimationsWithFile(const std::string &plist)
    self->addAnimationsWithFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AnimationCache_destroyInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static void destroyInstance()
    cocos2d::AnimationCache::destroyInstance();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_AnimationCache_getAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationCache");
    olua_check_std_string(L, 2, &arg1);

    // cocos2d::Animation *getAnimation(const std::string &name)
    cocos2d::Animation *ret = (cocos2d::Animation *)self->getAnimation(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationCache_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::AnimationCache *getInstance()
    cocos2d::AnimationCache *ret = (cocos2d::AnimationCache *)cocos2d::AnimationCache::getInstance();
    int num_ret = olua_push_cppobj(L, ret, "cc.AnimationCache");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationCache_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationCache");

    // bool init()
    bool ret = (bool)self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationCache_new(lua_State *L)
{
    olua_startinvoke(L);

    // AnimationCache()
    cocos2d::AnimationCache *ret = (cocos2d::AnimationCache *)new cocos2d::AnimationCache();
    int num_ret = olua_push_cppobj(L, ret, "cc.AnimationCache");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AnimationCache_removeAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationCache");
    olua_check_std_string(L, 2, &arg1);

    // void removeAnimation(const std::string &name)
    self->removeAnimation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_AnimationCache(lua_State *L)
{
    oluacls_class(L, "cc.AnimationCache", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_AnimationCache___move);
    oluacls_func(L, "addAnimation", _cocos2d_AnimationCache_addAnimation);
    oluacls_func(L, "addAnimationsWithDictionary", _cocos2d_AnimationCache_addAnimationsWithDictionary);
    oluacls_func(L, "addAnimationsWithFile", _cocos2d_AnimationCache_addAnimationsWithFile);
    oluacls_func(L, "destroyInstance", _cocos2d_AnimationCache_destroyInstance);
    oluacls_func(L, "getAnimation", _cocos2d_AnimationCache_getAnimation);
    oluacls_func(L, "getInstance", _cocos2d_AnimationCache_getInstance);
    oluacls_func(L, "init", _cocos2d_AnimationCache_init);
    oluacls_func(L, "new", _cocos2d_AnimationCache_new);
    oluacls_func(L, "removeAnimation", _cocos2d_AnimationCache_removeAnimation);
    oluacls_prop(L, "instance", _cocos2d_AnimationCache_getInstance, nullptr);

    olua_registerluatype<cocos2d::AnimationCache>(L, "cc.AnimationCache");

    return 1;
}

static int _cocos2d_Scene___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Scene *)olua_toobj(L, 1, "cc.Scene");
    olua_push_cppobj(L, self, "cc.Scene");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Scene_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Scene *create()
    cocos2d::Scene *ret = (cocos2d::Scene *)cocos2d::Scene::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_createWithPhysics(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Scene *createWithPhysics()
    cocos2d::Scene *ret = (cocos2d::Scene *)cocos2d::Scene::createWithPhysics();
    int num_ret = olua_push_cppobj(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_createWithSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** size */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);

    // static cocos2d::Scene *createWithSize(const cocos2d::Size &size)
    cocos2d::Scene *ret = (cocos2d::Scene *)cocos2d::Scene::createWithSize(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_getCameras(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");

    // const std::vector<Camera *> &getCameras()
    const std::vector<cocos2d::Camera *> &ret = (const std::vector<cocos2d::Camera *> &)self->getCameras();
    int num_ret = olua_push_std_vector(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_getDefaultCamera(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");

    // cocos2d::Camera *getDefaultCamera()
    cocos2d::Camera *ret = (cocos2d::Camera *)self->getDefaultCamera();
    int num_ret = olua_push_cppobj(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_getLights(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");

    // const std::vector<BaseLight *> &getLights()
    const std::vector<cocos2d::BaseLight *> &ret = (const std::vector<cocos2d::BaseLight *> &)self->getLights();
    int num_ret = olua_push_std_vector(L, ret, "cc.BaseLight");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_getPhysicsWorld(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");

    // @ref(single physicsWorld) cocos2d::PhysicsWorld *getPhysicsWorld()
    cocos2d::PhysicsWorld *ret = (cocos2d::PhysicsWorld *)self->getPhysicsWorld();
    int num_ret = olua_push_cppobj(L, ret, "cc.PhysicsWorld");

    // inject code after call
    olua_singleref(L, 1, "physicsWorld", -1);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_initWithPhysics(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");

    // bool initWithPhysics()
    bool ret = (bool)self->initWithPhysics();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_initWithSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::Size arg1;       /** size */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);

    // bool initWithSize(const cocos2d::Size &size)
    bool ret = (bool)self->initWithSize(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_new(lua_State *L)
{
    olua_startinvoke(L);

    // Scene()
    cocos2d::Scene *ret = (cocos2d::Scene *)new cocos2d::Scene();
    int num_ret = olua_push_cppobj(L, ret, "cc.Scene");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Scene_onProjectionChanged(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventCustom");

    // void onProjectionChanged(cocos2d::EventCustom *event)
    self->onProjectionChanged(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scene_setCameraOrderDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");

    // void setCameraOrderDirty()
    self->setCameraOrderDirty();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scene_setNavMeshDebugCamera(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::Camera *arg1 = nullptr;       /** camera */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Camera");

    // void setNavMeshDebugCamera(cocos2d::Camera *camera)
    self->setNavMeshDebugCamera(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scene_setPhysics3DDebugCamera(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::Camera *arg1 = nullptr;       /** camera */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Camera");

    // void setPhysics3DDebugCamera(cocos2d::Camera *camera)
    self->setPhysics3DDebugCamera(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Scene_stepPhysicsAndNavigation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    lua_Number arg1 = 0;       /** deltaTime */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");
    olua_check_number(L, 2, &arg1);

    // void stepPhysicsAndNavigation(float deltaTime)
    self->stepPhysicsAndNavigation((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Scene(lua_State *L)
{
    oluacls_class(L, "cc.Scene", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_Scene___move);
    oluacls_func(L, "create", _cocos2d_Scene_create);
    oluacls_func(L, "createWithPhysics", _cocos2d_Scene_createWithPhysics);
    oluacls_func(L, "createWithSize", _cocos2d_Scene_createWithSize);
    oluacls_func(L, "getCameras", _cocos2d_Scene_getCameras);
    oluacls_func(L, "getDefaultCamera", _cocos2d_Scene_getDefaultCamera);
    oluacls_func(L, "getLights", _cocos2d_Scene_getLights);
    oluacls_func(L, "getPhysicsWorld", _cocos2d_Scene_getPhysicsWorld);
    oluacls_func(L, "initWithPhysics", _cocos2d_Scene_initWithPhysics);
    oluacls_func(L, "initWithSize", _cocos2d_Scene_initWithSize);
    oluacls_func(L, "new", _cocos2d_Scene_new);
    oluacls_func(L, "onProjectionChanged", _cocos2d_Scene_onProjectionChanged);
    oluacls_func(L, "setCameraOrderDirty", _cocos2d_Scene_setCameraOrderDirty);
    oluacls_func(L, "setNavMeshDebugCamera", _cocos2d_Scene_setNavMeshDebugCamera);
    oluacls_func(L, "setPhysics3DDebugCamera", _cocos2d_Scene_setPhysics3DDebugCamera);
    oluacls_func(L, "stepPhysicsAndNavigation", _cocos2d_Scene_stepPhysicsAndNavigation);
    oluacls_prop(L, "cameras", _cocos2d_Scene_getCameras, nullptr);
    oluacls_prop(L, "defaultCamera", _cocos2d_Scene_getDefaultCamera, nullptr);
    oluacls_prop(L, "lights", _cocos2d_Scene_getLights, nullptr);
    oluacls_prop(L, "physicsWorld", _cocos2d_Scene_getPhysicsWorld, nullptr);

    olua_registerluatype<cocos2d::Scene>(L, "cc.Scene");

    return 1;
}

static int _cocos2d_Layer___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Layer *)olua_toobj(L, 1, "cc.Layer");
    olua_push_cppobj(L, self, "cc.Layer");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Layer_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Layer *create()
    cocos2d::Layer *ret = (cocos2d::Layer *)cocos2d::Layer::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Layer");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Layer_new(lua_State *L)
{
    olua_startinvoke(L);

    // Layer()
    cocos2d::Layer *ret = (cocos2d::Layer *)new cocos2d::Layer();
    int num_ret = olua_push_cppobj(L, ret, "cc.Layer");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Layer_onAcceleration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Acceleration *arg1 = nullptr;       /** acc */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Acceleration");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onAcceleration(cocos2d::Acceleration *acc, cocos2d::Event *unused_event)
    self->onAcceleration(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Layer_onKeyPressed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    lua_Unsigned arg1 = 0;       /** keyCode */
    cocos2d::Event *arg2 = nullptr;       /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_uint(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onKeyPressed(EventKeyboard::KeyCode keyCode, cocos2d::Event *event)
    self->onKeyPressed((cocos2d::EventKeyboard::KeyCode)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Layer_onKeyReleased(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    lua_Unsigned arg1 = 0;       /** keyCode */
    cocos2d::Event *arg2 = nullptr;       /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_uint(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onKeyReleased(EventKeyboard::KeyCode keyCode, cocos2d::Event *event)
    self->onKeyReleased((cocos2d::EventKeyboard::KeyCode)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Layer_onTouchBegan(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Touch");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // bool onTouchBegan(cocos2d::Touch *touch, cocos2d::Event *unused_event)
    bool ret = (bool)self->onTouchBegan(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Layer_onTouchCancelled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Touch");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onTouchCancelled(cocos2d::Touch *touch, cocos2d::Event *unused_event)
    self->onTouchCancelled(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Layer_onTouchEnded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Touch");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onTouchEnded(cocos2d::Touch *touch, cocos2d::Event *unused_event)
    self->onTouchEnded(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Layer_onTouchMoved(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Touch");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onTouchMoved(cocos2d::Touch *touch, cocos2d::Event *unused_event)
    self->onTouchMoved(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Layer_onTouchesBegan(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_std_vector(L, 2, arg1, "cc.Touch");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onTouchesBegan(const std::vector<Touch *> &touches, cocos2d::Event *unused_event)
    self->onTouchesBegan(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Layer_onTouchesCancelled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_std_vector(L, 2, arg1, "cc.Touch");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onTouchesCancelled(const std::vector<Touch *> &touches, cocos2d::Event *unused_event)
    self->onTouchesCancelled(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Layer_onTouchesEnded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_std_vector(L, 2, arg1, "cc.Touch");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onTouchesEnded(const std::vector<Touch *> &touches, cocos2d::Event *unused_event)
    self->onTouchesEnded(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Layer_onTouchesMoved(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Layer");
    olua_check_std_vector(L, 2, arg1, "cc.Touch");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Event");

    // void onTouchesMoved(const std::vector<Touch *> &touches, cocos2d::Event *unused_event)
    self->onTouchesMoved(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Layer(lua_State *L)
{
    oluacls_class(L, "cc.Layer", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_Layer___move);
    oluacls_func(L, "create", _cocos2d_Layer_create);
    oluacls_func(L, "new", _cocos2d_Layer_new);
    oluacls_func(L, "onAcceleration", _cocos2d_Layer_onAcceleration);
    oluacls_func(L, "onKeyPressed", _cocos2d_Layer_onKeyPressed);
    oluacls_func(L, "onKeyReleased", _cocos2d_Layer_onKeyReleased);
    oluacls_func(L, "onTouchBegan", _cocos2d_Layer_onTouchBegan);
    oluacls_func(L, "onTouchCancelled", _cocos2d_Layer_onTouchCancelled);
    oluacls_func(L, "onTouchEnded", _cocos2d_Layer_onTouchEnded);
    oluacls_func(L, "onTouchMoved", _cocos2d_Layer_onTouchMoved);
    oluacls_func(L, "onTouchesBegan", _cocos2d_Layer_onTouchesBegan);
    oluacls_func(L, "onTouchesCancelled", _cocos2d_Layer_onTouchesCancelled);
    oluacls_func(L, "onTouchesEnded", _cocos2d_Layer_onTouchesEnded);
    oluacls_func(L, "onTouchesMoved", _cocos2d_Layer_onTouchesMoved);

    olua_registerluatype<cocos2d::Layer>(L, "cc.Layer");

    return 1;
}

static int _cocos2d_LayerColor___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::LayerColor *)olua_toobj(L, 1, "cc.LayerColor");
    olua_push_cppobj(L, self, "cc.LayerColor");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_LayerColor_changeHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    lua_Number arg1 = 0;       /** h */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    olua_check_number(L, 2, &arg1);

    // void changeHeight(GLfloat h)
    self->changeHeight((GLfloat)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerColor_changeWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    lua_Number arg1 = 0;       /** w */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    olua_check_number(L, 2, &arg1);

    // void changeWidth(GLfloat w)
    self->changeWidth((GLfloat)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerColor_changeWidthAndHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    lua_Number arg1 = 0;       /** w */
    lua_Number arg2 = 0;       /** h */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void changeWidthAndHeight(GLfloat w, GLfloat h)
    self->changeWidthAndHeight((GLfloat)arg1, (GLfloat)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerColor_create1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LayerColor *create()
    cocos2d::LayerColor *ret = (cocos2d::LayerColor *)cocos2d::LayerColor::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerColor");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerColor_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** color */
    lua_Number arg2 = 0;       /** width */
    lua_Number arg3 = 0;       /** height */

    manual_olua_check_cocos2d_Color4B(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::LayerColor *create(const cocos2d::Color4B &color, GLfloat width, GLfloat height)
    cocos2d::LayerColor *ret = (cocos2d::LayerColor *)cocos2d::LayerColor::create(arg1, (GLfloat)arg2, (GLfloat)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerColor");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerColor_create3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** color */

    manual_olua_check_cocos2d_Color4B(L, 1, &arg1);

    // static cocos2d::LayerColor *create(const cocos2d::Color4B &color)
    cocos2d::LayerColor *ret = (cocos2d::LayerColor *)cocos2d::LayerColor::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerColor");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerColor_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::LayerColor *create()
        return _cocos2d_LayerColor_create1(L);
    }

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 1))) {
            // static cocos2d::LayerColor *create(const cocos2d::Color4B &color)
            return _cocos2d_LayerColor_create3(L);
        // }
    }

    if (num_args == 3) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::LayerColor *create(const cocos2d::Color4B &color, GLfloat width, GLfloat height)
            return _cocos2d_LayerColor_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerColor::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerColor_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_olua_push_cocos2d_BlendFunc(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerColor_initWithColor1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    cocos2d::Color4B arg1;       /** color */
    lua_Number arg2 = 0;       /** width */
    lua_Number arg3 = 0;       /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool initWithColor(const cocos2d::Color4B &color, GLfloat width, GLfloat height)
    bool ret = (bool)self->initWithColor(arg1, (GLfloat)arg2, (GLfloat)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerColor_initWithColor2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);

    // bool initWithColor(const cocos2d::Color4B &color)
    bool ret = (bool)self->initWithColor(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerColor_initWithColor(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 2))) {
            // bool initWithColor(const cocos2d::Color4B &color)
            return _cocos2d_LayerColor_initWithColor2(L);
        // }
    }

    if (num_args == 3) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4))) {
            // bool initWithColor(const cocos2d::Color4B &color, GLfloat width, GLfloat height)
            return _cocos2d_LayerColor_initWithColor1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerColor::initWithColor' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerColor_new(lua_State *L)
{
    olua_startinvoke(L);

    // LayerColor()
    cocos2d::LayerColor *ret = (cocos2d::LayerColor *)new cocos2d::LayerColor();
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerColor");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerColor_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    auto_olua_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_LayerColor(lua_State *L)
{
    oluacls_class(L, "cc.LayerColor", "cc.Layer");
    oluacls_func(L, "__move", _cocos2d_LayerColor___move);
    oluacls_func(L, "changeHeight", _cocos2d_LayerColor_changeHeight);
    oluacls_func(L, "changeWidth", _cocos2d_LayerColor_changeWidth);
    oluacls_func(L, "changeWidthAndHeight", _cocos2d_LayerColor_changeWidthAndHeight);
    oluacls_func(L, "create", _cocos2d_LayerColor_create);
    oluacls_func(L, "getBlendFunc", _cocos2d_LayerColor_getBlendFunc);
    oluacls_func(L, "initWithColor", _cocos2d_LayerColor_initWithColor);
    oluacls_func(L, "new", _cocos2d_LayerColor_new);
    oluacls_func(L, "setBlendFunc", _cocos2d_LayerColor_setBlendFunc);
    oluacls_prop(L, "blendFunc", _cocos2d_LayerColor_getBlendFunc, _cocos2d_LayerColor_setBlendFunc);

    olua_registerluatype<cocos2d::LayerColor>(L, "cc.LayerColor");

    return 1;
}

static int _cocos2d_LayerGradient___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::LayerGradient *)olua_toobj(L, 1, "cc.LayerGradient");
    olua_push_cppobj(L, self, "cc.LayerGradient");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_LayerGradient_create1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LayerGradient *create()
    cocos2d::LayerGradient *ret = (cocos2d::LayerGradient *)cocos2d::LayerGradient::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end */

    manual_olua_check_cocos2d_Color4B(L, 1, &arg1);
    manual_olua_check_cocos2d_Color4B(L, 2, &arg2);

    // static cocos2d::LayerGradient *create(const cocos2d::Color4B &start, const cocos2d::Color4B &end)
    cocos2d::LayerGradient *ret = (cocos2d::LayerGradient *)cocos2d::LayerGradient::create(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_create3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end */
    cocos2d::Vec2 arg3;       /** v */

    manual_olua_check_cocos2d_Color4B(L, 1, &arg1);
    manual_olua_check_cocos2d_Color4B(L, 2, &arg2);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg3);

    // static cocos2d::LayerGradient *create(const cocos2d::Color4B &start, const cocos2d::Color4B &end, const cocos2d::Vec2 &v)
    cocos2d::LayerGradient *ret = (cocos2d::LayerGradient *)cocos2d::LayerGradient::create(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::LayerGradient *create()
        return _cocos2d_LayerGradient_create1(L);
    }

    if (num_args == 2) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 1)) && (manual_olua_is_cocos2d_Color4B(L, 2))) {
            // static cocos2d::LayerGradient *create(const cocos2d::Color4B &start, const cocos2d::Color4B &end)
            return _cocos2d_LayerGradient_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 1)) && (manual_olua_is_cocos2d_Color4B(L, 2)) && (auto_olua_is_cocos2d_Vec2(L, 3))) {
            // static cocos2d::LayerGradient *create(const cocos2d::Color4B &start, const cocos2d::Color4B &end, const cocos2d::Vec2 &v)
            return _cocos2d_LayerGradient_create3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerGradient::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerGradient_getEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // const cocos2d::Color3B &getEndColor()
    const cocos2d::Color3B &ret = (const cocos2d::Color3B &)self->getEndColor();
    int num_ret = manual_olua_push_cocos2d_Color3B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_getEndOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // GLubyte getEndOpacity()
    GLubyte ret = (GLubyte)self->getEndOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_getStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // const cocos2d::Color3B &getStartColor()
    const cocos2d::Color3B &ret = (const cocos2d::Color3B &)self->getStartColor();
    int num_ret = manual_olua_push_cocos2d_Color3B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_getStartOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // GLubyte getStartOpacity()
    GLubyte ret = (GLubyte)self->getStartOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_getVector(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // const cocos2d::Vec2 &getVector()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getVector();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_initWithColor1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);
    manual_olua_check_cocos2d_Color4B(L, 3, &arg2);

    // bool initWithColor(const cocos2d::Color4B &start, const cocos2d::Color4B &end)
    bool ret = (bool)self->initWithColor(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_initWithColor2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end */
    cocos2d::Vec2 arg3;       /** v */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);
    manual_olua_check_cocos2d_Color4B(L, 3, &arg2);
    auto_olua_check_cocos2d_Vec2(L, 4, &arg3);

    // bool initWithColor(const cocos2d::Color4B &start, const cocos2d::Color4B &end, const cocos2d::Vec2 &v)
    bool ret = (bool)self->initWithColor(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_initWithColor(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 2)) && (manual_olua_is_cocos2d_Color4B(L, 3))) {
            // bool initWithColor(const cocos2d::Color4B &start, const cocos2d::Color4B &end)
            return _cocos2d_LayerGradient_initWithColor1(L);
        // }
    }

    if (num_args == 3) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 2)) && (manual_olua_is_cocos2d_Color4B(L, 3)) && (auto_olua_is_cocos2d_Vec2(L, 4))) {
            // bool initWithColor(const cocos2d::Color4B &start, const cocos2d::Color4B &end, const cocos2d::Vec2 &v)
            return _cocos2d_LayerGradient_initWithColor2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerGradient::initWithColor' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerGradient_isCompressedInterpolation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // bool isCompressedInterpolation()
    bool ret = (bool)self->isCompressedInterpolation();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_new(lua_State *L)
{
    olua_startinvoke(L);

    // LayerGradient()
    cocos2d::LayerGradient *ret = (cocos2d::LayerGradient *)new cocos2d::LayerGradient();
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerGradient");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerGradient_setCompressedInterpolation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    bool arg1 = false;       /** compressedInterpolation */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    olua_check_bool(L, 2, &arg1);

    // void setCompressedInterpolation(bool compressedInterpolation)
    self->setCompressedInterpolation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerGradient_setEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** endColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    manual_olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setEndColor(const cocos2d::Color3B &endColor)
    self->setEndColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerGradient_setEndOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    lua_Unsigned arg1 = 0;       /** endOpacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    olua_check_uint(L, 2, &arg1);

    // void setEndOpacity(GLubyte endOpacity)
    self->setEndOpacity((GLubyte)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerGradient_setStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** startColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    manual_olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setStartColor(const cocos2d::Color3B &startColor)
    self->setStartColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerGradient_setStartOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    lua_Unsigned arg1 = 0;       /** startOpacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    olua_check_uint(L, 2, &arg1);

    // void setStartOpacity(GLubyte startOpacity)
    self->setStartOpacity((GLubyte)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerGradient_setVector(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Vec2 arg1;       /** alongVector */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setVector(const cocos2d::Vec2 &alongVector)
    self->setVector(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_LayerGradient(lua_State *L)
{
    oluacls_class(L, "cc.LayerGradient", "cc.LayerColor");
    oluacls_func(L, "__move", _cocos2d_LayerGradient___move);
    oluacls_func(L, "create", _cocos2d_LayerGradient_create);
    oluacls_func(L, "getEndColor", _cocos2d_LayerGradient_getEndColor);
    oluacls_func(L, "getEndOpacity", _cocos2d_LayerGradient_getEndOpacity);
    oluacls_func(L, "getStartColor", _cocos2d_LayerGradient_getStartColor);
    oluacls_func(L, "getStartOpacity", _cocos2d_LayerGradient_getStartOpacity);
    oluacls_func(L, "getVector", _cocos2d_LayerGradient_getVector);
    oluacls_func(L, "initWithColor", _cocos2d_LayerGradient_initWithColor);
    oluacls_func(L, "isCompressedInterpolation", _cocos2d_LayerGradient_isCompressedInterpolation);
    oluacls_func(L, "new", _cocos2d_LayerGradient_new);
    oluacls_func(L, "setCompressedInterpolation", _cocos2d_LayerGradient_setCompressedInterpolation);
    oluacls_func(L, "setEndColor", _cocos2d_LayerGradient_setEndColor);
    oluacls_func(L, "setEndOpacity", _cocos2d_LayerGradient_setEndOpacity);
    oluacls_func(L, "setStartColor", _cocos2d_LayerGradient_setStartColor);
    oluacls_func(L, "setStartOpacity", _cocos2d_LayerGradient_setStartOpacity);
    oluacls_func(L, "setVector", _cocos2d_LayerGradient_setVector);
    oluacls_prop(L, "compressedInterpolation", _cocos2d_LayerGradient_isCompressedInterpolation, _cocos2d_LayerGradient_setCompressedInterpolation);
    oluacls_prop(L, "endColor", _cocos2d_LayerGradient_getEndColor, _cocos2d_LayerGradient_setEndColor);
    oluacls_prop(L, "endOpacity", _cocos2d_LayerGradient_getEndOpacity, _cocos2d_LayerGradient_setEndOpacity);
    oluacls_prop(L, "startColor", _cocos2d_LayerGradient_getStartColor, _cocos2d_LayerGradient_setStartColor);
    oluacls_prop(L, "startOpacity", _cocos2d_LayerGradient_getStartOpacity, _cocos2d_LayerGradient_setStartOpacity);
    oluacls_prop(L, "vector", _cocos2d_LayerGradient_getVector, _cocos2d_LayerGradient_setVector);

    olua_registerluatype<cocos2d::LayerGradient>(L, "cc.LayerGradient");

    return 1;
}

static int _cocos2d_LayerRadialGradient___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::LayerRadialGradient *)olua_toobj(L, 1, "cc.LayerRadialGradient");
    olua_push_cppobj(L, self, "cc.LayerRadialGradient");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_LayerRadialGradient_create1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** startColor */
    cocos2d::Color4B arg2;       /** endColor */
    lua_Number arg3 = 0;       /** radius */
    cocos2d::Vec2 arg4;       /** center */
    lua_Number arg5 = 0;       /** expand */

    manual_olua_check_cocos2d_Color4B(L, 1, &arg1);
    manual_olua_check_cocos2d_Color4B(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_olua_check_cocos2d_Vec2(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);

    // static cocos2d::LayerRadialGradient *create(const cocos2d::Color4B &startColor, const cocos2d::Color4B &endColor, float radius, const cocos2d::Vec2 &center, float expand)
    cocos2d::LayerRadialGradient *ret = (cocos2d::LayerRadialGradient *)cocos2d::LayerRadialGradient::create(arg1, arg2, (float)arg3, arg4, (float)arg5);
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerRadialGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_create2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LayerRadialGradient *create()
    cocos2d::LayerRadialGradient *ret = (cocos2d::LayerRadialGradient *)cocos2d::LayerRadialGradient::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerRadialGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::LayerRadialGradient *create()
        return _cocos2d_LayerRadialGradient_create2(L);
    }

    if (num_args == 5) {
        // if ((manual_olua_is_cocos2d_Color4B(L, 1)) && (manual_olua_is_cocos2d_Color4B(L, 2)) && (olua_is_number(L, 3)) && (auto_olua_is_cocos2d_Vec2(L, 4)) && (olua_is_number(L, 5))) {
            // static cocos2d::LayerRadialGradient *create(const cocos2d::Color4B &startColor, const cocos2d::Color4B &endColor, float radius, const cocos2d::Vec2 &center, float expand)
            return _cocos2d_LayerRadialGradient_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerRadialGradient::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerRadialGradient_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // cocos2d::BlendFunc getBlendFunc()
    cocos2d::BlendFunc ret = (cocos2d::BlendFunc)self->getBlendFunc();
    int num_ret = auto_olua_push_cocos2d_BlendFunc(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_getCenter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // cocos2d::Vec2 getCenter()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getCenter();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_getEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // cocos2d::Color4B getEndColor()
    cocos2d::Color4B ret = (cocos2d::Color4B)self->getEndColor();
    int num_ret = manual_olua_push_cocos2d_Color4B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_getEndColor3B(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // cocos2d::Color3B getEndColor3B()
    cocos2d::Color3B ret = (cocos2d::Color3B)self->getEndColor3B();
    int num_ret = manual_olua_push_cocos2d_Color3B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_getEndOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // GLubyte getEndOpacity()
    GLubyte ret = (GLubyte)self->getEndOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_getExpand(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // float getExpand()
    float ret = (float)self->getExpand();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_getRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // float getRadius()
    float ret = (float)self->getRadius();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_getStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // cocos2d::Color4B getStartColor()
    cocos2d::Color4B ret = (cocos2d::Color4B)self->getStartColor();
    int num_ret = manual_olua_push_cocos2d_Color4B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_getStartColor3B(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // cocos2d::Color3B getStartColor3B()
    cocos2d::Color3B ret = (cocos2d::Color3B)self->getStartColor3B();
    int num_ret = manual_olua_push_cocos2d_Color3B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_getStartOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // GLubyte getStartOpacity()
    GLubyte ret = (GLubyte)self->getStartOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_initWithColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** startColor */
    cocos2d::Color4B arg2;       /** endColor */
    lua_Number arg3 = 0;       /** radius */
    cocos2d::Vec2 arg4;       /** center */
    lua_Number arg5 = 0;       /** expand */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);
    manual_olua_check_cocos2d_Color4B(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    auto_olua_check_cocos2d_Vec2(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // bool initWithColor(const cocos2d::Color4B &startColor, const cocos2d::Color4B &endColor, float radius, const cocos2d::Vec2 &center, float expand)
    bool ret = (bool)self->initWithColor(arg1, arg2, (float)arg3, arg4, (float)arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_new(lua_State *L)
{
    olua_startinvoke(L);

    // LayerRadialGradient()
    cocos2d::LayerRadialGradient *ret = (cocos2d::LayerRadialGradient *)new cocos2d::LayerRadialGradient();
    int num_ret = olua_push_cppobj(L, ret, "cc.LayerRadialGradient");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    auto_olua_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setCenter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Vec2 arg1;       /** center */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setCenter(const cocos2d::Vec2 &center)
    self->setCenter(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setEndColor1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    manual_olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setEndColor(const cocos2d::Color3B &color)
    self->setEndColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setEndColor2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void setEndColor(const cocos2d::Color4B &color)
    self->setEndColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setEndColor(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if ((manual_olua_is_cocos2d_Color3B(L, 2))) {
            // void setEndColor(const cocos2d::Color3B &color)
            return _cocos2d_LayerRadialGradient_setEndColor1(L);
        }

        // if ((manual_olua_is_cocos2d_Color4B(L, 2))) {
            // void setEndColor(const cocos2d::Color4B &color)
            return _cocos2d_LayerRadialGradient_setEndColor2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerRadialGradient::setEndColor' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setEndOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    lua_Unsigned arg1 = 0;       /** opacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    olua_check_uint(L, 2, &arg1);

    // void setEndOpacity(GLubyte opacity)
    self->setEndOpacity((GLubyte)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setExpand(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    lua_Number arg1 = 0;       /** expand */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    olua_check_number(L, 2, &arg1);

    // void setExpand(float expand)
    self->setExpand((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    lua_Number arg1 = 0;       /** radius */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    olua_check_number(L, 2, &arg1);

    // void setRadius(float radius)
    self->setRadius((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setStartColor1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    manual_olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setStartColor(const cocos2d::Color3B &color)
    self->setStartColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setStartColor2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void setStartColor(const cocos2d::Color4B &color)
    self->setStartColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setStartColor(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if ((manual_olua_is_cocos2d_Color3B(L, 2))) {
            // void setStartColor(const cocos2d::Color3B &color)
            return _cocos2d_LayerRadialGradient_setStartColor1(L);
        }

        // if ((manual_olua_is_cocos2d_Color4B(L, 2))) {
            // void setStartColor(const cocos2d::Color4B &color)
            return _cocos2d_LayerRadialGradient_setStartColor2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerRadialGradient::setStartColor' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setStartOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    lua_Unsigned arg1 = 0;       /** opacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    olua_check_uint(L, 2, &arg1);

    // void setStartOpacity(GLubyte opacity)
    self->setStartOpacity((GLubyte)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_LayerRadialGradient(lua_State *L)
{
    oluacls_class(L, "cc.LayerRadialGradient", "cc.Layer");
    oluacls_func(L, "__move", _cocos2d_LayerRadialGradient___move);
    oluacls_func(L, "create", _cocos2d_LayerRadialGradient_create);
    oluacls_func(L, "getBlendFunc", _cocos2d_LayerRadialGradient_getBlendFunc);
    oluacls_func(L, "getCenter", _cocos2d_LayerRadialGradient_getCenter);
    oluacls_func(L, "getEndColor", _cocos2d_LayerRadialGradient_getEndColor);
    oluacls_func(L, "getEndColor3B", _cocos2d_LayerRadialGradient_getEndColor3B);
    oluacls_func(L, "getEndOpacity", _cocos2d_LayerRadialGradient_getEndOpacity);
    oluacls_func(L, "getExpand", _cocos2d_LayerRadialGradient_getExpand);
    oluacls_func(L, "getRadius", _cocos2d_LayerRadialGradient_getRadius);
    oluacls_func(L, "getStartColor", _cocos2d_LayerRadialGradient_getStartColor);
    oluacls_func(L, "getStartColor3B", _cocos2d_LayerRadialGradient_getStartColor3B);
    oluacls_func(L, "getStartOpacity", _cocos2d_LayerRadialGradient_getStartOpacity);
    oluacls_func(L, "initWithColor", _cocos2d_LayerRadialGradient_initWithColor);
    oluacls_func(L, "new", _cocos2d_LayerRadialGradient_new);
    oluacls_func(L, "setBlendFunc", _cocos2d_LayerRadialGradient_setBlendFunc);
    oluacls_func(L, "setCenter", _cocos2d_LayerRadialGradient_setCenter);
    oluacls_func(L, "setEndColor", _cocos2d_LayerRadialGradient_setEndColor);
    oluacls_func(L, "setEndOpacity", _cocos2d_LayerRadialGradient_setEndOpacity);
    oluacls_func(L, "setExpand", _cocos2d_LayerRadialGradient_setExpand);
    oluacls_func(L, "setRadius", _cocos2d_LayerRadialGradient_setRadius);
    oluacls_func(L, "setStartColor", _cocos2d_LayerRadialGradient_setStartColor);
    oluacls_func(L, "setStartOpacity", _cocos2d_LayerRadialGradient_setStartOpacity);
    oluacls_prop(L, "blendFunc", _cocos2d_LayerRadialGradient_getBlendFunc, _cocos2d_LayerRadialGradient_setBlendFunc);
    oluacls_prop(L, "center", _cocos2d_LayerRadialGradient_getCenter, _cocos2d_LayerRadialGradient_setCenter);
    oluacls_prop(L, "endColor", _cocos2d_LayerRadialGradient_getEndColor, _cocos2d_LayerRadialGradient_setEndColor);
    oluacls_prop(L, "endColor3B", _cocos2d_LayerRadialGradient_getEndColor3B, nullptr);
    oluacls_prop(L, "endOpacity", _cocos2d_LayerRadialGradient_getEndOpacity, _cocos2d_LayerRadialGradient_setEndOpacity);
    oluacls_prop(L, "expand", _cocos2d_LayerRadialGradient_getExpand, _cocos2d_LayerRadialGradient_setExpand);
    oluacls_prop(L, "radius", _cocos2d_LayerRadialGradient_getRadius, _cocos2d_LayerRadialGradient_setRadius);
    oluacls_prop(L, "startColor", _cocos2d_LayerRadialGradient_getStartColor, _cocos2d_LayerRadialGradient_setStartColor);
    oluacls_prop(L, "startColor3B", _cocos2d_LayerRadialGradient_getStartColor3B, nullptr);
    oluacls_prop(L, "startOpacity", _cocos2d_LayerRadialGradient_getStartOpacity, _cocos2d_LayerRadialGradient_setStartOpacity);

    olua_registerluatype<cocos2d::LayerRadialGradient>(L, "cc.LayerRadialGradient");

    return 1;
}

static int luaopen_cocos2d_TransitionScene_Orientation(lua_State *L)
{
    oluacls_class(L, "cc.TransitionScene.Orientation", nullptr);
    oluacls_const_integer(L, "DOWN_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::DOWN_OVER);
    oluacls_const_integer(L, "LEFT_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::LEFT_OVER);
    oluacls_const_integer(L, "RIGHT_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::RIGHT_OVER);
    oluacls_const_integer(L, "UP_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::UP_OVER);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_TransitionScene___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionScene *)olua_toobj(L, 1, "cc.TransitionScene");
    olua_push_cppobj(L, self, "cc.TransitionScene");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionScene_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionScene *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionScene *ret = (cocos2d::TransitionScene *)cocos2d::TransitionScene::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionScene");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionScene_finish(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionScene");

    // void finish()
    self->finish();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TransitionScene_getDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionScene");

    // float getDuration()
    float ret = (float)self->getDuration();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionScene_getInScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionScene");

    // cocos2d::Scene *getInScene()
    cocos2d::Scene *ret = (cocos2d::Scene *)self->getInScene();
    int num_ret = olua_push_cppobj(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionScene_hideOutShowIn(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionScene");

    // void hideOutShowIn()
    self->hideOutShowIn();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TransitionScene_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionScene()
    cocos2d::TransitionScene *ret = (cocos2d::TransitionScene *)new cocos2d::TransitionScene();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionScene");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionScene(lua_State *L)
{
    oluacls_class(L, "cc.TransitionScene", "cc.Scene");
    oluacls_func(L, "__move", _cocos2d_TransitionScene___move);
    oluacls_func(L, "create", _cocos2d_TransitionScene_create);
    oluacls_func(L, "finish", _cocos2d_TransitionScene_finish);
    oluacls_func(L, "getDuration", _cocos2d_TransitionScene_getDuration);
    oluacls_func(L, "getInScene", _cocos2d_TransitionScene_getInScene);
    oluacls_func(L, "hideOutShowIn", _cocos2d_TransitionScene_hideOutShowIn);
    oluacls_func(L, "new", _cocos2d_TransitionScene_new);
    oluacls_prop(L, "duration", _cocos2d_TransitionScene_getDuration, nullptr);
    oluacls_prop(L, "inScene", _cocos2d_TransitionScene_getInScene, nullptr);

    olua_registerluatype<cocos2d::TransitionScene>(L, "cc.TransitionScene");

    return 1;
}

static int _cocos2d_TransitionSceneOriented___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionSceneOriented *)olua_toobj(L, 1, "cc.TransitionSceneOriented");
    olua_push_cppobj(L, self, "cc.TransitionSceneOriented");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionSceneOriented_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */
    lua_Unsigned arg3 = 0;       /** orientation */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::TransitionSceneOriented *create(float t, @ref(map autoref) cocos2d::Scene *scene, cocos2d::TransitionScene::Orientation orientation)
    cocos2d::TransitionSceneOriented *ret = (cocos2d::TransitionSceneOriented *)cocos2d::TransitionSceneOriented::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSceneOriented");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSceneOriented_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionSceneOriented()
    cocos2d::TransitionSceneOriented *ret = (cocos2d::TransitionSceneOriented *)new cocos2d::TransitionSceneOriented();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSceneOriented");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSceneOriented(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSceneOriented", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionSceneOriented___move);
    oluacls_func(L, "create", _cocos2d_TransitionSceneOriented_create);
    oluacls_func(L, "new", _cocos2d_TransitionSceneOriented_new);

    olua_registerluatype<cocos2d::TransitionSceneOriented>(L, "cc.TransitionSceneOriented");

    return 1;
}

static int _cocos2d_TransitionRotoZoom___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionRotoZoom *)olua_toobj(L, 1, "cc.TransitionRotoZoom");
    olua_push_cppobj(L, self, "cc.TransitionRotoZoom");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionRotoZoom_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionRotoZoom *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionRotoZoom *ret = (cocos2d::TransitionRotoZoom *)cocos2d::TransitionRotoZoom::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionRotoZoom");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionRotoZoom_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionRotoZoom()
    cocos2d::TransitionRotoZoom *ret = (cocos2d::TransitionRotoZoom *)new cocos2d::TransitionRotoZoom();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionRotoZoom");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionRotoZoom(lua_State *L)
{
    oluacls_class(L, "cc.TransitionRotoZoom", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionRotoZoom___move);
    oluacls_func(L, "create", _cocos2d_TransitionRotoZoom_create);
    oluacls_func(L, "new", _cocos2d_TransitionRotoZoom_new);

    olua_registerluatype<cocos2d::TransitionRotoZoom>(L, "cc.TransitionRotoZoom");

    return 1;
}

static int _cocos2d_TransitionJumpZoom___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionJumpZoom *)olua_toobj(L, 1, "cc.TransitionJumpZoom");
    olua_push_cppobj(L, self, "cc.TransitionJumpZoom");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionJumpZoom_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionJumpZoom *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionJumpZoom *ret = (cocos2d::TransitionJumpZoom *)cocos2d::TransitionJumpZoom::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionJumpZoom");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionJumpZoom_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionJumpZoom()
    cocos2d::TransitionJumpZoom *ret = (cocos2d::TransitionJumpZoom *)new cocos2d::TransitionJumpZoom();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionJumpZoom");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionJumpZoom(lua_State *L)
{
    oluacls_class(L, "cc.TransitionJumpZoom", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionJumpZoom___move);
    oluacls_func(L, "create", _cocos2d_TransitionJumpZoom_create);
    oluacls_func(L, "new", _cocos2d_TransitionJumpZoom_new);

    olua_registerluatype<cocos2d::TransitionJumpZoom>(L, "cc.TransitionJumpZoom");

    return 1;
}

static int _cocos2d_TransitionMoveInL___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionMoveInL *)olua_toobj(L, 1, "cc.TransitionMoveInL");
    olua_push_cppobj(L, self, "cc.TransitionMoveInL");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionMoveInL_action(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionMoveInL *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionMoveInL");

    // cocos2d::ActionInterval *action()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->action();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionMoveInL_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionMoveInL *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionMoveInL *ret = (cocos2d::TransitionMoveInL *)cocos2d::TransitionMoveInL::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionMoveInL");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionMoveInL_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionMoveInL *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionMoveInL");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@ref(single action) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    // inject code after call
    olua_singleref(L, 1, "action", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionMoveInL_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionMoveInL()
    cocos2d::TransitionMoveInL *ret = (cocos2d::TransitionMoveInL *)new cocos2d::TransitionMoveInL();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionMoveInL");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionMoveInL(lua_State *L)
{
    oluacls_class(L, "cc.TransitionMoveInL", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionMoveInL___move);
    oluacls_func(L, "action", _cocos2d_TransitionMoveInL_action);
    oluacls_func(L, "create", _cocos2d_TransitionMoveInL_create);
    oluacls_func(L, "easeActionWithAction", _cocos2d_TransitionMoveInL_easeActionWithAction);
    oluacls_func(L, "new", _cocos2d_TransitionMoveInL_new);

    olua_registerluatype<cocos2d::TransitionMoveInL>(L, "cc.TransitionMoveInL");

    return 1;
}

static int _cocos2d_TransitionMoveInR___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionMoveInR *)olua_toobj(L, 1, "cc.TransitionMoveInR");
    olua_push_cppobj(L, self, "cc.TransitionMoveInR");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionMoveInR_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionMoveInR *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionMoveInR *ret = (cocos2d::TransitionMoveInR *)cocos2d::TransitionMoveInR::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionMoveInR");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionMoveInR_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionMoveInR()
    cocos2d::TransitionMoveInR *ret = (cocos2d::TransitionMoveInR *)new cocos2d::TransitionMoveInR();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionMoveInR");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionMoveInR(lua_State *L)
{
    oluacls_class(L, "cc.TransitionMoveInR", "cc.TransitionMoveInL");
    oluacls_func(L, "__move", _cocos2d_TransitionMoveInR___move);
    oluacls_func(L, "create", _cocos2d_TransitionMoveInR_create);
    oluacls_func(L, "new", _cocos2d_TransitionMoveInR_new);

    olua_registerluatype<cocos2d::TransitionMoveInR>(L, "cc.TransitionMoveInR");

    return 1;
}

static int _cocos2d_TransitionMoveInT___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionMoveInT *)olua_toobj(L, 1, "cc.TransitionMoveInT");
    olua_push_cppobj(L, self, "cc.TransitionMoveInT");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionMoveInT_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionMoveInT *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionMoveInT *ret = (cocos2d::TransitionMoveInT *)cocos2d::TransitionMoveInT::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionMoveInT");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionMoveInT_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionMoveInT()
    cocos2d::TransitionMoveInT *ret = (cocos2d::TransitionMoveInT *)new cocos2d::TransitionMoveInT();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionMoveInT");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionMoveInT(lua_State *L)
{
    oluacls_class(L, "cc.TransitionMoveInT", "cc.TransitionMoveInL");
    oluacls_func(L, "__move", _cocos2d_TransitionMoveInT___move);
    oluacls_func(L, "create", _cocos2d_TransitionMoveInT_create);
    oluacls_func(L, "new", _cocos2d_TransitionMoveInT_new);

    olua_registerluatype<cocos2d::TransitionMoveInT>(L, "cc.TransitionMoveInT");

    return 1;
}

static int _cocos2d_TransitionMoveInB___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionMoveInB *)olua_toobj(L, 1, "cc.TransitionMoveInB");
    olua_push_cppobj(L, self, "cc.TransitionMoveInB");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionMoveInB_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionMoveInB *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionMoveInB *ret = (cocos2d::TransitionMoveInB *)cocos2d::TransitionMoveInB::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionMoveInB");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionMoveInB_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionMoveInB()
    cocos2d::TransitionMoveInB *ret = (cocos2d::TransitionMoveInB *)new cocos2d::TransitionMoveInB();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionMoveInB");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionMoveInB(lua_State *L)
{
    oluacls_class(L, "cc.TransitionMoveInB", "cc.TransitionMoveInL");
    oluacls_func(L, "__move", _cocos2d_TransitionMoveInB___move);
    oluacls_func(L, "create", _cocos2d_TransitionMoveInB_create);
    oluacls_func(L, "new", _cocos2d_TransitionMoveInB_new);

    olua_registerluatype<cocos2d::TransitionMoveInB>(L, "cc.TransitionMoveInB");

    return 1;
}

static int _cocos2d_TransitionSlideInL___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionSlideInL *)olua_toobj(L, 1, "cc.TransitionSlideInL");
    olua_push_cppobj(L, self, "cc.TransitionSlideInL");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionSlideInL_action(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSlideInL *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionSlideInL");

    // cocos2d::ActionInterval *action()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->action();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSlideInL_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionSlideInL *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionSlideInL *ret = (cocos2d::TransitionSlideInL *)cocos2d::TransitionSlideInL::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSlideInL");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSlideInL_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSlideInL *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionSlideInL");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@ref(single action) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    // inject code after call
    olua_singleref(L, 1, "action", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSlideInL_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionSlideInL()
    cocos2d::TransitionSlideInL *ret = (cocos2d::TransitionSlideInL *)new cocos2d::TransitionSlideInL();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSlideInL");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSlideInL(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSlideInL", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionSlideInL___move);
    oluacls_func(L, "action", _cocos2d_TransitionSlideInL_action);
    oluacls_func(L, "create", _cocos2d_TransitionSlideInL_create);
    oluacls_func(L, "easeActionWithAction", _cocos2d_TransitionSlideInL_easeActionWithAction);
    oluacls_func(L, "new", _cocos2d_TransitionSlideInL_new);

    olua_registerluatype<cocos2d::TransitionSlideInL>(L, "cc.TransitionSlideInL");

    return 1;
}

static int _cocos2d_TransitionSlideInR___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionSlideInR *)olua_toobj(L, 1, "cc.TransitionSlideInR");
    olua_push_cppobj(L, self, "cc.TransitionSlideInR");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionSlideInR_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionSlideInR *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionSlideInR *ret = (cocos2d::TransitionSlideInR *)cocos2d::TransitionSlideInR::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSlideInR");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSlideInR_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionSlideInR()
    cocos2d::TransitionSlideInR *ret = (cocos2d::TransitionSlideInR *)new cocos2d::TransitionSlideInR();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSlideInR");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSlideInR(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSlideInR", "cc.TransitionSlideInL");
    oluacls_func(L, "__move", _cocos2d_TransitionSlideInR___move);
    oluacls_func(L, "create", _cocos2d_TransitionSlideInR_create);
    oluacls_func(L, "new", _cocos2d_TransitionSlideInR_new);

    olua_registerluatype<cocos2d::TransitionSlideInR>(L, "cc.TransitionSlideInR");

    return 1;
}

static int _cocos2d_TransitionSlideInB___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionSlideInB *)olua_toobj(L, 1, "cc.TransitionSlideInB");
    olua_push_cppobj(L, self, "cc.TransitionSlideInB");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionSlideInB_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionSlideInB *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionSlideInB *ret = (cocos2d::TransitionSlideInB *)cocos2d::TransitionSlideInB::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSlideInB");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSlideInB_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionSlideInB()
    cocos2d::TransitionSlideInB *ret = (cocos2d::TransitionSlideInB *)new cocos2d::TransitionSlideInB();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSlideInB");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSlideInB(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSlideInB", "cc.TransitionSlideInL");
    oluacls_func(L, "__move", _cocos2d_TransitionSlideInB___move);
    oluacls_func(L, "create", _cocos2d_TransitionSlideInB_create);
    oluacls_func(L, "new", _cocos2d_TransitionSlideInB_new);

    olua_registerluatype<cocos2d::TransitionSlideInB>(L, "cc.TransitionSlideInB");

    return 1;
}

static int _cocos2d_TransitionSlideInT___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionSlideInT *)olua_toobj(L, 1, "cc.TransitionSlideInT");
    olua_push_cppobj(L, self, "cc.TransitionSlideInT");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionSlideInT_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionSlideInT *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionSlideInT *ret = (cocos2d::TransitionSlideInT *)cocos2d::TransitionSlideInT::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSlideInT");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSlideInT_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionSlideInT()
    cocos2d::TransitionSlideInT *ret = (cocos2d::TransitionSlideInT *)new cocos2d::TransitionSlideInT();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSlideInT");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSlideInT(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSlideInT", "cc.TransitionSlideInL");
    oluacls_func(L, "__move", _cocos2d_TransitionSlideInT___move);
    oluacls_func(L, "create", _cocos2d_TransitionSlideInT_create);
    oluacls_func(L, "new", _cocos2d_TransitionSlideInT_new);

    olua_registerluatype<cocos2d::TransitionSlideInT>(L, "cc.TransitionSlideInT");

    return 1;
}

static int _cocos2d_TransitionShrinkGrow___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionShrinkGrow *)olua_toobj(L, 1, "cc.TransitionShrinkGrow");
    olua_push_cppobj(L, self, "cc.TransitionShrinkGrow");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionShrinkGrow_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionShrinkGrow *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionShrinkGrow *ret = (cocos2d::TransitionShrinkGrow *)cocos2d::TransitionShrinkGrow::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionShrinkGrow");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionShrinkGrow_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionShrinkGrow *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionShrinkGrow");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@ref(single action) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    // inject code after call
    olua_singleref(L, 1, "action", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionShrinkGrow_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionShrinkGrow()
    cocos2d::TransitionShrinkGrow *ret = (cocos2d::TransitionShrinkGrow *)new cocos2d::TransitionShrinkGrow();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionShrinkGrow");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionShrinkGrow(lua_State *L)
{
    oluacls_class(L, "cc.TransitionShrinkGrow", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionShrinkGrow___move);
    oluacls_func(L, "create", _cocos2d_TransitionShrinkGrow_create);
    oluacls_func(L, "easeActionWithAction", _cocos2d_TransitionShrinkGrow_easeActionWithAction);
    oluacls_func(L, "new", _cocos2d_TransitionShrinkGrow_new);

    olua_registerluatype<cocos2d::TransitionShrinkGrow>(L, "cc.TransitionShrinkGrow");

    return 1;
}

static int _cocos2d_TransitionFlipX___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionFlipX *)olua_toobj(L, 1, "cc.TransitionFlipX");
    olua_push_cppobj(L, self, "cc.TransitionFlipX");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionFlipX_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    lua_Unsigned arg3 = 0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::TransitionFlipX *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionFlipX *ret = (cocos2d::TransitionFlipX *)cocos2d::TransitionFlipX::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFlipX");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFlipX_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionFlipX *create(float t, @ref(map autoref) cocos2d::Scene *s)
    cocos2d::TransitionFlipX *ret = (cocos2d::TransitionFlipX *)cocos2d::TransitionFlipX::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFlipX");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFlipX_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionFlipX *create(float t, @ref(map autoref) cocos2d::Scene *s)
            return _cocos2d_TransitionFlipX_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene")) && (olua_is_uint(L, 3))) {
            // static cocos2d::TransitionFlipX *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _cocos2d_TransitionFlipX_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFlipX::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TransitionFlipX_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionFlipX()
    cocos2d::TransitionFlipX *ret = (cocos2d::TransitionFlipX *)new cocos2d::TransitionFlipX();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFlipX");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFlipX(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFlipX", "cc.TransitionSceneOriented");
    oluacls_func(L, "__move", _cocos2d_TransitionFlipX___move);
    oluacls_func(L, "create", _cocos2d_TransitionFlipX_create);
    oluacls_func(L, "new", _cocos2d_TransitionFlipX_new);

    olua_registerluatype<cocos2d::TransitionFlipX>(L, "cc.TransitionFlipX");

    return 1;
}

static int _cocos2d_TransitionFlipY___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionFlipY *)olua_toobj(L, 1, "cc.TransitionFlipY");
    olua_push_cppobj(L, self, "cc.TransitionFlipY");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionFlipY_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    lua_Unsigned arg3 = 0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::TransitionFlipY *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionFlipY *ret = (cocos2d::TransitionFlipY *)cocos2d::TransitionFlipY::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFlipY");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFlipY_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionFlipY *create(float t, @ref(map autoref) cocos2d::Scene *s)
    cocos2d::TransitionFlipY *ret = (cocos2d::TransitionFlipY *)cocos2d::TransitionFlipY::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFlipY");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFlipY_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionFlipY *create(float t, @ref(map autoref) cocos2d::Scene *s)
            return _cocos2d_TransitionFlipY_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene")) && (olua_is_uint(L, 3))) {
            // static cocos2d::TransitionFlipY *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _cocos2d_TransitionFlipY_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFlipY::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TransitionFlipY_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionFlipY()
    cocos2d::TransitionFlipY *ret = (cocos2d::TransitionFlipY *)new cocos2d::TransitionFlipY();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFlipY");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFlipY(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFlipY", "cc.TransitionSceneOriented");
    oluacls_func(L, "__move", _cocos2d_TransitionFlipY___move);
    oluacls_func(L, "create", _cocos2d_TransitionFlipY_create);
    oluacls_func(L, "new", _cocos2d_TransitionFlipY_new);

    olua_registerluatype<cocos2d::TransitionFlipY>(L, "cc.TransitionFlipY");

    return 1;
}

static int _cocos2d_TransitionFlipAngular___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionFlipAngular *)olua_toobj(L, 1, "cc.TransitionFlipAngular");
    olua_push_cppobj(L, self, "cc.TransitionFlipAngular");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionFlipAngular_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    lua_Unsigned arg3 = 0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::TransitionFlipAngular *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionFlipAngular *ret = (cocos2d::TransitionFlipAngular *)cocos2d::TransitionFlipAngular::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFlipAngular");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFlipAngular_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionFlipAngular *create(float t, @ref(map autoref) cocos2d::Scene *s)
    cocos2d::TransitionFlipAngular *ret = (cocos2d::TransitionFlipAngular *)cocos2d::TransitionFlipAngular::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFlipAngular");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFlipAngular_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionFlipAngular *create(float t, @ref(map autoref) cocos2d::Scene *s)
            return _cocos2d_TransitionFlipAngular_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene")) && (olua_is_uint(L, 3))) {
            // static cocos2d::TransitionFlipAngular *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _cocos2d_TransitionFlipAngular_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFlipAngular::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TransitionFlipAngular_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionFlipAngular()
    cocos2d::TransitionFlipAngular *ret = (cocos2d::TransitionFlipAngular *)new cocos2d::TransitionFlipAngular();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFlipAngular");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFlipAngular(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFlipAngular", "cc.TransitionSceneOriented");
    oluacls_func(L, "__move", _cocos2d_TransitionFlipAngular___move);
    oluacls_func(L, "create", _cocos2d_TransitionFlipAngular_create);
    oluacls_func(L, "new", _cocos2d_TransitionFlipAngular_new);

    olua_registerluatype<cocos2d::TransitionFlipAngular>(L, "cc.TransitionFlipAngular");

    return 1;
}

static int _cocos2d_TransitionZoomFlipX___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionZoomFlipX *)olua_toobj(L, 1, "cc.TransitionZoomFlipX");
    olua_push_cppobj(L, self, "cc.TransitionZoomFlipX");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionZoomFlipX_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    lua_Unsigned arg3 = 0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::TransitionZoomFlipX *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionZoomFlipX *ret = (cocos2d::TransitionZoomFlipX *)cocos2d::TransitionZoomFlipX::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionZoomFlipX");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipX_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionZoomFlipX *create(float t, @ref(map autoref) cocos2d::Scene *s)
    cocos2d::TransitionZoomFlipX *ret = (cocos2d::TransitionZoomFlipX *)cocos2d::TransitionZoomFlipX::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionZoomFlipX");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipX_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionZoomFlipX *create(float t, @ref(map autoref) cocos2d::Scene *s)
            return _cocos2d_TransitionZoomFlipX_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene")) && (olua_is_uint(L, 3))) {
            // static cocos2d::TransitionZoomFlipX *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _cocos2d_TransitionZoomFlipX_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionZoomFlipX::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TransitionZoomFlipX_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionZoomFlipX()
    cocos2d::TransitionZoomFlipX *ret = (cocos2d::TransitionZoomFlipX *)new cocos2d::TransitionZoomFlipX();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionZoomFlipX");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionZoomFlipX(lua_State *L)
{
    oluacls_class(L, "cc.TransitionZoomFlipX", "cc.TransitionSceneOriented");
    oluacls_func(L, "__move", _cocos2d_TransitionZoomFlipX___move);
    oluacls_func(L, "create", _cocos2d_TransitionZoomFlipX_create);
    oluacls_func(L, "new", _cocos2d_TransitionZoomFlipX_new);

    olua_registerluatype<cocos2d::TransitionZoomFlipX>(L, "cc.TransitionZoomFlipX");

    return 1;
}

static int _cocos2d_TransitionZoomFlipY___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionZoomFlipY *)olua_toobj(L, 1, "cc.TransitionZoomFlipY");
    olua_push_cppobj(L, self, "cc.TransitionZoomFlipY");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionZoomFlipY_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    lua_Unsigned arg3 = 0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::TransitionZoomFlipY *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionZoomFlipY *ret = (cocos2d::TransitionZoomFlipY *)cocos2d::TransitionZoomFlipY::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionZoomFlipY");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipY_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionZoomFlipY *create(float t, @ref(map autoref) cocos2d::Scene *s)
    cocos2d::TransitionZoomFlipY *ret = (cocos2d::TransitionZoomFlipY *)cocos2d::TransitionZoomFlipY::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionZoomFlipY");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipY_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionZoomFlipY *create(float t, @ref(map autoref) cocos2d::Scene *s)
            return _cocos2d_TransitionZoomFlipY_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene")) && (olua_is_uint(L, 3))) {
            // static cocos2d::TransitionZoomFlipY *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _cocos2d_TransitionZoomFlipY_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionZoomFlipY::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TransitionZoomFlipY_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionZoomFlipY()
    cocos2d::TransitionZoomFlipY *ret = (cocos2d::TransitionZoomFlipY *)new cocos2d::TransitionZoomFlipY();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionZoomFlipY");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionZoomFlipY(lua_State *L)
{
    oluacls_class(L, "cc.TransitionZoomFlipY", "cc.TransitionSceneOriented");
    oluacls_func(L, "__move", _cocos2d_TransitionZoomFlipY___move);
    oluacls_func(L, "create", _cocos2d_TransitionZoomFlipY_create);
    oluacls_func(L, "new", _cocos2d_TransitionZoomFlipY_new);

    olua_registerluatype<cocos2d::TransitionZoomFlipY>(L, "cc.TransitionZoomFlipY");

    return 1;
}

static int _cocos2d_TransitionZoomFlipAngular___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionZoomFlipAngular *)olua_toobj(L, 1, "cc.TransitionZoomFlipAngular");
    olua_push_cppobj(L, self, "cc.TransitionZoomFlipAngular");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionZoomFlipAngular_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    lua_Unsigned arg3 = 0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::TransitionZoomFlipAngular *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionZoomFlipAngular *ret = (cocos2d::TransitionZoomFlipAngular *)cocos2d::TransitionZoomFlipAngular::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionZoomFlipAngular");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipAngular_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionZoomFlipAngular *create(float t, @ref(map autoref) cocos2d::Scene *s)
    cocos2d::TransitionZoomFlipAngular *ret = (cocos2d::TransitionZoomFlipAngular *)cocos2d::TransitionZoomFlipAngular::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionZoomFlipAngular");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipAngular_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionZoomFlipAngular *create(float t, @ref(map autoref) cocos2d::Scene *s)
            return _cocos2d_TransitionZoomFlipAngular_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene")) && (olua_is_uint(L, 3))) {
            // static cocos2d::TransitionZoomFlipAngular *create(float t, @ref(map autoref) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _cocos2d_TransitionZoomFlipAngular_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionZoomFlipAngular::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TransitionZoomFlipAngular_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionZoomFlipAngular()
    cocos2d::TransitionZoomFlipAngular *ret = (cocos2d::TransitionZoomFlipAngular *)new cocos2d::TransitionZoomFlipAngular();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionZoomFlipAngular");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionZoomFlipAngular(lua_State *L)
{
    oluacls_class(L, "cc.TransitionZoomFlipAngular", "cc.TransitionSceneOriented");
    oluacls_func(L, "__move", _cocos2d_TransitionZoomFlipAngular___move);
    oluacls_func(L, "create", _cocos2d_TransitionZoomFlipAngular_create);
    oluacls_func(L, "new", _cocos2d_TransitionZoomFlipAngular_new);

    olua_registerluatype<cocos2d::TransitionZoomFlipAngular>(L, "cc.TransitionZoomFlipAngular");

    return 1;
}

static int _cocos2d_TransitionFade___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionFade *)olua_toobj(L, 1, "cc.TransitionFade");
    olua_push_cppobj(L, self, "cc.TransitionFade");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionFade_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Scene *arg2 = nullptr;       /** scene */
    cocos2d::Color3B arg3;       /** color */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    manual_olua_check_cocos2d_Color3B(L, 3, &arg3);

    // static cocos2d::TransitionFade *create(float duration, @ref(map autoref) cocos2d::Scene *scene, const cocos2d::Color3B &color)
    cocos2d::TransitionFade *ret = (cocos2d::TransitionFade *)cocos2d::TransitionFade::create((float)arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFade");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFade_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionFade *create(float duration, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionFade *ret = (cocos2d::TransitionFade *)cocos2d::TransitionFade::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFade");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFade_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionFade *create(float duration, @ref(map autoref) cocos2d::Scene *scene)
            return _cocos2d_TransitionFade_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_cppobj(L, 2, "cc.Scene")) && (manual_olua_is_cocos2d_Color3B(L, 3))) {
            // static cocos2d::TransitionFade *create(float duration, @ref(map autoref) cocos2d::Scene *scene, const cocos2d::Color3B &color)
            return _cocos2d_TransitionFade_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFade::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TransitionFade_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionFade()
    cocos2d::TransitionFade *ret = (cocos2d::TransitionFade *)new cocos2d::TransitionFade();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFade");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFade(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFade", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionFade___move);
    oluacls_func(L, "create", _cocos2d_TransitionFade_create);
    oluacls_func(L, "new", _cocos2d_TransitionFade_new);

    olua_registerluatype<cocos2d::TransitionFade>(L, "cc.TransitionFade");

    return 1;
}

static int _cocos2d_TransitionCrossFade___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionCrossFade *)olua_toobj(L, 1, "cc.TransitionCrossFade");
    olua_push_cppobj(L, self, "cc.TransitionCrossFade");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionCrossFade_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionCrossFade *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionCrossFade *ret = (cocos2d::TransitionCrossFade *)cocos2d::TransitionCrossFade::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionCrossFade");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionCrossFade_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionCrossFade()
    cocos2d::TransitionCrossFade *ret = (cocos2d::TransitionCrossFade *)new cocos2d::TransitionCrossFade();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionCrossFade");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionCrossFade(lua_State *L)
{
    oluacls_class(L, "cc.TransitionCrossFade", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionCrossFade___move);
    oluacls_func(L, "create", _cocos2d_TransitionCrossFade_create);
    oluacls_func(L, "new", _cocos2d_TransitionCrossFade_new);

    olua_registerluatype<cocos2d::TransitionCrossFade>(L, "cc.TransitionCrossFade");

    return 1;
}

static int _cocos2d_TransitionTurnOffTiles___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionTurnOffTiles *)olua_toobj(L, 1, "cc.TransitionTurnOffTiles");
    olua_push_cppobj(L, self, "cc.TransitionTurnOffTiles");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionTurnOffTiles_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionTurnOffTiles *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionTurnOffTiles *ret = (cocos2d::TransitionTurnOffTiles *)cocos2d::TransitionTurnOffTiles::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionTurnOffTiles");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionTurnOffTiles_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionTurnOffTiles *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionTurnOffTiles");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@ref(single action) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    // inject code after call
    olua_singleref(L, 1, "action", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionTurnOffTiles_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionTurnOffTiles()
    cocos2d::TransitionTurnOffTiles *ret = (cocos2d::TransitionTurnOffTiles *)new cocos2d::TransitionTurnOffTiles();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionTurnOffTiles");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionTurnOffTiles(lua_State *L)
{
    oluacls_class(L, "cc.TransitionTurnOffTiles", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionTurnOffTiles___move);
    oluacls_func(L, "create", _cocos2d_TransitionTurnOffTiles_create);
    oluacls_func(L, "easeActionWithAction", _cocos2d_TransitionTurnOffTiles_easeActionWithAction);
    oluacls_func(L, "new", _cocos2d_TransitionTurnOffTiles_new);

    olua_registerluatype<cocos2d::TransitionTurnOffTiles>(L, "cc.TransitionTurnOffTiles");

    return 1;
}

static int _cocos2d_TransitionSplitCols___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionSplitCols *)olua_toobj(L, 1, "cc.TransitionSplitCols");
    olua_push_cppobj(L, self, "cc.TransitionSplitCols");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionSplitCols_action(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSplitCols *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionSplitCols");

    // cocos2d::ActionInterval *action()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->action();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSplitCols_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionSplitCols *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionSplitCols *ret = (cocos2d::TransitionSplitCols *)cocos2d::TransitionSplitCols::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSplitCols");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSplitCols_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSplitCols *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionSplitCols");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@ref(single action) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    // inject code after call
    olua_singleref(L, 1, "action", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSplitCols_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionSplitCols()
    cocos2d::TransitionSplitCols *ret = (cocos2d::TransitionSplitCols *)new cocos2d::TransitionSplitCols();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSplitCols");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSplitCols(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSplitCols", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionSplitCols___move);
    oluacls_func(L, "action", _cocos2d_TransitionSplitCols_action);
    oluacls_func(L, "create", _cocos2d_TransitionSplitCols_create);
    oluacls_func(L, "easeActionWithAction", _cocos2d_TransitionSplitCols_easeActionWithAction);
    oluacls_func(L, "new", _cocos2d_TransitionSplitCols_new);

    olua_registerluatype<cocos2d::TransitionSplitCols>(L, "cc.TransitionSplitCols");

    return 1;
}

static int _cocos2d_TransitionSplitRows___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionSplitRows *)olua_toobj(L, 1, "cc.TransitionSplitRows");
    olua_push_cppobj(L, self, "cc.TransitionSplitRows");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionSplitRows_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionSplitRows *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionSplitRows *ret = (cocos2d::TransitionSplitRows *)cocos2d::TransitionSplitRows::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSplitRows");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionSplitRows_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionSplitRows()
    cocos2d::TransitionSplitRows *ret = (cocos2d::TransitionSplitRows *)new cocos2d::TransitionSplitRows();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionSplitRows");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSplitRows(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSplitRows", "cc.TransitionSplitCols");
    oluacls_func(L, "__move", _cocos2d_TransitionSplitRows___move);
    oluacls_func(L, "create", _cocos2d_TransitionSplitRows_create);
    oluacls_func(L, "new", _cocos2d_TransitionSplitRows_new);

    olua_registerluatype<cocos2d::TransitionSplitRows>(L, "cc.TransitionSplitRows");

    return 1;
}

static int _cocos2d_TransitionFadeTR___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionFadeTR *)olua_toobj(L, 1, "cc.TransitionFadeTR");
    olua_push_cppobj(L, self, "cc.TransitionFadeTR");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionFadeTR_actionWithSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionFadeTR *self = nullptr;
    cocos2d::Size arg1;       /** size */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionFadeTR");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);

    // cocos2d::ActionInterval *actionWithSize(const cocos2d::Size &size)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->actionWithSize(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFadeTR_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionFadeTR *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionFadeTR *ret = (cocos2d::TransitionFadeTR *)cocos2d::TransitionFadeTR::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFadeTR");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFadeTR_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionFadeTR *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionFadeTR");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@ref(single action) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    // inject code after call
    olua_singleref(L, 1, "action", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFadeTR_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionFadeTR()
    cocos2d::TransitionFadeTR *ret = (cocos2d::TransitionFadeTR *)new cocos2d::TransitionFadeTR();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFadeTR");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFadeTR(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFadeTR", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionFadeTR___move);
    oluacls_func(L, "actionWithSize", _cocos2d_TransitionFadeTR_actionWithSize);
    oluacls_func(L, "create", _cocos2d_TransitionFadeTR_create);
    oluacls_func(L, "easeActionWithAction", _cocos2d_TransitionFadeTR_easeActionWithAction);
    oluacls_func(L, "new", _cocos2d_TransitionFadeTR_new);

    olua_registerluatype<cocos2d::TransitionFadeTR>(L, "cc.TransitionFadeTR");

    return 1;
}

static int _cocos2d_TransitionFadeBL___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionFadeBL *)olua_toobj(L, 1, "cc.TransitionFadeBL");
    olua_push_cppobj(L, self, "cc.TransitionFadeBL");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionFadeBL_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionFadeBL *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionFadeBL *ret = (cocos2d::TransitionFadeBL *)cocos2d::TransitionFadeBL::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFadeBL");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFadeBL_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionFadeBL()
    cocos2d::TransitionFadeBL *ret = (cocos2d::TransitionFadeBL *)new cocos2d::TransitionFadeBL();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFadeBL");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFadeBL(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFadeBL", "cc.TransitionFadeTR");
    oluacls_func(L, "__move", _cocos2d_TransitionFadeBL___move);
    oluacls_func(L, "create", _cocos2d_TransitionFadeBL_create);
    oluacls_func(L, "new", _cocos2d_TransitionFadeBL_new);

    olua_registerluatype<cocos2d::TransitionFadeBL>(L, "cc.TransitionFadeBL");

    return 1;
}

static int _cocos2d_TransitionFadeUp___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionFadeUp *)olua_toobj(L, 1, "cc.TransitionFadeUp");
    olua_push_cppobj(L, self, "cc.TransitionFadeUp");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionFadeUp_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionFadeUp *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionFadeUp *ret = (cocos2d::TransitionFadeUp *)cocos2d::TransitionFadeUp::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFadeUp");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFadeUp_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionFadeUp()
    cocos2d::TransitionFadeUp *ret = (cocos2d::TransitionFadeUp *)new cocos2d::TransitionFadeUp();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFadeUp");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFadeUp(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFadeUp", "cc.TransitionFadeTR");
    oluacls_func(L, "__move", _cocos2d_TransitionFadeUp___move);
    oluacls_func(L, "create", _cocos2d_TransitionFadeUp_create);
    oluacls_func(L, "new", _cocos2d_TransitionFadeUp_new);

    olua_registerluatype<cocos2d::TransitionFadeUp>(L, "cc.TransitionFadeUp");

    return 1;
}

static int _cocos2d_TransitionFadeDown___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionFadeDown *)olua_toobj(L, 1, "cc.TransitionFadeDown");
    olua_push_cppobj(L, self, "cc.TransitionFadeDown");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionFadeDown_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionFadeDown *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionFadeDown *ret = (cocos2d::TransitionFadeDown *)cocos2d::TransitionFadeDown::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFadeDown");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionFadeDown_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionFadeDown()
    cocos2d::TransitionFadeDown *ret = (cocos2d::TransitionFadeDown *)new cocos2d::TransitionFadeDown();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionFadeDown");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFadeDown(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFadeDown", "cc.TransitionFadeTR");
    oluacls_func(L, "__move", _cocos2d_TransitionFadeDown___move);
    oluacls_func(L, "create", _cocos2d_TransitionFadeDown_create);
    oluacls_func(L, "new", _cocos2d_TransitionFadeDown_new);

    olua_registerluatype<cocos2d::TransitionFadeDown>(L, "cc.TransitionFadeDown");

    return 1;
}

static int _cocos2d_TransitionPageTurn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionPageTurn *)olua_toobj(L, 1, "cc.TransitionPageTurn");
    olua_push_cppobj(L, self, "cc.TransitionPageTurn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionPageTurn_actionWithSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionPageTurn *self = nullptr;
    cocos2d::Size arg1;       /** vector */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionPageTurn");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);

    // cocos2d::ActionInterval *actionWithSize(const cocos2d::Size &vector)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->actionWithSize(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionPageTurn_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */
    bool arg3 = false;       /** backwards */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_bool(L, 3, &arg3);

    // static cocos2d::TransitionPageTurn *create(float t, @ref(map autoref) cocos2d::Scene *scene, bool backwards)
    cocos2d::TransitionPageTurn *ret = (cocos2d::TransitionPageTurn *)cocos2d::TransitionPageTurn::create((float)arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionPageTurn");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionPageTurn_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionPageTurn()
    cocos2d::TransitionPageTurn *ret = (cocos2d::TransitionPageTurn *)new cocos2d::TransitionPageTurn();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionPageTurn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionPageTurn(lua_State *L)
{
    oluacls_class(L, "cc.TransitionPageTurn", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionPageTurn___move);
    oluacls_func(L, "actionWithSize", _cocos2d_TransitionPageTurn_actionWithSize);
    oluacls_func(L, "create", _cocos2d_TransitionPageTurn_create);
    oluacls_func(L, "new", _cocos2d_TransitionPageTurn_new);

    olua_registerluatype<cocos2d::TransitionPageTurn>(L, "cc.TransitionPageTurn");

    return 1;
}

static int _cocos2d_TransitionProgress___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionProgress *)olua_toobj(L, 1, "cc.TransitionProgress");
    olua_push_cppobj(L, self, "cc.TransitionProgress");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionProgress_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionProgress *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionProgress *ret = (cocos2d::TransitionProgress *)cocos2d::TransitionProgress::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgress");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionProgress_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionProgress()
    cocos2d::TransitionProgress *ret = (cocos2d::TransitionProgress *)new cocos2d::TransitionProgress();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgress");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgress(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgress", "cc.TransitionScene");
    oluacls_func(L, "__move", _cocos2d_TransitionProgress___move);
    oluacls_func(L, "create", _cocos2d_TransitionProgress_create);
    oluacls_func(L, "new", _cocos2d_TransitionProgress_new);

    olua_registerluatype<cocos2d::TransitionProgress>(L, "cc.TransitionProgress");

    return 1;
}

static int _cocos2d_TransitionProgressRadialCCW___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionProgressRadialCCW *)olua_toobj(L, 1, "cc.TransitionProgressRadialCCW");
    olua_push_cppobj(L, self, "cc.TransitionProgressRadialCCW");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionProgressRadialCCW_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionProgressRadialCCW *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionProgressRadialCCW *ret = (cocos2d::TransitionProgressRadialCCW *)cocos2d::TransitionProgressRadialCCW::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressRadialCCW");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionProgressRadialCCW_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionProgressRadialCCW()
    cocos2d::TransitionProgressRadialCCW *ret = (cocos2d::TransitionProgressRadialCCW *)new cocos2d::TransitionProgressRadialCCW();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressRadialCCW");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressRadialCCW(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressRadialCCW", "cc.TransitionProgress");
    oluacls_func(L, "__move", _cocos2d_TransitionProgressRadialCCW___move);
    oluacls_func(L, "create", _cocos2d_TransitionProgressRadialCCW_create);
    oluacls_func(L, "new", _cocos2d_TransitionProgressRadialCCW_new);

    olua_registerluatype<cocos2d::TransitionProgressRadialCCW>(L, "cc.TransitionProgressRadialCCW");

    return 1;
}

static int _cocos2d_TransitionProgressRadialCW___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionProgressRadialCW *)olua_toobj(L, 1, "cc.TransitionProgressRadialCW");
    olua_push_cppobj(L, self, "cc.TransitionProgressRadialCW");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionProgressRadialCW_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionProgressRadialCW *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionProgressRadialCW *ret = (cocos2d::TransitionProgressRadialCW *)cocos2d::TransitionProgressRadialCW::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressRadialCW");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionProgressRadialCW_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionProgressRadialCW()
    cocos2d::TransitionProgressRadialCW *ret = (cocos2d::TransitionProgressRadialCW *)new cocos2d::TransitionProgressRadialCW();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressRadialCW");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressRadialCW(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressRadialCW", "cc.TransitionProgress");
    oluacls_func(L, "__move", _cocos2d_TransitionProgressRadialCW___move);
    oluacls_func(L, "create", _cocos2d_TransitionProgressRadialCW_create);
    oluacls_func(L, "new", _cocos2d_TransitionProgressRadialCW_new);

    olua_registerluatype<cocos2d::TransitionProgressRadialCW>(L, "cc.TransitionProgressRadialCW");

    return 1;
}

static int _cocos2d_TransitionProgressHorizontal___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionProgressHorizontal *)olua_toobj(L, 1, "cc.TransitionProgressHorizontal");
    olua_push_cppobj(L, self, "cc.TransitionProgressHorizontal");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionProgressHorizontal_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionProgressHorizontal *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionProgressHorizontal *ret = (cocos2d::TransitionProgressHorizontal *)cocos2d::TransitionProgressHorizontal::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressHorizontal");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionProgressHorizontal_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionProgressHorizontal()
    cocos2d::TransitionProgressHorizontal *ret = (cocos2d::TransitionProgressHorizontal *)new cocos2d::TransitionProgressHorizontal();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressHorizontal");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressHorizontal(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressHorizontal", "cc.TransitionProgress");
    oluacls_func(L, "__move", _cocos2d_TransitionProgressHorizontal___move);
    oluacls_func(L, "create", _cocos2d_TransitionProgressHorizontal_create);
    oluacls_func(L, "new", _cocos2d_TransitionProgressHorizontal_new);

    olua_registerluatype<cocos2d::TransitionProgressHorizontal>(L, "cc.TransitionProgressHorizontal");

    return 1;
}

static int _cocos2d_TransitionProgressVertical___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionProgressVertical *)olua_toobj(L, 1, "cc.TransitionProgressVertical");
    olua_push_cppobj(L, self, "cc.TransitionProgressVertical");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionProgressVertical_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionProgressVertical *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionProgressVertical *ret = (cocos2d::TransitionProgressVertical *)cocos2d::TransitionProgressVertical::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressVertical");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionProgressVertical_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionProgressVertical()
    cocos2d::TransitionProgressVertical *ret = (cocos2d::TransitionProgressVertical *)new cocos2d::TransitionProgressVertical();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressVertical");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressVertical(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressVertical", "cc.TransitionProgress");
    oluacls_func(L, "__move", _cocos2d_TransitionProgressVertical___move);
    oluacls_func(L, "create", _cocos2d_TransitionProgressVertical_create);
    oluacls_func(L, "new", _cocos2d_TransitionProgressVertical_new);

    olua_registerluatype<cocos2d::TransitionProgressVertical>(L, "cc.TransitionProgressVertical");

    return 1;
}

static int _cocos2d_TransitionProgressInOut___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionProgressInOut *)olua_toobj(L, 1, "cc.TransitionProgressInOut");
    olua_push_cppobj(L, self, "cc.TransitionProgressInOut");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionProgressInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionProgressInOut *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionProgressInOut *ret = (cocos2d::TransitionProgressInOut *)cocos2d::TransitionProgressInOut::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressInOut");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionProgressInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionProgressInOut()
    cocos2d::TransitionProgressInOut *ret = (cocos2d::TransitionProgressInOut *)new cocos2d::TransitionProgressInOut();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressInOut(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressInOut", "cc.TransitionProgress");
    oluacls_func(L, "__move", _cocos2d_TransitionProgressInOut___move);
    oluacls_func(L, "create", _cocos2d_TransitionProgressInOut_create);
    oluacls_func(L, "new", _cocos2d_TransitionProgressInOut_new);

    olua_registerluatype<cocos2d::TransitionProgressInOut>(L, "cc.TransitionProgressInOut");

    return 1;
}

static int _cocos2d_TransitionProgressOutIn___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionProgressOutIn *)olua_toobj(L, 1, "cc.TransitionProgressOutIn");
    olua_push_cppobj(L, self, "cc.TransitionProgressOutIn");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TransitionProgressOutIn_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static cocos2d::TransitionProgressOutIn *create(float t, @ref(map autoref) cocos2d::Scene *scene)
    cocos2d::TransitionProgressOutIn *ret = (cocos2d::TransitionProgressOutIn *)cocos2d::TransitionProgressOutIn::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressOutIn");

    // inject code after call
    olua_mapref(L, -1, "autoref", 2);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TransitionProgressOutIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // TransitionProgressOutIn()
    cocos2d::TransitionProgressOutIn *ret = (cocos2d::TransitionProgressOutIn *)new cocos2d::TransitionProgressOutIn();
    int num_ret = olua_push_cppobj(L, ret, "cc.TransitionProgressOutIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressOutIn(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressOutIn", "cc.TransitionProgress");
    oluacls_func(L, "__move", _cocos2d_TransitionProgressOutIn___move);
    oluacls_func(L, "create", _cocos2d_TransitionProgressOutIn_create);
    oluacls_func(L, "new", _cocos2d_TransitionProgressOutIn_new);

    olua_registerluatype<cocos2d::TransitionProgressOutIn>(L, "cc.TransitionProgressOutIn");

    return 1;
}

static int _cocos2d_TextFieldDelegate___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TextFieldDelegate *)olua_toobj(L, 1, "cc.TextFieldDelegate");
    olua_push_cppobj(L, self, "cc.TextFieldDelegate");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TextFieldDelegate_onTextFieldAttachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldDelegate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextFieldTTF");

    // bool onTextFieldAttachWithIME(cocos2d::TextFieldTTF *sender)
    bool ret = (bool)self->onTextFieldAttachWithIME(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldDelegate_onTextFieldDeleteBackward(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */
    const char *arg2 = nullptr;       /** delText */
    lua_Unsigned arg3 = 0;       /** nLen */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldDelegate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextFieldTTF");
    olua_check_string(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // bool onTextFieldDeleteBackward(cocos2d::TextFieldTTF *sender, const char *delText, size_t nLen)
    bool ret = (bool)self->onTextFieldDeleteBackward(arg1, arg2, (size_t)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldDelegate_onTextFieldDetachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldDelegate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextFieldTTF");

    // bool onTextFieldDetachWithIME(cocos2d::TextFieldTTF *sender)
    bool ret = (bool)self->onTextFieldDetachWithIME(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldDelegate_onTextFieldInsertText(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */
    const char *arg2 = nullptr;       /** text */
    lua_Unsigned arg3 = 0;       /** nLen */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldDelegate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextFieldTTF");
    olua_check_string(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // bool onTextFieldInsertText(cocos2d::TextFieldTTF *sender, const char *text, size_t nLen)
    bool ret = (bool)self->onTextFieldInsertText(arg1, arg2, (size_t)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldDelegate_onVisit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */
    cocos2d::Renderer *arg2 = nullptr;       /** renderer */
    cocos2d::Mat4 arg3;       /** transform */
    lua_Unsigned arg4 = 0;       /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldDelegate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextFieldTTF");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Renderer");
    manual_olua_check_cocos2d_Mat4(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);

    // bool onVisit(cocos2d::TextFieldTTF *sender, cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)
    bool ret = (bool)self->onVisit(arg1, arg2, arg3, (uint32_t)arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_TextFieldDelegate(lua_State *L)
{
    oluacls_class(L, "cc.TextFieldDelegate", nullptr);
    oluacls_func(L, "__move", _cocos2d_TextFieldDelegate___move);
    oluacls_func(L, "onTextFieldAttachWithIME", _cocos2d_TextFieldDelegate_onTextFieldAttachWithIME);
    oluacls_func(L, "onTextFieldDeleteBackward", _cocos2d_TextFieldDelegate_onTextFieldDeleteBackward);
    oluacls_func(L, "onTextFieldDetachWithIME", _cocos2d_TextFieldDelegate_onTextFieldDetachWithIME);
    oluacls_func(L, "onTextFieldInsertText", _cocos2d_TextFieldDelegate_onTextFieldInsertText);
    oluacls_func(L, "onVisit", _cocos2d_TextFieldDelegate_onVisit);

    olua_registerluatype<cocos2d::TextFieldDelegate>(L, "cc.TextFieldDelegate");

    return 1;
}

static int _cocos2d_TextFieldTTF___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TextFieldTTF *)olua_toobj(L, 1, "cc.TextFieldTTF");
    olua_push_cppobj(L, self, "cc.TextFieldTTF");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TextFieldTTF_appendString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** text */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_std_string(L, 2, &arg1);

    // void appendString(const std::string &text)
    self->appendString(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_attachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");

    // bool attachWithIME()
    bool ret = (bool)self->attachWithIME();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_detachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");

    // bool detachWithIME()
    bool ret = (bool)self->detachWithIME();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_getCharCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");

    // std::size_t getCharCount()
    std::size_t ret = (std::size_t)self->getCharCount();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_getColorSpaceHolder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");

    // const cocos2d::Color4B &getColorSpaceHolder()
    const cocos2d::Color4B &ret = (const cocos2d::Color4B &)self->getColorSpaceHolder();
    int num_ret = manual_olua_push_cocos2d_Color4B(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_getDelegate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");

    // cocos2d::TextFieldDelegate *getDelegate()
    cocos2d::TextFieldDelegate *ret = (cocos2d::TextFieldDelegate *)self->getDelegate();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextFieldDelegate");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_getPasswordTextStyle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");

    // const std::string &getPasswordTextStyle()
    const std::string &ret = (const std::string &)self->getPasswordTextStyle();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_getPlaceHolder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");

    // const std::string &getPlaceHolder()
    const std::string &ret = (const std::string &)self->getPlaceHolder();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_initWithPlaceHolder1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** placeholder */
    cocos2d::Size arg2;       /** dimensions */
    lua_Unsigned arg3 = 0;       /** alignment */
    std::string arg4;       /** fontName */
    lua_Number arg5 = 0;       /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_std_string(L, 2, &arg1);
    auto_olua_check_cocos2d_Size(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_std_string(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // bool initWithPlaceHolder(const std::string &placeholder, const cocos2d::Size &dimensions, cocos2d::TextHAlignment alignment, const std::string &fontName, float fontSize)
    bool ret = (bool)self->initWithPlaceHolder(arg1, arg2, (cocos2d::TextHAlignment)arg3, arg4, (float)arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_initWithPlaceHolder2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** placeholder */
    std::string arg2;       /** fontName */
    lua_Number arg3 = 0;       /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool initWithPlaceHolder(const std::string &placeholder, const std::string &fontName, float fontSize)
    bool ret = (bool)self->initWithPlaceHolder(arg1, arg2, (float)arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_initWithPlaceHolder(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_number(L, 4))) {
            // bool initWithPlaceHolder(const std::string &placeholder, const std::string &fontName, float fontSize)
            return _cocos2d_TextFieldTTF_initWithPlaceHolder2(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_string(L, 2)) && (auto_olua_is_cocos2d_Size(L, 3)) && (olua_is_uint(L, 4)) && (olua_is_std_string(L, 5)) && (olua_is_number(L, 6))) {
            // bool initWithPlaceHolder(const std::string &placeholder, const cocos2d::Size &dimensions, cocos2d::TextHAlignment alignment, const std::string &fontName, float fontSize)
            return _cocos2d_TextFieldTTF_initWithPlaceHolder1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextFieldTTF::initWithPlaceHolder' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextFieldTTF_isSecureTextEntry(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");

    // bool isSecureTextEntry()
    bool ret = (bool)self->isSecureTextEntry();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_new(lua_State *L)
{
    olua_startinvoke(L);

    // TextFieldTTF()
    cocos2d::TextFieldTTF *ret = (cocos2d::TextFieldTTF *)new cocos2d::TextFieldTTF();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextFieldTTF");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_setColorSpaceHolder1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    cocos2d::Color3B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    manual_olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setColorSpaceHolder(const cocos2d::Color3B &color)
    self->setColorSpaceHolder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_setColorSpaceHolder2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    manual_olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void setColorSpaceHolder(const cocos2d::Color4B &color)
    self->setColorSpaceHolder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_setColorSpaceHolder(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if ((manual_olua_is_cocos2d_Color3B(L, 2))) {
            // void setColorSpaceHolder(const cocos2d::Color3B &color)
            return _cocos2d_TextFieldTTF_setColorSpaceHolder1(L);
        }

        // if ((manual_olua_is_cocos2d_Color4B(L, 2))) {
            // void setColorSpaceHolder(const cocos2d::Color4B &color)
            return _cocos2d_TextFieldTTF_setColorSpaceHolder2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextFieldTTF::setColorSpaceHolder' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextFieldTTF_setCursorChar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    lua_Integer arg1 = 0;       /** cursor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_int(L, 2, &arg1);

    // void setCursorChar(char cursor)
    self->setCursorChar((char)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_setCursorEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_bool(L, 2, &arg1);

    // void setCursorEnabled(bool enabled)
    self->setCursorEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_setCursorFromPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */
    cocos2d::Camera *arg2 = nullptr;       /** camera */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Camera");

    // void setCursorFromPoint(const cocos2d::Vec2 &point, const cocos2d::Camera *camera)
    self->setCursorFromPoint(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_setCursorPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    lua_Unsigned arg1 = 0;       /** cursorPosition */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_uint(L, 2, &arg1);

    // void setCursorPosition(std::size_t cursorPosition)
    self->setCursorPosition((std::size_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_setDelegate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    cocos2d::TextFieldDelegate *arg1 = nullptr;       /** delegate */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextFieldDelegate");

    // void setDelegate(cocos2d::TextFieldDelegate *delegate)
    self->setDelegate(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_setPasswordTextStyle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** text */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_std_string(L, 2, &arg1);

    // void setPasswordTextStyle(const std::string &text)
    self->setPasswordTextStyle(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_setPlaceHolder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** text */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_std_string(L, 2, &arg1);

    // void setPlaceHolder(const std::string &text)
    self->setPlaceHolder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_setSecureTextEntry(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextFieldTTF");
    olua_check_bool(L, 2, &arg1);

    // void setSecureTextEntry(bool value)
    self->setSecureTextEntry(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TextFieldTTF_textFieldWithPlaceHolder1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** placeholder */
    cocos2d::Size arg2;       /** dimensions */
    lua_Unsigned arg3 = 0;       /** alignment */
    std::string arg4;       /** fontName */
    lua_Number arg5 = 0;       /** fontSize */

    olua_check_std_string(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);

    // static cocos2d::TextFieldTTF *textFieldWithPlaceHolder(const std::string &placeholder, const cocos2d::Size &dimensions, cocos2d::TextHAlignment alignment, const std::string &fontName, float fontSize)
    cocos2d::TextFieldTTF *ret = (cocos2d::TextFieldTTF *)cocos2d::TextFieldTTF::textFieldWithPlaceHolder(arg1, arg2, (cocos2d::TextHAlignment)arg3, arg4, (float)arg5);
    int num_ret = olua_push_cppobj(L, ret, "cc.TextFieldTTF");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_textFieldWithPlaceHolder2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** placeholder */
    std::string arg2;       /** fontName */
    lua_Number arg3 = 0;       /** fontSize */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::TextFieldTTF *textFieldWithPlaceHolder(const std::string &placeholder, const std::string &fontName, float fontSize)
    cocos2d::TextFieldTTF *ret = (cocos2d::TextFieldTTF *)cocos2d::TextFieldTTF::textFieldWithPlaceHolder(arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TextFieldTTF");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TextFieldTTF_textFieldWithPlaceHolder(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::TextFieldTTF *textFieldWithPlaceHolder(const std::string &placeholder, const std::string &fontName, float fontSize)
            return _cocos2d_TextFieldTTF_textFieldWithPlaceHolder2(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_std_string(L, 1)) && (auto_olua_is_cocos2d_Size(L, 2)) && (olua_is_uint(L, 3)) && (olua_is_std_string(L, 4)) && (olua_is_number(L, 5))) {
            // static cocos2d::TextFieldTTF *textFieldWithPlaceHolder(const std::string &placeholder, const cocos2d::Size &dimensions, cocos2d::TextHAlignment alignment, const std::string &fontName, float fontSize)
            return _cocos2d_TextFieldTTF_textFieldWithPlaceHolder1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextFieldTTF::textFieldWithPlaceHolder' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_TextFieldTTF(lua_State *L)
{
    oluacls_class(L, "cc.TextFieldTTF", "cc.Label");
    oluacls_func(L, "__move", _cocos2d_TextFieldTTF___move);
    oluacls_func(L, "appendString", _cocos2d_TextFieldTTF_appendString);
    oluacls_func(L, "attachWithIME", _cocos2d_TextFieldTTF_attachWithIME);
    oluacls_func(L, "detachWithIME", _cocos2d_TextFieldTTF_detachWithIME);
    oluacls_func(L, "getCharCount", _cocos2d_TextFieldTTF_getCharCount);
    oluacls_func(L, "getColorSpaceHolder", _cocos2d_TextFieldTTF_getColorSpaceHolder);
    oluacls_func(L, "getDelegate", _cocos2d_TextFieldTTF_getDelegate);
    oluacls_func(L, "getPasswordTextStyle", _cocos2d_TextFieldTTF_getPasswordTextStyle);
    oluacls_func(L, "getPlaceHolder", _cocos2d_TextFieldTTF_getPlaceHolder);
    oluacls_func(L, "initWithPlaceHolder", _cocos2d_TextFieldTTF_initWithPlaceHolder);
    oluacls_func(L, "isSecureTextEntry", _cocos2d_TextFieldTTF_isSecureTextEntry);
    oluacls_func(L, "new", _cocos2d_TextFieldTTF_new);
    oluacls_func(L, "setColorSpaceHolder", _cocos2d_TextFieldTTF_setColorSpaceHolder);
    oluacls_func(L, "setCursorChar", _cocos2d_TextFieldTTF_setCursorChar);
    oluacls_func(L, "setCursorEnabled", _cocos2d_TextFieldTTF_setCursorEnabled);
    oluacls_func(L, "setCursorFromPoint", _cocos2d_TextFieldTTF_setCursorFromPoint);
    oluacls_func(L, "setCursorPosition", _cocos2d_TextFieldTTF_setCursorPosition);
    oluacls_func(L, "setDelegate", _cocos2d_TextFieldTTF_setDelegate);
    oluacls_func(L, "setPasswordTextStyle", _cocos2d_TextFieldTTF_setPasswordTextStyle);
    oluacls_func(L, "setPlaceHolder", _cocos2d_TextFieldTTF_setPlaceHolder);
    oluacls_func(L, "setSecureTextEntry", _cocos2d_TextFieldTTF_setSecureTextEntry);
    oluacls_func(L, "textFieldWithPlaceHolder", _cocos2d_TextFieldTTF_textFieldWithPlaceHolder);
    oluacls_prop(L, "charCount", _cocos2d_TextFieldTTF_getCharCount, nullptr);
    oluacls_prop(L, "colorSpaceHolder", _cocos2d_TextFieldTTF_getColorSpaceHolder, _cocos2d_TextFieldTTF_setColorSpaceHolder);
    oluacls_prop(L, "delegate", _cocos2d_TextFieldTTF_getDelegate, _cocos2d_TextFieldTTF_setDelegate);
    oluacls_prop(L, "passwordTextStyle", _cocos2d_TextFieldTTF_getPasswordTextStyle, _cocos2d_TextFieldTTF_setPasswordTextStyle);
    oluacls_prop(L, "placeHolder", _cocos2d_TextFieldTTF_getPlaceHolder, _cocos2d_TextFieldTTF_setPlaceHolder);
    oluacls_prop(L, "secureTextEntry", _cocos2d_TextFieldTTF_isSecureTextEntry, _cocos2d_TextFieldTTF_setSecureTextEntry);

    olua_registerluatype<cocos2d::TextFieldTTF>(L, "cc.TextFieldTTF");

    return 1;
}

static int luaopen_cocos2d_LightType(lua_State *L)
{
    oluacls_class(L, "cc.LightType", nullptr);
    oluacls_const_integer(L, "AMBIENT", (lua_Integer)cocos2d::LightType::AMBIENT);
    oluacls_const_integer(L, "DIRECTIONAL", (lua_Integer)cocos2d::LightType::DIRECTIONAL);
    oluacls_const_integer(L, "POINT", (lua_Integer)cocos2d::LightType::POINT);
    oluacls_const_integer(L, "SPOT", (lua_Integer)cocos2d::LightType::SPOT);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_LightFlag(lua_State *L)
{
    oluacls_class(L, "cc.LightFlag", nullptr);
    oluacls_const_integer(L, "LIGHT0", (lua_Integer)cocos2d::LightFlag::LIGHT0);
    oluacls_const_integer(L, "LIGHT1", (lua_Integer)cocos2d::LightFlag::LIGHT1);
    oluacls_const_integer(L, "LIGHT10", (lua_Integer)cocos2d::LightFlag::LIGHT10);
    oluacls_const_integer(L, "LIGHT11", (lua_Integer)cocos2d::LightFlag::LIGHT11);
    oluacls_const_integer(L, "LIGHT12", (lua_Integer)cocos2d::LightFlag::LIGHT12);
    oluacls_const_integer(L, "LIGHT13", (lua_Integer)cocos2d::LightFlag::LIGHT13);
    oluacls_const_integer(L, "LIGHT14", (lua_Integer)cocos2d::LightFlag::LIGHT14);
    oluacls_const_integer(L, "LIGHT15", (lua_Integer)cocos2d::LightFlag::LIGHT15);
    oluacls_const_integer(L, "LIGHT2", (lua_Integer)cocos2d::LightFlag::LIGHT2);
    oluacls_const_integer(L, "LIGHT3", (lua_Integer)cocos2d::LightFlag::LIGHT3);
    oluacls_const_integer(L, "LIGHT4", (lua_Integer)cocos2d::LightFlag::LIGHT4);
    oluacls_const_integer(L, "LIGHT5", (lua_Integer)cocos2d::LightFlag::LIGHT5);
    oluacls_const_integer(L, "LIGHT6", (lua_Integer)cocos2d::LightFlag::LIGHT6);
    oluacls_const_integer(L, "LIGHT7", (lua_Integer)cocos2d::LightFlag::LIGHT7);
    oluacls_const_integer(L, "LIGHT8", (lua_Integer)cocos2d::LightFlag::LIGHT8);
    oluacls_const_integer(L, "LIGHT9", (lua_Integer)cocos2d::LightFlag::LIGHT9);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_BaseLight___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::BaseLight *)olua_toobj(L, 1, "cc.BaseLight");
    olua_push_cppobj(L, self, "cc.BaseLight");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_BaseLight_getIntensity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");

    // float getIntensity()
    float ret = (float)self->getIntensity();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_BaseLight_getLightFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");

    // cocos2d::LightFlag getLightFlag()
    cocos2d::LightFlag ret = (cocos2d::LightFlag)self->getLightFlag();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_BaseLight_getLightType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");

    // cocos2d::LightType getLightType()
    cocos2d::LightType ret = (cocos2d::LightType)self->getLightType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_BaseLight_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_BaseLight_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_BaseLight_setIntensity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;
    lua_Number arg1 = 0;       /** intensity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");
    olua_check_number(L, 2, &arg1);

    // void setIntensity(float intensity)
    self->setIntensity((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_BaseLight_setLightFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;
    lua_Unsigned arg1 = 0;       /** flag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");
    olua_check_uint(L, 2, &arg1);

    // void setLightFlag(cocos2d::LightFlag flag)
    self->setLightFlag((cocos2d::LightFlag)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_BaseLight(lua_State *L)
{
    oluacls_class(L, "cc.BaseLight", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_BaseLight___move);
    oluacls_func(L, "getIntensity", _cocos2d_BaseLight_getIntensity);
    oluacls_func(L, "getLightFlag", _cocos2d_BaseLight_getLightFlag);
    oluacls_func(L, "getLightType", _cocos2d_BaseLight_getLightType);
    oluacls_func(L, "isEnabled", _cocos2d_BaseLight_isEnabled);
    oluacls_func(L, "setEnabled", _cocos2d_BaseLight_setEnabled);
    oluacls_func(L, "setIntensity", _cocos2d_BaseLight_setIntensity);
    oluacls_func(L, "setLightFlag", _cocos2d_BaseLight_setLightFlag);
    oluacls_prop(L, "enabled", _cocos2d_BaseLight_isEnabled, _cocos2d_BaseLight_setEnabled);
    oluacls_prop(L, "intensity", _cocos2d_BaseLight_getIntensity, _cocos2d_BaseLight_setIntensity);
    oluacls_prop(L, "lightFlag", _cocos2d_BaseLight_getLightFlag, _cocos2d_BaseLight_setLightFlag);
    oluacls_prop(L, "lightType", _cocos2d_BaseLight_getLightType, nullptr);

    olua_registerluatype<cocos2d::BaseLight>(L, "cc.BaseLight");

    return 1;
}

static int _cocos2d_DirectionLight___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::DirectionLight *)olua_toobj(L, 1, "cc.DirectionLight");
    olua_push_cppobj(L, self, "cc.DirectionLight");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_DirectionLight_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vec3 arg1;       /** direction */
    cocos2d::Color3B arg2;       /** color */

    auto_olua_check_cocos2d_Vec3(L, 1, &arg1);
    manual_olua_check_cocos2d_Color3B(L, 2, &arg2);

    // static cocos2d::DirectionLight *create(const cocos2d::Vec3 &direction, const cocos2d::Color3B &color)
    cocos2d::DirectionLight *ret = (cocos2d::DirectionLight *)cocos2d::DirectionLight::create(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.DirectionLight");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DirectionLight_getDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DirectionLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.DirectionLight");

    // cocos2d::Vec3 getDirection()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getDirection();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DirectionLight_getDirectionInWorld(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DirectionLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.DirectionLight");

    // cocos2d::Vec3 getDirectionInWorld()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getDirectionInWorld();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DirectionLight_new(lua_State *L)
{
    olua_startinvoke(L);

    // DirectionLight()
    cocos2d::DirectionLight *ret = (cocos2d::DirectionLight *)new cocos2d::DirectionLight();
    int num_ret = olua_push_cppobj(L, ret, "cc.DirectionLight");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DirectionLight_setDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DirectionLight *self = nullptr;
    cocos2d::Vec3 arg1;       /** dir */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DirectionLight");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // void setDirection(const cocos2d::Vec3 &dir)
    self->setDirection(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_DirectionLight(lua_State *L)
{
    oluacls_class(L, "cc.DirectionLight", "cc.BaseLight");
    oluacls_func(L, "__move", _cocos2d_DirectionLight___move);
    oluacls_func(L, "create", _cocos2d_DirectionLight_create);
    oluacls_func(L, "getDirection", _cocos2d_DirectionLight_getDirection);
    oluacls_func(L, "getDirectionInWorld", _cocos2d_DirectionLight_getDirectionInWorld);
    oluacls_func(L, "new", _cocos2d_DirectionLight_new);
    oluacls_func(L, "setDirection", _cocos2d_DirectionLight_setDirection);
    oluacls_prop(L, "direction", _cocos2d_DirectionLight_getDirection, _cocos2d_DirectionLight_setDirection);
    oluacls_prop(L, "directionInWorld", _cocos2d_DirectionLight_getDirectionInWorld, nullptr);

    olua_registerluatype<cocos2d::DirectionLight>(L, "cc.DirectionLight");

    return 1;
}

static int _cocos2d_PointLight___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::PointLight *)olua_toobj(L, 1, "cc.PointLight");
    olua_push_cppobj(L, self, "cc.PointLight");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_PointLight_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vec3 arg1;       /** position */
    cocos2d::Color3B arg2;       /** color */
    lua_Number arg3 = 0;       /** range */

    auto_olua_check_cocos2d_Vec3(L, 1, &arg1);
    manual_olua_check_cocos2d_Color3B(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::PointLight *create(const cocos2d::Vec3 &position, const cocos2d::Color3B &color, float range)
    cocos2d::PointLight *ret = (cocos2d::PointLight *)cocos2d::PointLight::create(arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.PointLight");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointLight_getRange(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointLight");

    // float getRange()
    float ret = (float)self->getRange();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointLight_new(lua_State *L)
{
    olua_startinvoke(L);

    // PointLight()
    cocos2d::PointLight *ret = (cocos2d::PointLight *)new cocos2d::PointLight();
    int num_ret = olua_push_cppobj(L, ret, "cc.PointLight");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_PointLight_setRange(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointLight *self = nullptr;
    lua_Number arg1 = 0;       /** range */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointLight");
    olua_check_number(L, 2, &arg1);

    // void setRange(float range)
    self->setRange((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_PointLight(lua_State *L)
{
    oluacls_class(L, "cc.PointLight", "cc.BaseLight");
    oluacls_func(L, "__move", _cocos2d_PointLight___move);
    oluacls_func(L, "create", _cocos2d_PointLight_create);
    oluacls_func(L, "getRange", _cocos2d_PointLight_getRange);
    oluacls_func(L, "new", _cocos2d_PointLight_new);
    oluacls_func(L, "setRange", _cocos2d_PointLight_setRange);
    oluacls_prop(L, "range", _cocos2d_PointLight_getRange, _cocos2d_PointLight_setRange);

    olua_registerluatype<cocos2d::PointLight>(L, "cc.PointLight");

    return 1;
}

static int _cocos2d_SpotLight___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::SpotLight *)olua_toobj(L, 1, "cc.SpotLight");
    olua_push_cppobj(L, self, "cc.SpotLight");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_SpotLight_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vec3 arg1;       /** direction */
    cocos2d::Vec3 arg2;       /** position */
    cocos2d::Color3B arg3;       /** color */
    lua_Number arg4 = 0;       /** innerAngle */
    lua_Number arg5 = 0;       /** outerAngle */
    lua_Number arg6 = 0;       /** range */

    auto_olua_check_cocos2d_Vec3(L, 1, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 2, &arg2);
    manual_olua_check_cocos2d_Color3B(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);
    olua_check_number(L, 6, &arg6);

    // static cocos2d::SpotLight *create(const cocos2d::Vec3 &direction, const cocos2d::Vec3 &position, const cocos2d::Color3B &color, float innerAngle, float outerAngle, float range)
    cocos2d::SpotLight *ret = (cocos2d::SpotLight *)cocos2d::SpotLight::create(arg1, arg2, arg3, (float)arg4, (float)arg5, (float)arg6);
    int num_ret = olua_push_cppobj(L, ret, "cc.SpotLight");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpotLight_getCosInnerAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getCosInnerAngle()
    float ret = (float)self->getCosInnerAngle();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpotLight_getCosOuterAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getCosOuterAngle()
    float ret = (float)self->getCosOuterAngle();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpotLight_getDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // cocos2d::Vec3 getDirection()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getDirection();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpotLight_getDirectionInWorld(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // cocos2d::Vec3 getDirectionInWorld()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getDirectionInWorld();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpotLight_getInnerAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getInnerAngle()
    float ret = (float)self->getInnerAngle();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpotLight_getOuterAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getOuterAngle()
    float ret = (float)self->getOuterAngle();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpotLight_getRange(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getRange()
    float ret = (float)self->getRange();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpotLight_new(lua_State *L)
{
    olua_startinvoke(L);

    // SpotLight()
    cocos2d::SpotLight *ret = (cocos2d::SpotLight *)new cocos2d::SpotLight();
    int num_ret = olua_push_cppobj(L, ret, "cc.SpotLight");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SpotLight_setDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;
    cocos2d::Vec3 arg1;       /** dir */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // void setDirection(const cocos2d::Vec3 &dir)
    self->setDirection(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpotLight_setInnerAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;
    lua_Number arg1 = 0;       /** angle */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");
    olua_check_number(L, 2, &arg1);

    // void setInnerAngle(float angle)
    self->setInnerAngle((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpotLight_setOuterAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;
    lua_Number arg1 = 0;       /** outerAngle */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");
    olua_check_number(L, 2, &arg1);

    // void setOuterAngle(float outerAngle)
    self->setOuterAngle((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_SpotLight_setRange(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;
    lua_Number arg1 = 0;       /** range */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");
    olua_check_number(L, 2, &arg1);

    // void setRange(float range)
    self->setRange((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_SpotLight(lua_State *L)
{
    oluacls_class(L, "cc.SpotLight", "cc.BaseLight");
    oluacls_func(L, "__move", _cocos2d_SpotLight___move);
    oluacls_func(L, "create", _cocos2d_SpotLight_create);
    oluacls_func(L, "getCosInnerAngle", _cocos2d_SpotLight_getCosInnerAngle);
    oluacls_func(L, "getCosOuterAngle", _cocos2d_SpotLight_getCosOuterAngle);
    oluacls_func(L, "getDirection", _cocos2d_SpotLight_getDirection);
    oluacls_func(L, "getDirectionInWorld", _cocos2d_SpotLight_getDirectionInWorld);
    oluacls_func(L, "getInnerAngle", _cocos2d_SpotLight_getInnerAngle);
    oluacls_func(L, "getOuterAngle", _cocos2d_SpotLight_getOuterAngle);
    oluacls_func(L, "getRange", _cocos2d_SpotLight_getRange);
    oluacls_func(L, "new", _cocos2d_SpotLight_new);
    oluacls_func(L, "setDirection", _cocos2d_SpotLight_setDirection);
    oluacls_func(L, "setInnerAngle", _cocos2d_SpotLight_setInnerAngle);
    oluacls_func(L, "setOuterAngle", _cocos2d_SpotLight_setOuterAngle);
    oluacls_func(L, "setRange", _cocos2d_SpotLight_setRange);
    oluacls_prop(L, "cosInnerAngle", _cocos2d_SpotLight_getCosInnerAngle, nullptr);
    oluacls_prop(L, "cosOuterAngle", _cocos2d_SpotLight_getCosOuterAngle, nullptr);
    oluacls_prop(L, "direction", _cocos2d_SpotLight_getDirection, _cocos2d_SpotLight_setDirection);
    oluacls_prop(L, "directionInWorld", _cocos2d_SpotLight_getDirectionInWorld, nullptr);
    oluacls_prop(L, "innerAngle", _cocos2d_SpotLight_getInnerAngle, _cocos2d_SpotLight_setInnerAngle);
    oluacls_prop(L, "outerAngle", _cocos2d_SpotLight_getOuterAngle, _cocos2d_SpotLight_setOuterAngle);
    oluacls_prop(L, "range", _cocos2d_SpotLight_getRange, _cocos2d_SpotLight_setRange);

    olua_registerluatype<cocos2d::SpotLight>(L, "cc.SpotLight");

    return 1;
}

static int _cocos2d_AmbientLight___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::AmbientLight *)olua_toobj(L, 1, "cc.AmbientLight");
    olua_push_cppobj(L, self, "cc.AmbientLight");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_AmbientLight_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color3B arg1;       /** color */

    manual_olua_check_cocos2d_Color3B(L, 1, &arg1);

    // static cocos2d::AmbientLight *create(const cocos2d::Color3B &color)
    cocos2d::AmbientLight *ret = (cocos2d::AmbientLight *)cocos2d::AmbientLight::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.AmbientLight");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AmbientLight_new(lua_State *L)
{
    olua_startinvoke(L);

    // AmbientLight()
    cocos2d::AmbientLight *ret = (cocos2d::AmbientLight *)new cocos2d::AmbientLight();
    int num_ret = olua_push_cppobj(L, ret, "cc.AmbientLight");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_AmbientLight(lua_State *L)
{
    oluacls_class(L, "cc.AmbientLight", "cc.BaseLight");
    oluacls_func(L, "__move", _cocos2d_AmbientLight___move);
    oluacls_func(L, "create", _cocos2d_AmbientLight_create);
    oluacls_func(L, "new", _cocos2d_AmbientLight_new);

    olua_registerluatype<cocos2d::AmbientLight>(L, "cc.AmbientLight");

    return 1;
}

static int luaopen_cocos2d_CameraFlag(lua_State *L)
{
    oluacls_class(L, "cc.CameraFlag", nullptr);
    oluacls_const_integer(L, "DEFAULT", (lua_Integer)cocos2d::CameraFlag::DEFAULT);
    oluacls_const_integer(L, "USER1", (lua_Integer)cocos2d::CameraFlag::USER1);
    oluacls_const_integer(L, "USER2", (lua_Integer)cocos2d::CameraFlag::USER2);
    oluacls_const_integer(L, "USER3", (lua_Integer)cocos2d::CameraFlag::USER3);
    oluacls_const_integer(L, "USER4", (lua_Integer)cocos2d::CameraFlag::USER4);
    oluacls_const_integer(L, "USER5", (lua_Integer)cocos2d::CameraFlag::USER5);
    oluacls_const_integer(L, "USER6", (lua_Integer)cocos2d::CameraFlag::USER6);
    oluacls_const_integer(L, "USER7", (lua_Integer)cocos2d::CameraFlag::USER7);
    oluacls_const_integer(L, "USER8", (lua_Integer)cocos2d::CameraFlag::USER8);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_Camera_Type(lua_State *L)
{
    oluacls_class(L, "cc.Camera.Type", nullptr);
    oluacls_const_integer(L, "ORTHOGRAPHIC", (lua_Integer)cocos2d::Camera::Type::ORTHOGRAPHIC);
    oluacls_const_integer(L, "PERSPECTIVE", (lua_Integer)cocos2d::Camera::Type::PERSPECTIVE);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_Camera___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Camera *)olua_toobj(L, 1, "cc.Camera");
    olua_push_cppobj(L, self, "cc.Camera");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Camera_apply(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // void apply()
    self->apply();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_applyFrameBufferObject(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // void applyFrameBufferObject()
    self->applyFrameBufferObject();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_applyViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // void applyViewport()
    self->applyViewport();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_clearBackground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // void clearBackground()
    self->clearBackground();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Camera *create()
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_createOrthographic(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** zoomX */
    lua_Number arg2 = 0;       /** zoomY */
    lua_Number arg3 = 0;       /** nearPlane */
    lua_Number arg4 = 0;       /** farPlane */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::Camera *createOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::createOrthographic((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_createPerspective(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** fieldOfView */
    lua_Number arg2 = 0;       /** aspectRatio */
    lua_Number arg3 = 0;       /** nearPlane */
    lua_Number arg4 = 0;       /** farPlane */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::Camera *createPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::createPerspective((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getBackgroundBrush(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // cocos2d::CameraBackgroundBrush *getBackgroundBrush()
    cocos2d::CameraBackgroundBrush *ret = (cocos2d::CameraBackgroundBrush *)self->getBackgroundBrush();
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getCameraFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // cocos2d::CameraFlag getCameraFlag()
    cocos2d::CameraFlag ret = (cocos2d::CameraFlag)self->getCameraFlag();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getDefaultCamera(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Camera *getDefaultCamera()
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::getDefaultCamera();
    int num_ret = olua_push_cppobj(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getDefaultViewport(lua_State *L)
{
    olua_startinvoke(L);

    // static const experimental::Viewport &getDefaultViewport()
    const cocos2d::experimental::Viewport &ret = (const cocos2d::experimental::Viewport &)cocos2d::Camera::getDefaultViewport();
    int num_ret = auto_olua_push_cocos2d_experimental_Viewport(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // int8_t getDepth()
    int8_t ret = (int8_t)self->getDepth();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getDepthInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Mat4 arg1;       /** transform */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);

    // float getDepthInView(const cocos2d::Mat4 &transform)
    float ret = (float)self->getDepthInView(arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getFarPlane(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // float getFarPlane()
    float ret = (float)self->getFarPlane();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getNearPlane(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // float getNearPlane()
    float ret = (float)self->getNearPlane();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getProjectionMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // const cocos2d::Mat4 &getProjectionMatrix()
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getProjectionMatrix();
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getRenderOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // int getRenderOrder()
    int ret = (int)self->getRenderOrder();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // Camera::Type getType()
    cocos2d::Camera::Type ret = (cocos2d::Camera::Type)self->getType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getViewMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // const cocos2d::Mat4 &getViewMatrix()
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getViewMatrix();
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getViewProjectionMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // const cocos2d::Mat4 &getViewProjectionMatrix()
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getViewProjectionMatrix();
    int num_ret = manual_olua_push_cocos2d_Mat4(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_getVisitingCamera(lua_State *L)
{
    olua_startinvoke(L);

    // static const cocos2d::Camera *getVisitingCamera()
    const cocos2d::Camera *ret = (const cocos2d::Camera *)cocos2d::Camera::getVisitingCamera();
    int num_ret = olua_push_cppobj(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_initDefault(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // bool initDefault()
    bool ret = (bool)self->initDefault();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_initOrthographic(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    lua_Number arg1 = 0;       /** zoomX */
    lua_Number arg2 = 0;       /** zoomY */
    lua_Number arg3 = 0;       /** nearPlane */
    lua_Number arg4 = 0;       /** farPlane */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // bool initOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)
    bool ret = (bool)self->initOrthographic((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_initPerspective(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    lua_Number arg1 = 0;       /** fieldOfView */
    lua_Number arg2 = 0;       /** aspectRatio */
    lua_Number arg3 = 0;       /** nearPlane */
    lua_Number arg4 = 0;       /** farPlane */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // bool initPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)
    bool ret = (bool)self->initPerspective((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_isBrushValid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // bool isBrushValid()
    bool ret = (bool)self->isBrushValid();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_isViewProjectionUpdated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // bool isViewProjectionUpdated()
    bool ret = (bool)self->isViewProjectionUpdated();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_lookAt1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 arg1;       /** target */
    cocos2d::Vec3 arg2;       /** up */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 3, &arg2);

    // void lookAt(const cocos2d::Vec3 &target, @optional const cocos2d::Vec3 &up)
    self->lookAt(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_lookAt2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 arg1;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // void lookAt(const cocos2d::Vec3 &target, @optional const cocos2d::Vec3 &up)
    self->lookAt(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_lookAt(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Vec3(L, 2))) {
            // void lookAt(const cocos2d::Vec3 &target, @optional const cocos2d::Vec3 &up)
            return _cocos2d_Camera_lookAt2(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_is_cocos2d_Vec3(L, 2)) && (auto_olua_is_cocos2d_Vec3(L, 3))) {
            // void lookAt(const cocos2d::Vec3 &target, @optional const cocos2d::Vec3 &up)
            return _cocos2d_Camera_lookAt1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Camera::lookAt' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Camera_new(lua_State *L)
{
    olua_startinvoke(L);

    // Camera()
    cocos2d::Camera *ret = (cocos2d::Camera *)new cocos2d::Camera();
    int num_ret = olua_push_cppobj(L, ret, "cc.Camera");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_project(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 arg1;       /** src */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // cocos2d::Vec2 project(const cocos2d::Vec3 &src)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->project(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_projectGL(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 arg1;       /** src */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // cocos2d::Vec2 projectGL(const cocos2d::Vec3 &src)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->projectGL(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_restore(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // void restore()
    self->restore();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_restoreFrameBufferObject(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // void restoreFrameBufferObject()
    self->restoreFrameBufferObject();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_restoreViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");

    // void restoreViewport()
    self->restoreViewport();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_setAdditionalProjection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Mat4 arg1;       /** mat */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    manual_olua_check_cocos2d_Mat4(L, 2, &arg1);

    // void setAdditionalProjection(const cocos2d::Mat4 &mat)
    self->setAdditionalProjection(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_setBackgroundBrush(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::CameraBackgroundBrush *arg1 = nullptr;       /** clearBrush */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.CameraBackgroundBrush");

    // void setBackgroundBrush(cocos2d::CameraBackgroundBrush *clearBrush)
    self->setBackgroundBrush(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_setCameraFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    lua_Unsigned arg1 = 0;       /** flag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    olua_check_uint(L, 2, &arg1);

    // void setCameraFlag(cocos2d::CameraFlag flag)
    self->setCameraFlag((cocos2d::CameraFlag)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_setDefaultViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::experimental::Viewport arg1;       /** vp */

    auto_olua_check_cocos2d_experimental_Viewport(L, 1, &arg1);

    // static void setDefaultViewport(const experimental::Viewport &vp)
    cocos2d::Camera::setDefaultViewport(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_setDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    lua_Integer arg1 = 0;       /** depth */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    olua_check_int(L, 2, &arg1);

    // void setDepth(int8_t depth)
    self->setDepth((int8_t)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_setScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");

    // void setScene(cocos2d::Scene *scene)
    self->setScene(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_setViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::experimental::Viewport arg1;       /** vp */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    auto_olua_check_cocos2d_experimental_Viewport(L, 2, &arg1);

    // void setViewport(const experimental::Viewport &vp)
    self->setViewport(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Camera_unproject(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 arg1;       /** src */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // cocos2d::Vec3 unproject(const cocos2d::Vec3 &src)
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->unproject(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Camera_unprojectGL(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 arg1;       /** src */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Camera");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // cocos2d::Vec3 unprojectGL(const cocos2d::Vec3 &src)
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->unprojectGL(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Camera(lua_State *L)
{
    oluacls_class(L, "cc.Camera", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_Camera___move);
    oluacls_func(L, "apply", _cocos2d_Camera_apply);
    oluacls_func(L, "applyFrameBufferObject", _cocos2d_Camera_applyFrameBufferObject);
    oluacls_func(L, "applyViewport", _cocos2d_Camera_applyViewport);
    oluacls_func(L, "clearBackground", _cocos2d_Camera_clearBackground);
    oluacls_func(L, "create", _cocos2d_Camera_create);
    oluacls_func(L, "createOrthographic", _cocos2d_Camera_createOrthographic);
    oluacls_func(L, "createPerspective", _cocos2d_Camera_createPerspective);
    oluacls_func(L, "getBackgroundBrush", _cocos2d_Camera_getBackgroundBrush);
    oluacls_func(L, "getCameraFlag", _cocos2d_Camera_getCameraFlag);
    oluacls_func(L, "getDefaultCamera", _cocos2d_Camera_getDefaultCamera);
    oluacls_func(L, "getDefaultViewport", _cocos2d_Camera_getDefaultViewport);
    oluacls_func(L, "getDepth", _cocos2d_Camera_getDepth);
    oluacls_func(L, "getDepthInView", _cocos2d_Camera_getDepthInView);
    oluacls_func(L, "getFarPlane", _cocos2d_Camera_getFarPlane);
    oluacls_func(L, "getNearPlane", _cocos2d_Camera_getNearPlane);
    oluacls_func(L, "getProjectionMatrix", _cocos2d_Camera_getProjectionMatrix);
    oluacls_func(L, "getRenderOrder", _cocos2d_Camera_getRenderOrder);
    oluacls_func(L, "getType", _cocos2d_Camera_getType);
    oluacls_func(L, "getViewMatrix", _cocos2d_Camera_getViewMatrix);
    oluacls_func(L, "getViewProjectionMatrix", _cocos2d_Camera_getViewProjectionMatrix);
    oluacls_func(L, "getVisitingCamera", _cocos2d_Camera_getVisitingCamera);
    oluacls_func(L, "initDefault", _cocos2d_Camera_initDefault);
    oluacls_func(L, "initOrthographic", _cocos2d_Camera_initOrthographic);
    oluacls_func(L, "initPerspective", _cocos2d_Camera_initPerspective);
    oluacls_func(L, "isBrushValid", _cocos2d_Camera_isBrushValid);
    oluacls_func(L, "isViewProjectionUpdated", _cocos2d_Camera_isViewProjectionUpdated);
    oluacls_func(L, "lookAt", _cocos2d_Camera_lookAt);
    oluacls_func(L, "new", _cocos2d_Camera_new);
    oluacls_func(L, "project", _cocos2d_Camera_project);
    oluacls_func(L, "projectGL", _cocos2d_Camera_projectGL);
    oluacls_func(L, "restore", _cocos2d_Camera_restore);
    oluacls_func(L, "restoreFrameBufferObject", _cocos2d_Camera_restoreFrameBufferObject);
    oluacls_func(L, "restoreViewport", _cocos2d_Camera_restoreViewport);
    oluacls_func(L, "setAdditionalProjection", _cocos2d_Camera_setAdditionalProjection);
    oluacls_func(L, "setBackgroundBrush", _cocos2d_Camera_setBackgroundBrush);
    oluacls_func(L, "setCameraFlag", _cocos2d_Camera_setCameraFlag);
    oluacls_func(L, "setDefaultViewport", _cocos2d_Camera_setDefaultViewport);
    oluacls_func(L, "setDepth", _cocos2d_Camera_setDepth);
    oluacls_func(L, "setScene", _cocos2d_Camera_setScene);
    oluacls_func(L, "setViewport", _cocos2d_Camera_setViewport);
    oluacls_func(L, "unproject", _cocos2d_Camera_unproject);
    oluacls_func(L, "unprojectGL", _cocos2d_Camera_unprojectGL);
    oluacls_prop(L, "backgroundBrush", _cocos2d_Camera_getBackgroundBrush, _cocos2d_Camera_setBackgroundBrush);
    oluacls_prop(L, "brushValid", _cocos2d_Camera_isBrushValid, nullptr);
    oluacls_prop(L, "cameraFlag", _cocos2d_Camera_getCameraFlag, _cocos2d_Camera_setCameraFlag);
    oluacls_prop(L, "defaultCamera", _cocos2d_Camera_getDefaultCamera, nullptr);
    oluacls_prop(L, "defaultViewport", _cocos2d_Camera_getDefaultViewport, _cocos2d_Camera_setDefaultViewport);
    oluacls_prop(L, "depth", _cocos2d_Camera_getDepth, _cocos2d_Camera_setDepth);
    oluacls_prop(L, "farPlane", _cocos2d_Camera_getFarPlane, nullptr);
    oluacls_prop(L, "nearPlane", _cocos2d_Camera_getNearPlane, nullptr);
    oluacls_prop(L, "projectionMatrix", _cocos2d_Camera_getProjectionMatrix, nullptr);
    oluacls_prop(L, "renderOrder", _cocos2d_Camera_getRenderOrder, nullptr);
    oluacls_prop(L, "type", _cocos2d_Camera_getType, nullptr);
    oluacls_prop(L, "viewMatrix", _cocos2d_Camera_getViewMatrix, nullptr);
    oluacls_prop(L, "viewProjectionMatrix", _cocos2d_Camera_getViewProjectionMatrix, nullptr);
    oluacls_prop(L, "viewProjectionUpdated", _cocos2d_Camera_isViewProjectionUpdated, nullptr);
    oluacls_prop(L, "visitingCamera", _cocos2d_Camera_getVisitingCamera, nullptr);

    olua_registerluatype<cocos2d::Camera>(L, "cc.Camera");

    return 1;
}

static int luaopen_cocos2d_CameraBackgroundBrush_BrushType(lua_State *L)
{
    oluacls_class(L, "cc.CameraBackgroundBrush.BrushType", nullptr);
    oluacls_const_integer(L, "COLOR", (lua_Integer)cocos2d::CameraBackgroundBrush::BrushType::COLOR);
    oluacls_const_integer(L, "DEPTH", (lua_Integer)cocos2d::CameraBackgroundBrush::BrushType::DEPTH);
    oluacls_const_integer(L, "NONE", (lua_Integer)cocos2d::CameraBackgroundBrush::BrushType::NONE);
    oluacls_const_integer(L, "SKYBOX", (lua_Integer)cocos2d::CameraBackgroundBrush::BrushType::SKYBOX);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_CameraBackgroundBrush___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CameraBackgroundBrush *)olua_toobj(L, 1, "cc.CameraBackgroundBrush");
    olua_push_cppobj(L, self, "cc.CameraBackgroundBrush");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_CameraBackgroundBrush_createColorBrush(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4F arg1;       /** color */
    lua_Number arg2 = 0;       /** depth */

    manual_olua_check_cocos2d_Color4F(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::CameraBackgroundColorBrush *createColorBrush(const cocos2d::Color4F &color, float depth)
    cocos2d::CameraBackgroundColorBrush *ret = (cocos2d::CameraBackgroundColorBrush *)cocos2d::CameraBackgroundBrush::createColorBrush(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundColorBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundBrush_createDepthBrush1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** depth */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::CameraBackgroundDepthBrush *createDepthBrush(@optional float depth)
    cocos2d::CameraBackgroundDepthBrush *ret = (cocos2d::CameraBackgroundDepthBrush *)cocos2d::CameraBackgroundBrush::createDepthBrush((float)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundDepthBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundBrush_createDepthBrush2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::CameraBackgroundDepthBrush *createDepthBrush(@optional float depth)
    cocos2d::CameraBackgroundDepthBrush *ret = (cocos2d::CameraBackgroundDepthBrush *)cocos2d::CameraBackgroundBrush::createDepthBrush();
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundDepthBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundBrush_createDepthBrush(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::CameraBackgroundDepthBrush *createDepthBrush(@optional float depth)
        return _cocos2d_CameraBackgroundBrush_createDepthBrush2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_number(L, 1))) {
            // static cocos2d::CameraBackgroundDepthBrush *createDepthBrush(@optional float depth)
            return _cocos2d_CameraBackgroundBrush_createDepthBrush1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::CameraBackgroundBrush::createDepthBrush' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_CameraBackgroundBrush_createNoneBrush(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::CameraBackgroundBrush *createNoneBrush()
    cocos2d::CameraBackgroundBrush *ret = (cocos2d::CameraBackgroundBrush *)cocos2d::CameraBackgroundBrush::createNoneBrush();
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundBrush_createSkyboxBrush(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** positive_x */
    std::string arg2;       /** negative_x */
    std::string arg3;       /** positive_y */
    std::string arg4;       /** negative_y */
    std::string arg5;       /** positive_z */
    std::string arg6;       /** negative_z */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);
    olua_check_std_string(L, 5, &arg5);
    olua_check_std_string(L, 6, &arg6);

    // static cocos2d::CameraBackgroundSkyBoxBrush *createSkyboxBrush(const std::string &positive_x, const std::string &negative_x, const std::string &positive_y, const std::string &negative_y, const std::string &positive_z, const std::string &negative_z)
    cocos2d::CameraBackgroundSkyBoxBrush *ret = (cocos2d::CameraBackgroundSkyBoxBrush *)cocos2d::CameraBackgroundBrush::createSkyboxBrush(arg1, arg2, arg3, arg4, arg5, arg6);
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundSkyBoxBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundBrush_drawBackground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundBrush *self = nullptr;
    cocos2d::Camera *arg1 = nullptr;       /**  */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundBrush");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Camera");

    // void drawBackground(cocos2d::Camera *)
    self->drawBackground(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_CameraBackgroundBrush_getBrushType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundBrush *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundBrush");

    // cocos2d::CameraBackgroundBrush::BrushType getBrushType()
    cocos2d::CameraBackgroundBrush::BrushType ret = (cocos2d::CameraBackgroundBrush::BrushType)self->getBrushType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundBrush_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundBrush *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundBrush");

    // bool init()
    bool ret = (bool)self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundBrush_isValid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundBrush *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundBrush");

    // bool isValid()
    bool ret = (bool)self->isValid();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundBrush_new(lua_State *L)
{
    olua_startinvoke(L);

    // CameraBackgroundBrush()
    cocos2d::CameraBackgroundBrush *ret = (cocos2d::CameraBackgroundBrush *)new cocos2d::CameraBackgroundBrush();
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundBrush");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_CameraBackgroundBrush(lua_State *L)
{
    oluacls_class(L, "cc.CameraBackgroundBrush", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_CameraBackgroundBrush___move);
    oluacls_func(L, "createColorBrush", _cocos2d_CameraBackgroundBrush_createColorBrush);
    oluacls_func(L, "createDepthBrush", _cocos2d_CameraBackgroundBrush_createDepthBrush);
    oluacls_func(L, "createNoneBrush", _cocos2d_CameraBackgroundBrush_createNoneBrush);
    oluacls_func(L, "createSkyboxBrush", _cocos2d_CameraBackgroundBrush_createSkyboxBrush);
    oluacls_func(L, "drawBackground", _cocos2d_CameraBackgroundBrush_drawBackground);
    oluacls_func(L, "getBrushType", _cocos2d_CameraBackgroundBrush_getBrushType);
    oluacls_func(L, "init", _cocos2d_CameraBackgroundBrush_init);
    oluacls_func(L, "isValid", _cocos2d_CameraBackgroundBrush_isValid);
    oluacls_func(L, "new", _cocos2d_CameraBackgroundBrush_new);
    oluacls_prop(L, "brushType", _cocos2d_CameraBackgroundBrush_getBrushType, nullptr);
    oluacls_prop(L, "valid", _cocos2d_CameraBackgroundBrush_isValid, nullptr);

    olua_registerluatype<cocos2d::CameraBackgroundBrush>(L, "cc.CameraBackgroundBrush");

    return 1;
}

static int _cocos2d_CameraBackgroundDepthBrush___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CameraBackgroundDepthBrush *)olua_toobj(L, 1, "cc.CameraBackgroundDepthBrush");
    olua_push_cppobj(L, self, "cc.CameraBackgroundDepthBrush");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_CameraBackgroundDepthBrush_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** depth */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::CameraBackgroundDepthBrush *create(float depth)
    cocos2d::CameraBackgroundDepthBrush *ret = (cocos2d::CameraBackgroundDepthBrush *)cocos2d::CameraBackgroundDepthBrush::create((float)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundDepthBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundDepthBrush_new(lua_State *L)
{
    olua_startinvoke(L);

    // CameraBackgroundDepthBrush()
    cocos2d::CameraBackgroundDepthBrush *ret = (cocos2d::CameraBackgroundDepthBrush *)new cocos2d::CameraBackgroundDepthBrush();
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundDepthBrush");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundDepthBrush_setDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundDepthBrush *self = nullptr;
    lua_Number arg1 = 0;       /** depth */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundDepthBrush");
    olua_check_number(L, 2, &arg1);

    // void setDepth(float depth)
    self->setDepth((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_CameraBackgroundDepthBrush(lua_State *L)
{
    oluacls_class(L, "cc.CameraBackgroundDepthBrush", "cc.CameraBackgroundBrush");
    oluacls_func(L, "__move", _cocos2d_CameraBackgroundDepthBrush___move);
    oluacls_func(L, "create", _cocos2d_CameraBackgroundDepthBrush_create);
    oluacls_func(L, "new", _cocos2d_CameraBackgroundDepthBrush_new);
    oluacls_func(L, "setDepth", _cocos2d_CameraBackgroundDepthBrush_setDepth);

    olua_registerluatype<cocos2d::CameraBackgroundDepthBrush>(L, "cc.CameraBackgroundDepthBrush");

    return 1;
}

static int _cocos2d_CameraBackgroundColorBrush___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CameraBackgroundColorBrush *)olua_toobj(L, 1, "cc.CameraBackgroundColorBrush");
    olua_push_cppobj(L, self, "cc.CameraBackgroundColorBrush");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_CameraBackgroundColorBrush_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4F arg1;       /** color */
    lua_Number arg2 = 0;       /** depth */

    manual_olua_check_cocos2d_Color4F(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::CameraBackgroundColorBrush *create(const cocos2d::Color4F &color, float depth)
    cocos2d::CameraBackgroundColorBrush *ret = (cocos2d::CameraBackgroundColorBrush *)cocos2d::CameraBackgroundColorBrush::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundColorBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundColorBrush_new(lua_State *L)
{
    olua_startinvoke(L);

    // CameraBackgroundColorBrush()
    cocos2d::CameraBackgroundColorBrush *ret = (cocos2d::CameraBackgroundColorBrush *)new cocos2d::CameraBackgroundColorBrush();
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundColorBrush");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundColorBrush_setColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundColorBrush *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundColorBrush");
    manual_olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setColor(const cocos2d::Color4F &color)
    self->setColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_CameraBackgroundColorBrush(lua_State *L)
{
    oluacls_class(L, "cc.CameraBackgroundColorBrush", "cc.CameraBackgroundDepthBrush");
    oluacls_func(L, "__move", _cocos2d_CameraBackgroundColorBrush___move);
    oluacls_func(L, "create", _cocos2d_CameraBackgroundColorBrush_create);
    oluacls_func(L, "new", _cocos2d_CameraBackgroundColorBrush_new);
    oluacls_func(L, "setColor", _cocos2d_CameraBackgroundColorBrush_setColor);

    olua_registerluatype<cocos2d::CameraBackgroundColorBrush>(L, "cc.CameraBackgroundColorBrush");

    return 1;
}

static int _cocos2d_CameraBackgroundSkyBoxBrush___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CameraBackgroundSkyBoxBrush *)olua_toobj(L, 1, "cc.CameraBackgroundSkyBoxBrush");
    olua_push_cppobj(L, self, "cc.CameraBackgroundSkyBoxBrush");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_CameraBackgroundSkyBoxBrush_create1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** positive_x */
    std::string arg2;       /** negative_x */
    std::string arg3;       /** positive_y */
    std::string arg4;       /** negative_y */
    std::string arg5;       /** positive_z */
    std::string arg6;       /** negative_z */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);
    olua_check_std_string(L, 5, &arg5);
    olua_check_std_string(L, 6, &arg6);

    // static cocos2d::CameraBackgroundSkyBoxBrush *create(const std::string &positive_x, const std::string &negative_x, const std::string &positive_y, const std::string &negative_y, const std::string &positive_z, const std::string &negative_z)
    cocos2d::CameraBackgroundSkyBoxBrush *ret = (cocos2d::CameraBackgroundSkyBoxBrush *)cocos2d::CameraBackgroundSkyBoxBrush::create(arg1, arg2, arg3, arg4, arg5, arg6);
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundSkyBoxBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundSkyBoxBrush_create2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::CameraBackgroundSkyBoxBrush *create()
    cocos2d::CameraBackgroundSkyBoxBrush *ret = (cocos2d::CameraBackgroundSkyBoxBrush *)cocos2d::CameraBackgroundSkyBoxBrush::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundSkyBoxBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundSkyBoxBrush_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::CameraBackgroundSkyBoxBrush *create()
        return _cocos2d_CameraBackgroundSkyBoxBrush_create2(L);
    }

    if (num_args == 6) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_std_string(L, 2)) && (olua_is_std_string(L, 3)) && (olua_is_std_string(L, 4)) && (olua_is_std_string(L, 5)) && (olua_is_std_string(L, 6))) {
            // static cocos2d::CameraBackgroundSkyBoxBrush *create(const std::string &positive_x, const std::string &negative_x, const std::string &positive_y, const std::string &negative_y, const std::string &positive_z, const std::string &negative_z)
            return _cocos2d_CameraBackgroundSkyBoxBrush_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::CameraBackgroundSkyBoxBrush::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_CameraBackgroundSkyBoxBrush_isActived(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundSkyBoxBrush *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundSkyBoxBrush");

    // bool isActived()
    bool ret = (bool)self->isActived();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundSkyBoxBrush_new(lua_State *L)
{
    olua_startinvoke(L);

    // CameraBackgroundSkyBoxBrush()
    cocos2d::CameraBackgroundSkyBoxBrush *ret = (cocos2d::CameraBackgroundSkyBoxBrush *)new cocos2d::CameraBackgroundSkyBoxBrush();
    int num_ret = olua_push_cppobj(L, ret, "cc.CameraBackgroundSkyBoxBrush");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_CameraBackgroundSkyBoxBrush_setActived(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundSkyBoxBrush *self = nullptr;
    bool arg1 = false;       /** actived */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundSkyBoxBrush");
    olua_check_bool(L, 2, &arg1);

    // void setActived(bool actived)
    self->setActived(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_CameraBackgroundSkyBoxBrush_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundSkyBoxBrush *self = nullptr;
    cocos2d::TextureCube *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundSkyBoxBrush");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextureCube");

    // void setTexture(cocos2d::TextureCube *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_CameraBackgroundSkyBoxBrush_setTextureValid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundSkyBoxBrush *self = nullptr;
    bool arg1 = false;       /** valid */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CameraBackgroundSkyBoxBrush");
    olua_check_bool(L, 2, &arg1);

    // void setTextureValid(bool valid)
    self->setTextureValid(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_CameraBackgroundSkyBoxBrush(lua_State *L)
{
    oluacls_class(L, "cc.CameraBackgroundSkyBoxBrush", "cc.CameraBackgroundBrush");
    oluacls_func(L, "__move", _cocos2d_CameraBackgroundSkyBoxBrush___move);
    oluacls_func(L, "create", _cocos2d_CameraBackgroundSkyBoxBrush_create);
    oluacls_func(L, "isActived", _cocos2d_CameraBackgroundSkyBoxBrush_isActived);
    oluacls_func(L, "new", _cocos2d_CameraBackgroundSkyBoxBrush_new);
    oluacls_func(L, "setActived", _cocos2d_CameraBackgroundSkyBoxBrush_setActived);
    oluacls_func(L, "setTexture", _cocos2d_CameraBackgroundSkyBoxBrush_setTexture);
    oluacls_func(L, "setTextureValid", _cocos2d_CameraBackgroundSkyBoxBrush_setTextureValid);
    oluacls_prop(L, "actived", _cocos2d_CameraBackgroundSkyBoxBrush_isActived, _cocos2d_CameraBackgroundSkyBoxBrush_setActived);

    olua_registerluatype<cocos2d::CameraBackgroundSkyBoxBrush>(L, "cc.CameraBackgroundSkyBoxBrush");

    return 1;
}

static int _cocos2d_ActionCamera___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ActionCamera *)olua_toobj(L, 1, "cc.ActionCamera");
    olua_push_cppobj(L, self, "cc.ActionCamera");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ActionCamera_getCenter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionCamera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");

    // const cocos2d::Vec3 &getCenter()
    const cocos2d::Vec3 &ret = (const cocos2d::Vec3 &)self->getCenter();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionCamera_getEye(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionCamera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");

    // const cocos2d::Vec3 &getEye()
    const cocos2d::Vec3 &ret = (const cocos2d::Vec3 &)self->getEye();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionCamera_getUp(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionCamera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");

    // const cocos2d::Vec3 &getUp()
    const cocos2d::Vec3 &ret = (const cocos2d::Vec3 &)self->getUp();
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionCamera_new(lua_State *L)
{
    olua_startinvoke(L);

    // ActionCamera()
    cocos2d::ActionCamera *ret = (cocos2d::ActionCamera *)new cocos2d::ActionCamera();
    int num_ret = olua_push_cppobj(L, ret, "cc.ActionCamera");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ActionCamera_setCenter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionCamera *self = nullptr;
    cocos2d::Vec3 arg1;       /** center */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // void setCenter(const cocos2d::Vec3 &center)
    self->setCenter(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionCamera_setEye1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionCamera *self = nullptr;
    cocos2d::Vec3 arg1;       /** eye */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // void setEye(const cocos2d::Vec3 &eye)
    self->setEye(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionCamera_setEye2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionCamera *self = nullptr;
    lua_Number arg1 = 0;       /** x */
    lua_Number arg2 = 0;       /** y */
    lua_Number arg3 = 0;       /** z */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setEye(float x, float y, float z)
    self->setEye((float)arg1, (float)arg2, (float)arg3);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ActionCamera_setEye(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Vec3(L, 2))) {
            // void setEye(const cocos2d::Vec3 &eye)
            return _cocos2d_ActionCamera_setEye1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4))) {
            // void setEye(float x, float y, float z)
            return _cocos2d_ActionCamera_setEye2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ActionCamera::setEye' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ActionCamera_setUp(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionCamera *self = nullptr;
    cocos2d::Vec3 arg1;       /** up */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");
    auto_olua_check_cocos2d_Vec3(L, 2, &arg1);

    // void setUp(const cocos2d::Vec3 &up)
    self->setUp(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ActionCamera(lua_State *L)
{
    oluacls_class(L, "cc.ActionCamera", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_ActionCamera___move);
    oluacls_func(L, "getCenter", _cocos2d_ActionCamera_getCenter);
    oluacls_func(L, "getEye", _cocos2d_ActionCamera_getEye);
    oluacls_func(L, "getUp", _cocos2d_ActionCamera_getUp);
    oluacls_func(L, "new", _cocos2d_ActionCamera_new);
    oluacls_func(L, "setCenter", _cocos2d_ActionCamera_setCenter);
    oluacls_func(L, "setEye", _cocos2d_ActionCamera_setEye);
    oluacls_func(L, "setUp", _cocos2d_ActionCamera_setUp);
    oluacls_prop(L, "center", _cocos2d_ActionCamera_getCenter, _cocos2d_ActionCamera_setCenter);
    oluacls_prop(L, "eye", _cocos2d_ActionCamera_getEye, _cocos2d_ActionCamera_setEye);
    oluacls_prop(L, "up", _cocos2d_ActionCamera_getUp, _cocos2d_ActionCamera_setUp);

    olua_registerluatype<cocos2d::ActionCamera>(L, "cc.ActionCamera");

    return 1;
}

static int _cocos2d_OrbitCamera___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::OrbitCamera *)olua_toobj(L, 1, "cc.OrbitCamera");
    olua_push_cppobj(L, self, "cc.OrbitCamera");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_OrbitCamera_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** t */
    lua_Number arg2 = 0;       /** radius */
    lua_Number arg3 = 0;       /** deltaRadius */
    lua_Number arg4 = 0;       /** angleZ */
    lua_Number arg5 = 0;       /** deltaAngleZ */
    lua_Number arg6 = 0;       /** angleX */
    lua_Number arg7 = 0;       /** deltaAngleX */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);
    olua_check_number(L, 6, &arg6);
    olua_check_number(L, 7, &arg7);

    // static cocos2d::OrbitCamera *create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
    cocos2d::OrbitCamera *ret = (cocos2d::OrbitCamera *)cocos2d::OrbitCamera::create((float)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5, (float)arg6, (float)arg7);
    int num_ret = olua_push_cppobj(L, ret, "cc.OrbitCamera");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_OrbitCamera_new(lua_State *L)
{
    olua_startinvoke(L);

    // OrbitCamera()
    cocos2d::OrbitCamera *ret = (cocos2d::OrbitCamera *)new cocos2d::OrbitCamera();
    int num_ret = olua_push_cppobj(L, ret, "cc.OrbitCamera");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_OrbitCamera(lua_State *L)
{
    oluacls_class(L, "cc.OrbitCamera", "cc.ActionCamera");
    oluacls_func(L, "__move", _cocos2d_OrbitCamera___move);
    oluacls_func(L, "create", _cocos2d_OrbitCamera_create);
    oluacls_func(L, "new", _cocos2d_OrbitCamera_new);

    olua_registerluatype<cocos2d::OrbitCamera>(L, "cc.OrbitCamera");

    return 1;
}

static int _cocos2d_GridBase___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::GridBase *)olua_toobj(L, 1, "cc.GridBase");
    olua_push_cppobj(L, self, "cc.GridBase");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_GridBase_afterBlit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // void afterBlit()
    self->afterBlit();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_afterDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void afterDraw(cocos2d::Node *target)
    self->afterDraw(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_beforeBlit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // void beforeBlit()
    self->beforeBlit();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_beforeDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // void beforeDraw()
    self->beforeDraw();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_blit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // void blit()
    self->blit();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_calculateVertexPoints(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // void calculateVertexPoints()
    self->calculateVertexPoints();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_create1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */
    bool arg3 = false;       /** flipped */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Texture2D");
    olua_check_bool(L, 3, &arg3);

    // static cocos2d::GridBase *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped)
    cocos2d::GridBase *ret = (cocos2d::GridBase *)cocos2d::GridBase::create(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.GridBase");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);

    // static cocos2d::GridBase *create(const cocos2d::Size &gridSize)
    cocos2d::GridBase *ret = (cocos2d::GridBase *)cocos2d::GridBase::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.GridBase");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Size(L, 1))) {
            // static cocos2d::GridBase *create(const cocos2d::Size &gridSize)
            return _cocos2d_GridBase_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((auto_olua_is_cocos2d_Size(L, 1)) && (olua_is_cppobj(L, 2, "cc.Texture2D")) && (olua_is_bool(L, 3))) {
            // static cocos2d::GridBase *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped)
            return _cocos2d_GridBase_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GridBase::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GridBase_getGridRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // const cocos2d::Rect &getGridRect()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getGridRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_getGridSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // const cocos2d::Size &getGridSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getGridSize();
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_getReuseGrid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // int getReuseGrid()
    int ret = (int)self->getReuseGrid();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_getStep(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // const cocos2d::Vec2 &getStep()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getStep();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_initWithSize1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    cocos2d::Size arg1;       /** gridSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);

    // bool initWithSize(const cocos2d::Size &gridSize)
    bool ret = (bool)self->initWithSize(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_initWithSize2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);

    // bool initWithSize(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithSize(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_initWithSize3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */
    bool arg3 = false;       /** flipped */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Texture2D");
    olua_check_bool(L, 4, &arg3);

    // bool initWithSize(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped)
    bool ret = (bool)self->initWithSize(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_initWithSize4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */
    bool arg3 = false;       /** flipped */
    cocos2d::Rect arg4;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Texture2D");
    olua_check_bool(L, 4, &arg3);
    manual_olua_check_cocos2d_Rect(L, 5, &arg4);

    // bool initWithSize(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped, const cocos2d::Rect &rect)
    bool ret = (bool)self->initWithSize(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_initWithSize(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Size(L, 2))) {
            // bool initWithSize(const cocos2d::Size &gridSize)
            return _cocos2d_GridBase_initWithSize1(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_is_cocos2d_Size(L, 2)) && (manual_olua_is_cocos2d_Rect(L, 3))) {
            // bool initWithSize(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)
            return _cocos2d_GridBase_initWithSize2(L);
        // }
    }

    if (num_args == 3) {
        // if ((auto_olua_is_cocos2d_Size(L, 2)) && (olua_is_cppobj(L, 3, "cc.Texture2D")) && (olua_is_bool(L, 4))) {
            // bool initWithSize(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped)
            return _cocos2d_GridBase_initWithSize3(L);
        // }
    }

    if (num_args == 4) {
        // if ((auto_olua_is_cocos2d_Size(L, 2)) && (olua_is_cppobj(L, 3, "cc.Texture2D")) && (olua_is_bool(L, 4)) && (manual_olua_is_cocos2d_Rect(L, 5))) {
            // bool initWithSize(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped, const cocos2d::Rect &rect)
            return _cocos2d_GridBase_initWithSize4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GridBase::initWithSize' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GridBase_isActive(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // bool isActive()
    bool ret = (bool)self->isActive();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_isTextureFlipped(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // bool isTextureFlipped()
    bool ret = (bool)self->isTextureFlipped();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridBase_reuse(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // void reuse()
    self->reuse();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_set2DProjection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");

    // void set2DProjection()
    self->set2DProjection();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_setActive(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    bool arg1 = false;       /** active */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    olua_check_bool(L, 2, &arg1);

    // void setActive(bool active)
    self->setActive(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_setGridRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setGridRect(const cocos2d::Rect &rect)
    self->setGridRect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_setGridSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    cocos2d::Size arg1;       /** gridSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);

    // void setGridSize(const cocos2d::Size &gridSize)
    self->setGridSize(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_setReuseGrid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    lua_Integer arg1 = 0;       /** reuseGrid */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    olua_check_int(L, 2, &arg1);

    // void setReuseGrid(int reuseGrid)
    self->setReuseGrid((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_setStep(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    cocos2d::Vec2 arg1;       /** step */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setStep(const cocos2d::Vec2 &step)
    self->setStep(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_GridBase_setTextureFlipped(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridBase *self = nullptr;
    bool arg1 = false;       /** flipped */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridBase");
    olua_check_bool(L, 2, &arg1);

    // void setTextureFlipped(bool flipped)
    self->setTextureFlipped(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_GridBase(lua_State *L)
{
    oluacls_class(L, "cc.GridBase", "cc.Ref");
    oluacls_func(L, "__move", _cocos2d_GridBase___move);
    oluacls_func(L, "afterBlit", _cocos2d_GridBase_afterBlit);
    oluacls_func(L, "afterDraw", _cocos2d_GridBase_afterDraw);
    oluacls_func(L, "beforeBlit", _cocos2d_GridBase_beforeBlit);
    oluacls_func(L, "beforeDraw", _cocos2d_GridBase_beforeDraw);
    oluacls_func(L, "blit", _cocos2d_GridBase_blit);
    oluacls_func(L, "calculateVertexPoints", _cocos2d_GridBase_calculateVertexPoints);
    oluacls_func(L, "create", _cocos2d_GridBase_create);
    oluacls_func(L, "getGridRect", _cocos2d_GridBase_getGridRect);
    oluacls_func(L, "getGridSize", _cocos2d_GridBase_getGridSize);
    oluacls_func(L, "getReuseGrid", _cocos2d_GridBase_getReuseGrid);
    oluacls_func(L, "getStep", _cocos2d_GridBase_getStep);
    oluacls_func(L, "initWithSize", _cocos2d_GridBase_initWithSize);
    oluacls_func(L, "isActive", _cocos2d_GridBase_isActive);
    oluacls_func(L, "isTextureFlipped", _cocos2d_GridBase_isTextureFlipped);
    oluacls_func(L, "reuse", _cocos2d_GridBase_reuse);
    oluacls_func(L, "set2DProjection", _cocos2d_GridBase_set2DProjection);
    oluacls_func(L, "setActive", _cocos2d_GridBase_setActive);
    oluacls_func(L, "setGridRect", _cocos2d_GridBase_setGridRect);
    oluacls_func(L, "setGridSize", _cocos2d_GridBase_setGridSize);
    oluacls_func(L, "setReuseGrid", _cocos2d_GridBase_setReuseGrid);
    oluacls_func(L, "setStep", _cocos2d_GridBase_setStep);
    oluacls_func(L, "setTextureFlipped", _cocos2d_GridBase_setTextureFlipped);
    oluacls_prop(L, "active", _cocos2d_GridBase_isActive, _cocos2d_GridBase_setActive);
    oluacls_prop(L, "gridRect", _cocos2d_GridBase_getGridRect, _cocos2d_GridBase_setGridRect);
    oluacls_prop(L, "gridSize", _cocos2d_GridBase_getGridSize, _cocos2d_GridBase_setGridSize);
    oluacls_prop(L, "reuseGrid", _cocos2d_GridBase_getReuseGrid, _cocos2d_GridBase_setReuseGrid);
    oluacls_prop(L, "step", _cocos2d_GridBase_getStep, _cocos2d_GridBase_setStep);
    oluacls_prop(L, "textureFlipped", _cocos2d_GridBase_isTextureFlipped, _cocos2d_GridBase_setTextureFlipped);

    olua_registerluatype<cocos2d::GridBase>(L, "cc.GridBase");

    return 1;
}

static int _cocos2d_Grid3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Grid3D *)olua_toobj(L, 1, "cc.Grid3D");
    olua_push_cppobj(L, self, "cc.Grid3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Grid3D_create1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);

    // static cocos2d::Grid3D *create(const cocos2d::Size &gridSize)
    cocos2d::Grid3D *ret = (cocos2d::Grid3D *)cocos2d::Grid3D::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.Grid3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3D_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Rect arg2;       /** rect */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);

    // static cocos2d::Grid3D *create(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)
    cocos2d::Grid3D *ret = (cocos2d::Grid3D *)cocos2d::Grid3D::create(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.Grid3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3D_create3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */
    bool arg3 = false;       /** flipped */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Texture2D");
    olua_check_bool(L, 3, &arg3);

    // static cocos2d::Grid3D *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped)
    cocos2d::Grid3D *ret = (cocos2d::Grid3D *)cocos2d::Grid3D::create(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.Grid3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3D_create4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */
    bool arg3 = false;       /** flipped */
    cocos2d::Rect arg4;       /** rect */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Texture2D");
    olua_check_bool(L, 3, &arg3);
    manual_olua_check_cocos2d_Rect(L, 4, &arg4);

    // static cocos2d::Grid3D *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped, const cocos2d::Rect &rect)
    cocos2d::Grid3D *ret = (cocos2d::Grid3D *)cocos2d::Grid3D::create(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Grid3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3D_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Size(L, 1))) {
            // static cocos2d::Grid3D *create(const cocos2d::Size &gridSize)
            return _cocos2d_Grid3D_create1(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_is_cocos2d_Size(L, 1)) && (manual_olua_is_cocos2d_Rect(L, 2))) {
            // static cocos2d::Grid3D *create(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)
            return _cocos2d_Grid3D_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((auto_olua_is_cocos2d_Size(L, 1)) && (olua_is_cppobj(L, 2, "cc.Texture2D")) && (olua_is_bool(L, 3))) {
            // static cocos2d::Grid3D *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped)
            return _cocos2d_Grid3D_create3(L);
        // }
    }

    if (num_args == 4) {
        // if ((auto_olua_is_cocos2d_Size(L, 1)) && (olua_is_cppobj(L, 2, "cc.Texture2D")) && (olua_is_bool(L, 3)) && (manual_olua_is_cocos2d_Rect(L, 4))) {
            // static cocos2d::Grid3D *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped, const cocos2d::Rect &rect)
            return _cocos2d_Grid3D_create4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Grid3D::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Grid3D_getNeedDepthTestForBlit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Grid3D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Grid3D");

    // bool getNeedDepthTestForBlit()
    bool ret = (bool)self->getNeedDepthTestForBlit();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3D_getOriginalVertex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Grid3D *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Grid3D");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec3 getOriginalVertex(const cocos2d::Vec2 &pos)
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getOriginalVertex(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3D_getVertex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Grid3D *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Grid3D");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec3 getVertex(const cocos2d::Vec2 &pos)
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getVertex(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // Grid3D()
    cocos2d::Grid3D *ret = (cocos2d::Grid3D *)new cocos2d::Grid3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.Grid3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3D_setNeedDepthTestForBlit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Grid3D *self = nullptr;
    bool arg1 = false;       /** neededDepthTest */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Grid3D");
    olua_check_bool(L, 2, &arg1);

    // void setNeedDepthTestForBlit(bool neededDepthTest)
    self->setNeedDepthTestForBlit(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Grid3D_setVertex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Grid3D *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */
    cocos2d::Vec3 arg2;       /** vertex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Grid3D");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 3, &arg2);

    // void setVertex(const cocos2d::Vec2 &pos, const cocos2d::Vec3 &vertex)
    self->setVertex(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Grid3D(lua_State *L)
{
    oluacls_class(L, "cc.Grid3D", "cc.GridBase");
    oluacls_func(L, "__move", _cocos2d_Grid3D___move);
    oluacls_func(L, "create", _cocos2d_Grid3D_create);
    oluacls_func(L, "getNeedDepthTestForBlit", _cocos2d_Grid3D_getNeedDepthTestForBlit);
    oluacls_func(L, "getOriginalVertex", _cocos2d_Grid3D_getOriginalVertex);
    oluacls_func(L, "getVertex", _cocos2d_Grid3D_getVertex);
    oluacls_func(L, "new", _cocos2d_Grid3D_new);
    oluacls_func(L, "setNeedDepthTestForBlit", _cocos2d_Grid3D_setNeedDepthTestForBlit);
    oluacls_func(L, "setVertex", _cocos2d_Grid3D_setVertex);
    oluacls_prop(L, "needDepthTestForBlit", _cocos2d_Grid3D_getNeedDepthTestForBlit, _cocos2d_Grid3D_setNeedDepthTestForBlit);

    olua_registerluatype<cocos2d::Grid3D>(L, "cc.Grid3D");

    return 1;
}

static int _cocos2d_TiledGrid3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TiledGrid3D *)olua_toobj(L, 1, "cc.TiledGrid3D");
    olua_push_cppobj(L, self, "cc.TiledGrid3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TiledGrid3D_create1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);

    // static cocos2d::TiledGrid3D *create(const cocos2d::Size &gridSize)
    cocos2d::TiledGrid3D *ret = (cocos2d::TiledGrid3D *)cocos2d::TiledGrid3D::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.TiledGrid3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3D_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Rect arg2;       /** rect */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);
    manual_olua_check_cocos2d_Rect(L, 2, &arg2);

    // static cocos2d::TiledGrid3D *create(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)
    cocos2d::TiledGrid3D *ret = (cocos2d::TiledGrid3D *)cocos2d::TiledGrid3D::create(arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TiledGrid3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3D_create3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */
    bool arg3 = false;       /** flipped */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Texture2D");
    olua_check_bool(L, 3, &arg3);

    // static cocos2d::TiledGrid3D *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped)
    cocos2d::TiledGrid3D *ret = (cocos2d::TiledGrid3D *)cocos2d::TiledGrid3D::create(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TiledGrid3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3D_create4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size arg1;       /** gridSize */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */
    bool arg3 = false;       /** flipped */
    cocos2d::Rect arg4;       /** rect */

    auto_olua_check_cocos2d_Size(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Texture2D");
    olua_check_bool(L, 3, &arg3);
    manual_olua_check_cocos2d_Rect(L, 4, &arg4);

    // static cocos2d::TiledGrid3D *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped, const cocos2d::Rect &rect)
    cocos2d::TiledGrid3D *ret = (cocos2d::TiledGrid3D *)cocos2d::TiledGrid3D::create(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.TiledGrid3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3D_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((auto_olua_is_cocos2d_Size(L, 1))) {
            // static cocos2d::TiledGrid3D *create(const cocos2d::Size &gridSize)
            return _cocos2d_TiledGrid3D_create1(L);
        // }
    }

    if (num_args == 2) {
        // if ((auto_olua_is_cocos2d_Size(L, 1)) && (manual_olua_is_cocos2d_Rect(L, 2))) {
            // static cocos2d::TiledGrid3D *create(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)
            return _cocos2d_TiledGrid3D_create2(L);
        // }
    }

    if (num_args == 3) {
        // if ((auto_olua_is_cocos2d_Size(L, 1)) && (olua_is_cppobj(L, 2, "cc.Texture2D")) && (olua_is_bool(L, 3))) {
            // static cocos2d::TiledGrid3D *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped)
            return _cocos2d_TiledGrid3D_create3(L);
        // }
    }

    if (num_args == 4) {
        // if ((auto_olua_is_cocos2d_Size(L, 1)) && (olua_is_cppobj(L, 2, "cc.Texture2D")) && (olua_is_bool(L, 3)) && (manual_olua_is_cocos2d_Rect(L, 4))) {
            // static cocos2d::TiledGrid3D *create(const cocos2d::Size &gridSize, cocos2d::Texture2D *texture, bool flipped, const cocos2d::Rect &rect)
            return _cocos2d_TiledGrid3D_create4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TiledGrid3D::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TiledGrid3D_getOriginalTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TiledGrid3D *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TiledGrid3D");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Quad3 getOriginalTile(const cocos2d::Vec2 &pos)
    cocos2d::Quad3 ret = (cocos2d::Quad3)self->getOriginalTile(arg1);
    int num_ret = auto_olua_push_cocos2d_Quad3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3D_getTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TiledGrid3D *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TiledGrid3D");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Quad3 getTile(const cocos2d::Vec2 &pos)
    cocos2d::Quad3 ret = (cocos2d::Quad3)self->getTile(arg1);
    int num_ret = auto_olua_push_cocos2d_Quad3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // TiledGrid3D()
    cocos2d::TiledGrid3D *ret = (cocos2d::TiledGrid3D *)new cocos2d::TiledGrid3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.TiledGrid3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3D_setTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TiledGrid3D *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */
    cocos2d::Quad3 arg2;       /** coords */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TiledGrid3D");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Quad3(L, 3, &arg2);

    // void setTile(const cocos2d::Vec2 &pos, const cocos2d::Quad3 &coords)
    self->setTile(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_TiledGrid3D(lua_State *L)
{
    oluacls_class(L, "cc.TiledGrid3D", "cc.GridBase");
    oluacls_func(L, "__move", _cocos2d_TiledGrid3D___move);
    oluacls_func(L, "create", _cocos2d_TiledGrid3D_create);
    oluacls_func(L, "getOriginalTile", _cocos2d_TiledGrid3D_getOriginalTile);
    oluacls_func(L, "getTile", _cocos2d_TiledGrid3D_getTile);
    oluacls_func(L, "new", _cocos2d_TiledGrid3D_new);
    oluacls_func(L, "setTile", _cocos2d_TiledGrid3D_setTile);

    olua_registerluatype<cocos2d::TiledGrid3D>(L, "cc.TiledGrid3D");

    return 1;
}

static int _cocos2d_NodeGrid___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::NodeGrid *)olua_toobj(L, 1, "cc.NodeGrid");
    olua_push_cppobj(L, self, "cc.NodeGrid");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_NodeGrid_create1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::NodeGrid *create()
    cocos2d::NodeGrid *ret = (cocos2d::NodeGrid *)cocos2d::NodeGrid::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.NodeGrid");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_NodeGrid_create2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Rect arg1;       /** rect */

    manual_olua_check_cocos2d_Rect(L, 1, &arg1);

    // static cocos2d::NodeGrid *create(const cocos2d::Rect &rect)
    cocos2d::NodeGrid *ret = (cocos2d::NodeGrid *)cocos2d::NodeGrid::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.NodeGrid");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_NodeGrid_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::NodeGrid *create()
        return _cocos2d_NodeGrid_create1(L);
    }

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_Rect(L, 1))) {
            // static cocos2d::NodeGrid *create(const cocos2d::Rect &rect)
            return _cocos2d_NodeGrid_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::NodeGrid::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_NodeGrid_getGrid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NodeGrid *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.NodeGrid");

    // cocos2d::GridBase *getGrid()
    cocos2d::GridBase *ret = (cocos2d::GridBase *)self->getGrid();
    int num_ret = olua_push_cppobj(L, ret, "cc.GridBase");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_NodeGrid_getGridRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NodeGrid *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.NodeGrid");

    // const cocos2d::Rect &getGridRect()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getGridRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_NodeGrid_new(lua_State *L)
{
    olua_startinvoke(L);

    // NodeGrid()
    cocos2d::NodeGrid *ret = (cocos2d::NodeGrid *)new cocos2d::NodeGrid();
    int num_ret = olua_push_cppobj(L, ret, "cc.NodeGrid");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_NodeGrid_setGrid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NodeGrid *self = nullptr;
    cocos2d::GridBase *arg1 = nullptr;       /** grid */

    olua_to_cppobj(L, 1, (void **)&self, "cc.NodeGrid");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GridBase");

    // void setGrid(cocos2d::GridBase *grid)
    self->setGrid(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_NodeGrid_setGridRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NodeGrid *self = nullptr;
    cocos2d::Rect arg1;       /** gridRect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.NodeGrid");
    manual_olua_check_cocos2d_Rect(L, 2, &arg1);

    // void setGridRect(const cocos2d::Rect &gridRect)
    self->setGridRect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_NodeGrid_setTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NodeGrid *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.NodeGrid");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setTarget(cocos2d::Node *target)
    self->setTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_NodeGrid(lua_State *L)
{
    oluacls_class(L, "cc.NodeGrid", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_NodeGrid___move);
    oluacls_func(L, "create", _cocos2d_NodeGrid_create);
    oluacls_func(L, "getGrid", _cocos2d_NodeGrid_getGrid);
    oluacls_func(L, "getGridRect", _cocos2d_NodeGrid_getGridRect);
    oluacls_func(L, "new", _cocos2d_NodeGrid_new);
    oluacls_func(L, "setGrid", _cocos2d_NodeGrid_setGrid);
    oluacls_func(L, "setGridRect", _cocos2d_NodeGrid_setGridRect);
    oluacls_func(L, "setTarget", _cocos2d_NodeGrid_setTarget);
    oluacls_prop(L, "grid", _cocos2d_NodeGrid_getGrid, _cocos2d_NodeGrid_setGrid);
    oluacls_prop(L, "gridRect", _cocos2d_NodeGrid_getGridRect, _cocos2d_NodeGrid_setGridRect);

    olua_registerluatype<cocos2d::NodeGrid>(L, "cc.NodeGrid");

    return 1;
}

static int _cocos2d_GridAction___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::GridAction *)olua_toobj(L, 1, "cc.GridAction");
    olua_push_cppobj(L, self, "cc.GridAction");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_GridAction_getGrid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GridAction *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GridAction");

    // cocos2d::GridBase *getGrid()
    cocos2d::GridBase *ret = (cocos2d::GridBase *)self->getGrid();
    int num_ret = olua_push_cppobj(L, ret, "cc.GridBase");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_GridAction_new(lua_State *L)
{
    olua_startinvoke(L);

    // GridAction()
    cocos2d::GridAction *ret = (cocos2d::GridAction *)new cocos2d::GridAction();
    int num_ret = olua_push_cppobj(L, ret, "cc.GridAction");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_GridAction(lua_State *L)
{
    oluacls_class(L, "cc.GridAction", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_GridAction___move);
    oluacls_func(L, "getGrid", _cocos2d_GridAction_getGrid);
    oluacls_func(L, "new", _cocos2d_GridAction_new);
    oluacls_prop(L, "grid", _cocos2d_GridAction_getGrid, nullptr);

    olua_registerluatype<cocos2d::GridAction>(L, "cc.GridAction");

    return 1;
}

static int _cocos2d_Grid3DAction___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Grid3DAction *)olua_toobj(L, 1, "cc.Grid3DAction");
    olua_push_cppobj(L, self, "cc.Grid3DAction");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Grid3DAction_getGridRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Grid3DAction *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Grid3DAction");

    // cocos2d::Rect getGridRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getGridRect();
    int num_ret = manual_olua_push_cocos2d_Rect(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3DAction_getOriginalVertex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Grid3DAction *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Grid3DAction");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec3 getOriginalVertex(const cocos2d::Vec2 &position)
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getOriginalVertex(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3DAction_getVertex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Grid3DAction *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Grid3DAction");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec3 getVertex(const cocos2d::Vec2 &position)
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getVertex(arg1);
    int num_ret = auto_olua_push_cocos2d_Vec3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Grid3DAction_setVertex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Grid3DAction *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */
    cocos2d::Vec3 arg2;       /** vertex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Grid3DAction");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Vec3(L, 3, &arg2);

    // void setVertex(const cocos2d::Vec2 &position, const cocos2d::Vec3 &vertex)
    self->setVertex(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Grid3DAction(lua_State *L)
{
    oluacls_class(L, "cc.Grid3DAction", "cc.GridAction");
    oluacls_func(L, "__move", _cocos2d_Grid3DAction___move);
    oluacls_func(L, "getGridRect", _cocos2d_Grid3DAction_getGridRect);
    oluacls_func(L, "getOriginalVertex", _cocos2d_Grid3DAction_getOriginalVertex);
    oluacls_func(L, "getVertex", _cocos2d_Grid3DAction_getVertex);
    oluacls_func(L, "setVertex", _cocos2d_Grid3DAction_setVertex);
    oluacls_prop(L, "gridRect", _cocos2d_Grid3DAction_getGridRect, nullptr);

    olua_registerluatype<cocos2d::Grid3DAction>(L, "cc.Grid3DAction");

    return 1;
}

NS_CC_BEGIN
TiledGrid3DAction* TiledGrid3DAction::create(float duration, const Size& gridSize)
{
    TiledGrid3DAction* ret = new TiledGrid3DAction();
    ret->autorelease();
    ret->initWithDuration(duration, gridSize);
    return ret;
}
NS_CC_END

static int _cocos2d_TiledGrid3DAction___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TiledGrid3DAction *)olua_toobj(L, 1, "cc.TiledGrid3DAction");
    olua_push_cppobj(L, self, "cc.TiledGrid3DAction");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TiledGrid3DAction_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);

    // static cocos2d::TiledGrid3DAction *create(float duration, const cocos2d::Size &gridSize)
    cocos2d::TiledGrid3DAction *ret = (cocos2d::TiledGrid3DAction *)cocos2d::TiledGrid3DAction::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TiledGrid3DAction");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3DAction_getOriginalTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TiledGrid3DAction *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TiledGrid3DAction");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Quad3 getOriginalTile(const cocos2d::Vec2 &position)
    cocos2d::Quad3 ret = (cocos2d::Quad3)self->getOriginalTile(arg1);
    int num_ret = auto_olua_push_cocos2d_Quad3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3DAction_getTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TiledGrid3DAction *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TiledGrid3DAction");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Quad3 getTile(const cocos2d::Vec2 &position)
    cocos2d::Quad3 ret = (cocos2d::Quad3)self->getTile(arg1);
    int num_ret = auto_olua_push_cocos2d_Quad3(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TiledGrid3DAction_setTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TiledGrid3DAction *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */
    cocos2d::Quad3 arg2;       /** coords */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TiledGrid3DAction");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    auto_olua_check_cocos2d_Quad3(L, 3, &arg2);

    // void setTile(const cocos2d::Vec2 &position, const cocos2d::Quad3 &coords)
    self->setTile(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_TiledGrid3DAction(lua_State *L)
{
    oluacls_class(L, "cc.TiledGrid3DAction", "cc.GridAction");
    oluacls_func(L, "__move", _cocos2d_TiledGrid3DAction___move);
    oluacls_func(L, "create", _cocos2d_TiledGrid3DAction_create);
    oluacls_func(L, "getOriginalTile", _cocos2d_TiledGrid3DAction_getOriginalTile);
    oluacls_func(L, "getTile", _cocos2d_TiledGrid3DAction_getTile);
    oluacls_func(L, "setTile", _cocos2d_TiledGrid3DAction_setTile);

    olua_registerluatype<cocos2d::TiledGrid3DAction>(L, "cc.TiledGrid3DAction");

    return 1;
}

static int _cocos2d_AccelDeccelAmplitude___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::AccelDeccelAmplitude *)olua_toobj(L, 1, "cc.AccelDeccelAmplitude");
    olua_push_cppobj(L, self, "cc.AccelDeccelAmplitude");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_AccelDeccelAmplitude_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** duration */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Action");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::AccelDeccelAmplitude *create(cocos2d::Action *action, float duration)
    cocos2d::AccelDeccelAmplitude *ret = (cocos2d::AccelDeccelAmplitude *)cocos2d::AccelDeccelAmplitude::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.AccelDeccelAmplitude");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AccelDeccelAmplitude_getRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AccelDeccelAmplitude *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AccelDeccelAmplitude");

    // float getRate()
    float ret = (float)self->getRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AccelDeccelAmplitude_new(lua_State *L)
{
    olua_startinvoke(L);

    // AccelDeccelAmplitude()
    cocos2d::AccelDeccelAmplitude *ret = (cocos2d::AccelDeccelAmplitude *)new cocos2d::AccelDeccelAmplitude();
    int num_ret = olua_push_cppobj(L, ret, "cc.AccelDeccelAmplitude");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AccelDeccelAmplitude_setRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AccelDeccelAmplitude *self = nullptr;
    lua_Number arg1 = 0;       /** rate */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AccelDeccelAmplitude");
    olua_check_number(L, 2, &arg1);

    // void setRate(float rate)
    self->setRate((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_AccelDeccelAmplitude(lua_State *L)
{
    oluacls_class(L, "cc.AccelDeccelAmplitude", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_AccelDeccelAmplitude___move);
    oluacls_func(L, "create", _cocos2d_AccelDeccelAmplitude_create);
    oluacls_func(L, "getRate", _cocos2d_AccelDeccelAmplitude_getRate);
    oluacls_func(L, "new", _cocos2d_AccelDeccelAmplitude_new);
    oluacls_func(L, "setRate", _cocos2d_AccelDeccelAmplitude_setRate);
    oluacls_prop(L, "rate", _cocos2d_AccelDeccelAmplitude_getRate, _cocos2d_AccelDeccelAmplitude_setRate);

    olua_registerluatype<cocos2d::AccelDeccelAmplitude>(L, "cc.AccelDeccelAmplitude");

    return 1;
}

static int _cocos2d_AccelAmplitude___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::AccelAmplitude *)olua_toobj(L, 1, "cc.AccelAmplitude");
    olua_push_cppobj(L, self, "cc.AccelAmplitude");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_AccelAmplitude_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** duration */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Action");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::AccelAmplitude *create(cocos2d::Action *action, float duration)
    cocos2d::AccelAmplitude *ret = (cocos2d::AccelAmplitude *)cocos2d::AccelAmplitude::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.AccelAmplitude");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AccelAmplitude_getRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AccelAmplitude *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AccelAmplitude");

    // float getRate()
    float ret = (float)self->getRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AccelAmplitude_new(lua_State *L)
{
    olua_startinvoke(L);

    // AccelAmplitude()
    cocos2d::AccelAmplitude *ret = (cocos2d::AccelAmplitude *)new cocos2d::AccelAmplitude();
    int num_ret = olua_push_cppobj(L, ret, "cc.AccelAmplitude");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_AccelAmplitude_setRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AccelAmplitude *self = nullptr;
    lua_Number arg1 = 0;       /** rate */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AccelAmplitude");
    olua_check_number(L, 2, &arg1);

    // void setRate(float rate)
    self->setRate((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_AccelAmplitude(lua_State *L)
{
    oluacls_class(L, "cc.AccelAmplitude", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_AccelAmplitude___move);
    oluacls_func(L, "create", _cocos2d_AccelAmplitude_create);
    oluacls_func(L, "getRate", _cocos2d_AccelAmplitude_getRate);
    oluacls_func(L, "new", _cocos2d_AccelAmplitude_new);
    oluacls_func(L, "setRate", _cocos2d_AccelAmplitude_setRate);
    oluacls_prop(L, "rate", _cocos2d_AccelAmplitude_getRate, _cocos2d_AccelAmplitude_setRate);

    olua_registerluatype<cocos2d::AccelAmplitude>(L, "cc.AccelAmplitude");

    return 1;
}

static int _cocos2d_DeccelAmplitude___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::DeccelAmplitude *)olua_toobj(L, 1, "cc.DeccelAmplitude");
    olua_push_cppobj(L, self, "cc.DeccelAmplitude");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_DeccelAmplitude_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Action *arg1 = nullptr;       /** action */
    lua_Number arg2 = 0;       /** duration */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Action");
    olua_check_number(L, 2, &arg2);

    // static cocos2d::DeccelAmplitude *create(cocos2d::Action *action, float duration)
    cocos2d::DeccelAmplitude *ret = (cocos2d::DeccelAmplitude *)cocos2d::DeccelAmplitude::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.DeccelAmplitude");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DeccelAmplitude_getRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DeccelAmplitude *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.DeccelAmplitude");

    // float getRate()
    float ret = (float)self->getRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DeccelAmplitude_new(lua_State *L)
{
    olua_startinvoke(L);

    // DeccelAmplitude()
    cocos2d::DeccelAmplitude *ret = (cocos2d::DeccelAmplitude *)new cocos2d::DeccelAmplitude();
    int num_ret = olua_push_cppobj(L, ret, "cc.DeccelAmplitude");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_DeccelAmplitude_setRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DeccelAmplitude *self = nullptr;
    lua_Number arg1 = 0;       /** rate */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DeccelAmplitude");
    olua_check_number(L, 2, &arg1);

    // void setRate(float rate)
    self->setRate((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_DeccelAmplitude(lua_State *L)
{
    oluacls_class(L, "cc.DeccelAmplitude", "cc.ActionInterval");
    oluacls_func(L, "__move", _cocos2d_DeccelAmplitude___move);
    oluacls_func(L, "create", _cocos2d_DeccelAmplitude_create);
    oluacls_func(L, "getRate", _cocos2d_DeccelAmplitude_getRate);
    oluacls_func(L, "new", _cocos2d_DeccelAmplitude_new);
    oluacls_func(L, "setRate", _cocos2d_DeccelAmplitude_setRate);
    oluacls_prop(L, "rate", _cocos2d_DeccelAmplitude_getRate, _cocos2d_DeccelAmplitude_setRate);

    olua_registerluatype<cocos2d::DeccelAmplitude>(L, "cc.DeccelAmplitude");

    return 1;
}

static int _cocos2d_StopGrid___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::StopGrid *)olua_toobj(L, 1, "cc.StopGrid");
    olua_push_cppobj(L, self, "cc.StopGrid");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_StopGrid_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::StopGrid *create()
    cocos2d::StopGrid *ret = (cocos2d::StopGrid *)cocos2d::StopGrid::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.StopGrid");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_StopGrid_new(lua_State *L)
{
    olua_startinvoke(L);

    // StopGrid()
    cocos2d::StopGrid *ret = (cocos2d::StopGrid *)new cocos2d::StopGrid();
    int num_ret = olua_push_cppobj(L, ret, "cc.StopGrid");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_StopGrid(lua_State *L)
{
    oluacls_class(L, "cc.StopGrid", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_StopGrid___move);
    oluacls_func(L, "create", _cocos2d_StopGrid_create);
    oluacls_func(L, "new", _cocos2d_StopGrid_new);

    olua_registerluatype<cocos2d::StopGrid>(L, "cc.StopGrid");

    return 1;
}

static int _cocos2d_ReuseGrid___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ReuseGrid *)olua_toobj(L, 1, "cc.ReuseGrid");
    olua_push_cppobj(L, self, "cc.ReuseGrid");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ReuseGrid_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** times */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ReuseGrid *create(int times)
    cocos2d::ReuseGrid *ret = (cocos2d::ReuseGrid *)cocos2d::ReuseGrid::create((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ReuseGrid");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ReuseGrid_initWithTimes(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ReuseGrid *self = nullptr;
    lua_Integer arg1 = 0;       /** times */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ReuseGrid");
    olua_check_int(L, 2, &arg1);

    // bool initWithTimes(int times)
    bool ret = (bool)self->initWithTimes((int)arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ReuseGrid_new(lua_State *L)
{
    olua_startinvoke(L);

    // ReuseGrid()
    cocos2d::ReuseGrid *ret = (cocos2d::ReuseGrid *)new cocos2d::ReuseGrid();
    int num_ret = olua_push_cppobj(L, ret, "cc.ReuseGrid");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ReuseGrid(lua_State *L)
{
    oluacls_class(L, "cc.ReuseGrid", "cc.ActionInstant");
    oluacls_func(L, "__move", _cocos2d_ReuseGrid___move);
    oluacls_func(L, "create", _cocos2d_ReuseGrid_create);
    oluacls_func(L, "initWithTimes", _cocos2d_ReuseGrid_initWithTimes);
    oluacls_func(L, "new", _cocos2d_ReuseGrid_new);

    olua_registerluatype<cocos2d::ReuseGrid>(L, "cc.ReuseGrid");

    return 1;
}

static int _cocos2d_Waves3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Waves3D *)olua_toobj(L, 1, "cc.Waves3D");
    olua_push_cppobj(L, self, "cc.Waves3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Waves3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Unsigned arg3 = 0;       /** waves */
    lua_Number arg4 = 0;       /** amplitude */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::Waves3D *create(float duration, const cocos2d::Size &gridSize, unsigned int waves, float amplitude)
    cocos2d::Waves3D *ret = (cocos2d::Waves3D *)cocos2d::Waves3D::create((float)arg1, arg2, (unsigned int)arg3, (float)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Waves3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Waves3D_getAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Waves3D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Waves3D");

    // float getAmplitude()
    float ret = (float)self->getAmplitude();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Waves3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // Waves3D()
    cocos2d::Waves3D *ret = (cocos2d::Waves3D *)new cocos2d::Waves3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.Waves3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Waves3D_setAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Waves3D *self = nullptr;
    lua_Number arg1 = 0;       /** amplitude */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Waves3D");
    olua_check_number(L, 2, &arg1);

    // void setAmplitude(float amplitude)
    self->setAmplitude((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Waves3D(lua_State *L)
{
    oluacls_class(L, "cc.Waves3D", "cc.Grid3DAction");
    oluacls_func(L, "__move", _cocos2d_Waves3D___move);
    oluacls_func(L, "create", _cocos2d_Waves3D_create);
    oluacls_func(L, "getAmplitude", _cocos2d_Waves3D_getAmplitude);
    oluacls_func(L, "new", _cocos2d_Waves3D_new);
    oluacls_func(L, "setAmplitude", _cocos2d_Waves3D_setAmplitude);
    oluacls_prop(L, "amplitude", _cocos2d_Waves3D_getAmplitude, _cocos2d_Waves3D_setAmplitude);

    olua_registerluatype<cocos2d::Waves3D>(L, "cc.Waves3D");

    return 1;
}

static int _cocos2d_FlipX3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FlipX3D *)olua_toobj(L, 1, "cc.FlipX3D");
    olua_push_cppobj(L, self, "cc.FlipX3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FlipX3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::FlipX3D *create(float duration)
    cocos2d::FlipX3D *ret = (cocos2d::FlipX3D *)cocos2d::FlipX3D::create((float)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.FlipX3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FlipX3D_initWithSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FlipX3D *self = nullptr;
    cocos2d::Size arg1;       /** gridSize */
    lua_Number arg2 = 0;       /** duration */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FlipX3D");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // bool initWithSize(const cocos2d::Size &gridSize, float duration)
    bool ret = (bool)self->initWithSize(arg1, (float)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FlipX3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // FlipX3D()
    cocos2d::FlipX3D *ret = (cocos2d::FlipX3D *)new cocos2d::FlipX3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.FlipX3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FlipX3D(lua_State *L)
{
    oluacls_class(L, "cc.FlipX3D", "cc.Grid3DAction");
    oluacls_func(L, "__move", _cocos2d_FlipX3D___move);
    oluacls_func(L, "create", _cocos2d_FlipX3D_create);
    oluacls_func(L, "initWithSize", _cocos2d_FlipX3D_initWithSize);
    oluacls_func(L, "new", _cocos2d_FlipX3D_new);

    olua_registerluatype<cocos2d::FlipX3D>(L, "cc.FlipX3D");

    return 1;
}

static int _cocos2d_FlipY3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FlipY3D *)olua_toobj(L, 1, "cc.FlipY3D");
    olua_push_cppobj(L, self, "cc.FlipY3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FlipY3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::FlipY3D *create(float duration)
    cocos2d::FlipY3D *ret = (cocos2d::FlipY3D *)cocos2d::FlipY3D::create((float)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.FlipY3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FlipY3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // FlipY3D()
    cocos2d::FlipY3D *ret = (cocos2d::FlipY3D *)new cocos2d::FlipY3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.FlipY3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FlipY3D(lua_State *L)
{
    oluacls_class(L, "cc.FlipY3D", "cc.FlipX3D");
    oluacls_func(L, "__move", _cocos2d_FlipY3D___move);
    oluacls_func(L, "create", _cocos2d_FlipY3D_create);
    oluacls_func(L, "new", _cocos2d_FlipY3D_new);

    olua_registerluatype<cocos2d::FlipY3D>(L, "cc.FlipY3D");

    return 1;
}

static int _cocos2d_Lens3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Lens3D *)olua_toobj(L, 1, "cc.Lens3D");
    olua_push_cppobj(L, self, "cc.Lens3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Lens3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    cocos2d::Vec2 arg3;       /** position */
    lua_Number arg4 = 0;       /** radius */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::Lens3D *create(float duration, const cocos2d::Size &gridSize, const cocos2d::Vec2 &position, float radius)
    cocos2d::Lens3D *ret = (cocos2d::Lens3D *)cocos2d::Lens3D::create((float)arg1, arg2, arg3, (float)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Lens3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Lens3D_getLensEffect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Lens3D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Lens3D");

    // float getLensEffect()
    float ret = (float)self->getLensEffect();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Lens3D_getPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Lens3D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Lens3D");

    // const cocos2d::Vec2 &getPosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPosition();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Lens3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // Lens3D()
    cocos2d::Lens3D *ret = (cocos2d::Lens3D *)new cocos2d::Lens3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.Lens3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Lens3D_setConcave(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Lens3D *self = nullptr;
    bool arg1 = false;       /** concave */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Lens3D");
    olua_check_bool(L, 2, &arg1);

    // void setConcave(bool concave)
    self->setConcave(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Lens3D_setLensEffect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Lens3D *self = nullptr;
    lua_Number arg1 = 0;       /** lensEffect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Lens3D");
    olua_check_number(L, 2, &arg1);

    // void setLensEffect(float lensEffect)
    self->setLensEffect((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Lens3D_setPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Lens3D *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Lens3D");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setPosition(const cocos2d::Vec2 &position)
    self->setPosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Lens3D(lua_State *L)
{
    oluacls_class(L, "cc.Lens3D", "cc.Grid3DAction");
    oluacls_func(L, "__move", _cocos2d_Lens3D___move);
    oluacls_func(L, "create", _cocos2d_Lens3D_create);
    oluacls_func(L, "getLensEffect", _cocos2d_Lens3D_getLensEffect);
    oluacls_func(L, "getPosition", _cocos2d_Lens3D_getPosition);
    oluacls_func(L, "new", _cocos2d_Lens3D_new);
    oluacls_func(L, "setConcave", _cocos2d_Lens3D_setConcave);
    oluacls_func(L, "setLensEffect", _cocos2d_Lens3D_setLensEffect);
    oluacls_func(L, "setPosition", _cocos2d_Lens3D_setPosition);
    oluacls_prop(L, "lensEffect", _cocos2d_Lens3D_getLensEffect, _cocos2d_Lens3D_setLensEffect);
    oluacls_prop(L, "position", _cocos2d_Lens3D_getPosition, _cocos2d_Lens3D_setPosition);

    olua_registerluatype<cocos2d::Lens3D>(L, "cc.Lens3D");

    return 1;
}

static int _cocos2d_Ripple3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Ripple3D *)olua_toobj(L, 1, "cc.Ripple3D");
    olua_push_cppobj(L, self, "cc.Ripple3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Ripple3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    cocos2d::Vec2 arg3;       /** position */
    lua_Number arg4 = 0;       /** radius */
    lua_Unsigned arg5 = 0;       /** waves */
    lua_Number arg6 = 0;       /** amplitude */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_uint(L, 5, &arg5);
    olua_check_number(L, 6, &arg6);

    // static cocos2d::Ripple3D *create(float duration, const cocos2d::Size &gridSize, const cocos2d::Vec2 &position, float radius, unsigned int waves, float amplitude)
    cocos2d::Ripple3D *ret = (cocos2d::Ripple3D *)cocos2d::Ripple3D::create((float)arg1, arg2, arg3, (float)arg4, (unsigned int)arg5, (float)arg6);
    int num_ret = olua_push_cppobj(L, ret, "cc.Ripple3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Ripple3D_getAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Ripple3D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Ripple3D");

    // float getAmplitude()
    float ret = (float)self->getAmplitude();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Ripple3D_getPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Ripple3D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Ripple3D");

    // const cocos2d::Vec2 &getPosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPosition();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Ripple3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // Ripple3D()
    cocos2d::Ripple3D *ret = (cocos2d::Ripple3D *)new cocos2d::Ripple3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.Ripple3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Ripple3D_setAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Ripple3D *self = nullptr;
    lua_Number arg1 = 0;       /** fAmplitude */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Ripple3D");
    olua_check_number(L, 2, &arg1);

    // void setAmplitude(float fAmplitude)
    self->setAmplitude((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Ripple3D_setPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Ripple3D *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Ripple3D");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setPosition(const cocos2d::Vec2 &position)
    self->setPosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Ripple3D(lua_State *L)
{
    oluacls_class(L, "cc.Ripple3D", "cc.Grid3DAction");
    oluacls_func(L, "__move", _cocos2d_Ripple3D___move);
    oluacls_func(L, "create", _cocos2d_Ripple3D_create);
    oluacls_func(L, "getAmplitude", _cocos2d_Ripple3D_getAmplitude);
    oluacls_func(L, "getPosition", _cocos2d_Ripple3D_getPosition);
    oluacls_func(L, "new", _cocos2d_Ripple3D_new);
    oluacls_func(L, "setAmplitude", _cocos2d_Ripple3D_setAmplitude);
    oluacls_func(L, "setPosition", _cocos2d_Ripple3D_setPosition);
    oluacls_prop(L, "amplitude", _cocos2d_Ripple3D_getAmplitude, _cocos2d_Ripple3D_setAmplitude);
    oluacls_prop(L, "position", _cocos2d_Ripple3D_getPosition, _cocos2d_Ripple3D_setPosition);

    olua_registerluatype<cocos2d::Ripple3D>(L, "cc.Ripple3D");

    return 1;
}

static int _cocos2d_Shaky3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Shaky3D *)olua_toobj(L, 1, "cc.Shaky3D");
    olua_push_cppobj(L, self, "cc.Shaky3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Shaky3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** initWithDuration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Integer arg3 = 0;       /** range */
    bool arg4 = false;       /** shakeZ */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_bool(L, 4, &arg4);

    // static cocos2d::Shaky3D *create(float initWithDuration, const cocos2d::Size &gridSize, int range, bool shakeZ)
    cocos2d::Shaky3D *ret = (cocos2d::Shaky3D *)cocos2d::Shaky3D::create((float)arg1, arg2, (int)arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Shaky3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Shaky3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // Shaky3D()
    cocos2d::Shaky3D *ret = (cocos2d::Shaky3D *)new cocos2d::Shaky3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.Shaky3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_Shaky3D(lua_State *L)
{
    oluacls_class(L, "cc.Shaky3D", "cc.Grid3DAction");
    oluacls_func(L, "__move", _cocos2d_Shaky3D___move);
    oluacls_func(L, "create", _cocos2d_Shaky3D_create);
    oluacls_func(L, "new", _cocos2d_Shaky3D_new);

    olua_registerluatype<cocos2d::Shaky3D>(L, "cc.Shaky3D");

    return 1;
}

static int _cocos2d_Liquid___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Liquid *)olua_toobj(L, 1, "cc.Liquid");
    olua_push_cppobj(L, self, "cc.Liquid");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Liquid_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Unsigned arg3 = 0;       /** waves */
    lua_Number arg4 = 0;       /** amplitude */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::Liquid *create(float duration, const cocos2d::Size &gridSize, unsigned int waves, float amplitude)
    cocos2d::Liquid *ret = (cocos2d::Liquid *)cocos2d::Liquid::create((float)arg1, arg2, (unsigned int)arg3, (float)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.Liquid");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Liquid_getAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Liquid *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Liquid");

    // float getAmplitude()
    float ret = (float)self->getAmplitude();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Liquid_new(lua_State *L)
{
    olua_startinvoke(L);

    // Liquid()
    cocos2d::Liquid *ret = (cocos2d::Liquid *)new cocos2d::Liquid();
    int num_ret = olua_push_cppobj(L, ret, "cc.Liquid");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Liquid_setAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Liquid *self = nullptr;
    lua_Number arg1 = 0;       /** amplitude */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Liquid");
    olua_check_number(L, 2, &arg1);

    // void setAmplitude(float amplitude)
    self->setAmplitude((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Liquid(lua_State *L)
{
    oluacls_class(L, "cc.Liquid", "cc.Grid3DAction");
    oluacls_func(L, "__move", _cocos2d_Liquid___move);
    oluacls_func(L, "create", _cocos2d_Liquid_create);
    oluacls_func(L, "getAmplitude", _cocos2d_Liquid_getAmplitude);
    oluacls_func(L, "new", _cocos2d_Liquid_new);
    oluacls_func(L, "setAmplitude", _cocos2d_Liquid_setAmplitude);
    oluacls_prop(L, "amplitude", _cocos2d_Liquid_getAmplitude, _cocos2d_Liquid_setAmplitude);

    olua_registerluatype<cocos2d::Liquid>(L, "cc.Liquid");

    return 1;
}

static int _cocos2d_Waves___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Waves *)olua_toobj(L, 1, "cc.Waves");
    olua_push_cppobj(L, self, "cc.Waves");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Waves_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Unsigned arg3 = 0;       /** waves */
    lua_Number arg4 = 0;       /** amplitude */
    bool arg5 = false;       /** horizontal */
    bool arg6 = false;       /** vertical */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_bool(L, 5, &arg5);
    olua_check_bool(L, 6, &arg6);

    // static cocos2d::Waves *create(float duration, const cocos2d::Size &gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
    cocos2d::Waves *ret = (cocos2d::Waves *)cocos2d::Waves::create((float)arg1, arg2, (unsigned int)arg3, (float)arg4, arg5, arg6);
    int num_ret = olua_push_cppobj(L, ret, "cc.Waves");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Waves_getAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Waves *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Waves");

    // float getAmplitude()
    float ret = (float)self->getAmplitude();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Waves_new(lua_State *L)
{
    olua_startinvoke(L);

    // Waves()
    cocos2d::Waves *ret = (cocos2d::Waves *)new cocos2d::Waves();
    int num_ret = olua_push_cppobj(L, ret, "cc.Waves");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Waves_setAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Waves *self = nullptr;
    lua_Number arg1 = 0;       /** amplitude */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Waves");
    olua_check_number(L, 2, &arg1);

    // void setAmplitude(float amplitude)
    self->setAmplitude((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Waves(lua_State *L)
{
    oluacls_class(L, "cc.Waves", "cc.Grid3DAction");
    oluacls_func(L, "__move", _cocos2d_Waves___move);
    oluacls_func(L, "create", _cocos2d_Waves_create);
    oluacls_func(L, "getAmplitude", _cocos2d_Waves_getAmplitude);
    oluacls_func(L, "new", _cocos2d_Waves_new);
    oluacls_func(L, "setAmplitude", _cocos2d_Waves_setAmplitude);
    oluacls_prop(L, "amplitude", _cocos2d_Waves_getAmplitude, _cocos2d_Waves_setAmplitude);

    olua_registerluatype<cocos2d::Waves>(L, "cc.Waves");

    return 1;
}

static int _cocos2d_Twirl___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Twirl *)olua_toobj(L, 1, "cc.Twirl");
    olua_push_cppobj(L, self, "cc.Twirl");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_Twirl_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    cocos2d::Vec2 arg3;       /** position */
    lua_Unsigned arg4 = 0;       /** twirls */
    lua_Number arg5 = 0;       /** amplitude */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    auto_olua_check_cocos2d_Vec2(L, 3, &arg3);
    olua_check_uint(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);

    // static cocos2d::Twirl *create(float duration, const cocos2d::Size &gridSize, const cocos2d::Vec2 &position, unsigned int twirls, float amplitude)
    cocos2d::Twirl *ret = (cocos2d::Twirl *)cocos2d::Twirl::create((float)arg1, arg2, arg3, (unsigned int)arg4, (float)arg5);
    int num_ret = olua_push_cppobj(L, ret, "cc.Twirl");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Twirl_getAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Twirl *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Twirl");

    // float getAmplitude()
    float ret = (float)self->getAmplitude();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Twirl_getPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Twirl *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Twirl");

    // const cocos2d::Vec2 &getPosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPosition();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Twirl_new(lua_State *L)
{
    olua_startinvoke(L);

    // Twirl()
    cocos2d::Twirl *ret = (cocos2d::Twirl *)new cocos2d::Twirl();
    int num_ret = olua_push_cppobj(L, ret, "cc.Twirl");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_Twirl_setAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Twirl *self = nullptr;
    lua_Number arg1 = 0;       /** amplitude */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Twirl");
    olua_check_number(L, 2, &arg1);

    // void setAmplitude(float amplitude)
    self->setAmplitude((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_Twirl_setPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Twirl *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Twirl");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setPosition(const cocos2d::Vec2 &position)
    self->setPosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_Twirl(lua_State *L)
{
    oluacls_class(L, "cc.Twirl", "cc.Grid3DAction");
    oluacls_func(L, "__move", _cocos2d_Twirl___move);
    oluacls_func(L, "create", _cocos2d_Twirl_create);
    oluacls_func(L, "getAmplitude", _cocos2d_Twirl_getAmplitude);
    oluacls_func(L, "getPosition", _cocos2d_Twirl_getPosition);
    oluacls_func(L, "new", _cocos2d_Twirl_new);
    oluacls_func(L, "setAmplitude", _cocos2d_Twirl_setAmplitude);
    oluacls_func(L, "setPosition", _cocos2d_Twirl_setPosition);
    oluacls_prop(L, "amplitude", _cocos2d_Twirl_getAmplitude, _cocos2d_Twirl_setAmplitude);
    oluacls_prop(L, "position", _cocos2d_Twirl_getPosition, _cocos2d_Twirl_setPosition);

    olua_registerluatype<cocos2d::Twirl>(L, "cc.Twirl");

    return 1;
}

static int _cocos2d_PageTurn3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::PageTurn3D *)olua_toobj(L, 1, "cc.PageTurn3D");
    olua_push_cppobj(L, self, "cc.PageTurn3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_PageTurn3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);

    // static cocos2d::PageTurn3D *create(float duration, const cocos2d::Size &gridSize)
    cocos2d::PageTurn3D *ret = (cocos2d::PageTurn3D *)cocos2d::PageTurn3D::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.PageTurn3D");

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_PageTurn3D(lua_State *L)
{
    oluacls_class(L, "cc.PageTurn3D", "cc.Grid3DAction");
    oluacls_func(L, "__move", _cocos2d_PageTurn3D___move);
    oluacls_func(L, "create", _cocos2d_PageTurn3D_create);

    olua_registerluatype<cocos2d::PageTurn3D>(L, "cc.PageTurn3D");

    return 1;
}

static int _cocos2d_ShakyTiles3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ShakyTiles3D *)olua_toobj(L, 1, "cc.ShakyTiles3D");
    olua_push_cppobj(L, self, "cc.ShakyTiles3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ShakyTiles3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Integer arg3 = 0;       /** range */
    bool arg4 = false;       /** shakeZ */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_bool(L, 4, &arg4);

    // static cocos2d::ShakyTiles3D *create(float duration, const cocos2d::Size &gridSize, int range, bool shakeZ)
    cocos2d::ShakyTiles3D *ret = (cocos2d::ShakyTiles3D *)cocos2d::ShakyTiles3D::create((float)arg1, arg2, (int)arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.ShakyTiles3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ShakyTiles3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // ShakyTiles3D()
    cocos2d::ShakyTiles3D *ret = (cocos2d::ShakyTiles3D *)new cocos2d::ShakyTiles3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.ShakyTiles3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ShakyTiles3D(lua_State *L)
{
    oluacls_class(L, "cc.ShakyTiles3D", "cc.TiledGrid3DAction");
    oluacls_func(L, "__move", _cocos2d_ShakyTiles3D___move);
    oluacls_func(L, "create", _cocos2d_ShakyTiles3D_create);
    oluacls_func(L, "new", _cocos2d_ShakyTiles3D_new);

    olua_registerluatype<cocos2d::ShakyTiles3D>(L, "cc.ShakyTiles3D");

    return 1;
}

static int _cocos2d_ShatteredTiles3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ShatteredTiles3D *)olua_toobj(L, 1, "cc.ShatteredTiles3D");
    olua_push_cppobj(L, self, "cc.ShatteredTiles3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ShatteredTiles3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Integer arg3 = 0;       /** range */
    bool arg4 = false;       /** shatterZ */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_bool(L, 4, &arg4);

    // static cocos2d::ShatteredTiles3D *create(float duration, const cocos2d::Size &gridSize, int range, bool shatterZ)
    cocos2d::ShatteredTiles3D *ret = (cocos2d::ShatteredTiles3D *)cocos2d::ShatteredTiles3D::create((float)arg1, arg2, (int)arg3, arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.ShatteredTiles3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ShatteredTiles3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // ShatteredTiles3D()
    cocos2d::ShatteredTiles3D *ret = (cocos2d::ShatteredTiles3D *)new cocos2d::ShatteredTiles3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.ShatteredTiles3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ShatteredTiles3D(lua_State *L)
{
    oluacls_class(L, "cc.ShatteredTiles3D", "cc.TiledGrid3DAction");
    oluacls_func(L, "__move", _cocos2d_ShatteredTiles3D___move);
    oluacls_func(L, "create", _cocos2d_ShatteredTiles3D_create);
    oluacls_func(L, "new", _cocos2d_ShatteredTiles3D_new);

    olua_registerluatype<cocos2d::ShatteredTiles3D>(L, "cc.ShatteredTiles3D");

    return 1;
}

static int _cocos2d_ShuffleTiles___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ShuffleTiles *)olua_toobj(L, 1, "cc.ShuffleTiles");
    olua_push_cppobj(L, self, "cc.ShuffleTiles");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ShuffleTiles_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Unsigned arg3 = 0;       /** seed */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::ShuffleTiles *create(float duration, const cocos2d::Size &gridSize, unsigned int seed)
    cocos2d::ShuffleTiles *ret = (cocos2d::ShuffleTiles *)cocos2d::ShuffleTiles::create((float)arg1, arg2, (unsigned int)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.ShuffleTiles");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ShuffleTiles_getDelta(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ShuffleTiles *self = nullptr;
    cocos2d::Size arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ShuffleTiles");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);

    // cocos2d::Size getDelta(const cocos2d::Size &pos)
    cocos2d::Size ret = (cocos2d::Size)self->getDelta(arg1);
    int num_ret = auto_olua_push_cocos2d_Size(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ShuffleTiles_new(lua_State *L)
{
    olua_startinvoke(L);

    // ShuffleTiles()
    cocos2d::ShuffleTiles *ret = (cocos2d::ShuffleTiles *)new cocos2d::ShuffleTiles();
    int num_ret = olua_push_cppobj(L, ret, "cc.ShuffleTiles");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ShuffleTiles(lua_State *L)
{
    oluacls_class(L, "cc.ShuffleTiles", "cc.TiledGrid3DAction");
    oluacls_func(L, "__move", _cocos2d_ShuffleTiles___move);
    oluacls_func(L, "create", _cocos2d_ShuffleTiles_create);
    oluacls_func(L, "getDelta", _cocos2d_ShuffleTiles_getDelta);
    oluacls_func(L, "new", _cocos2d_ShuffleTiles_new);

    olua_registerluatype<cocos2d::ShuffleTiles>(L, "cc.ShuffleTiles");

    return 1;
}

static int _cocos2d_FadeOutTRTiles___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FadeOutTRTiles *)olua_toobj(L, 1, "cc.FadeOutTRTiles");
    olua_push_cppobj(L, self, "cc.FadeOutTRTiles");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FadeOutTRTiles_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);

    // static cocos2d::FadeOutTRTiles *create(float duration, const cocos2d::Size &gridSize)
    cocos2d::FadeOutTRTiles *ret = (cocos2d::FadeOutTRTiles *)cocos2d::FadeOutTRTiles::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOutTRTiles");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FadeOutTRTiles_new(lua_State *L)
{
    olua_startinvoke(L);

    // FadeOutTRTiles()
    cocos2d::FadeOutTRTiles *ret = (cocos2d::FadeOutTRTiles *)new cocos2d::FadeOutTRTiles();
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOutTRTiles");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FadeOutTRTiles_testFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FadeOutTRTiles *self = nullptr;
    cocos2d::Size arg1;       /** pos */
    lua_Number arg2 = 0;       /** time */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FadeOutTRTiles");
    auto_olua_check_cocos2d_Size(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // float testFunc(const cocos2d::Size &pos, float time)
    float ret = (float)self->testFunc(arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FadeOutTRTiles_transformTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FadeOutTRTiles *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */
    lua_Number arg2 = 0;       /** distance */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FadeOutTRTiles");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void transformTile(const cocos2d::Vec2 &pos, float distance)
    self->transformTile(arg1, (float)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FadeOutTRTiles_turnOffTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FadeOutTRTiles *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FadeOutTRTiles");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void turnOffTile(const cocos2d::Vec2 &pos)
    self->turnOffTile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_FadeOutTRTiles_turnOnTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FadeOutTRTiles *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FadeOutTRTiles");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void turnOnTile(const cocos2d::Vec2 &pos)
    self->turnOnTile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_FadeOutTRTiles(lua_State *L)
{
    oluacls_class(L, "cc.FadeOutTRTiles", "cc.TiledGrid3DAction");
    oluacls_func(L, "__move", _cocos2d_FadeOutTRTiles___move);
    oluacls_func(L, "create", _cocos2d_FadeOutTRTiles_create);
    oluacls_func(L, "new", _cocos2d_FadeOutTRTiles_new);
    oluacls_func(L, "testFunc", _cocos2d_FadeOutTRTiles_testFunc);
    oluacls_func(L, "transformTile", _cocos2d_FadeOutTRTiles_transformTile);
    oluacls_func(L, "turnOffTile", _cocos2d_FadeOutTRTiles_turnOffTile);
    oluacls_func(L, "turnOnTile", _cocos2d_FadeOutTRTiles_turnOnTile);

    olua_registerluatype<cocos2d::FadeOutTRTiles>(L, "cc.FadeOutTRTiles");

    return 1;
}

static int _cocos2d_FadeOutBLTiles___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FadeOutBLTiles *)olua_toobj(L, 1, "cc.FadeOutBLTiles");
    olua_push_cppobj(L, self, "cc.FadeOutBLTiles");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FadeOutBLTiles_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);

    // static cocos2d::FadeOutBLTiles *create(float duration, const cocos2d::Size &gridSize)
    cocos2d::FadeOutBLTiles *ret = (cocos2d::FadeOutBLTiles *)cocos2d::FadeOutBLTiles::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOutBLTiles");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FadeOutBLTiles_new(lua_State *L)
{
    olua_startinvoke(L);

    // FadeOutBLTiles()
    cocos2d::FadeOutBLTiles *ret = (cocos2d::FadeOutBLTiles *)new cocos2d::FadeOutBLTiles();
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOutBLTiles");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FadeOutBLTiles(lua_State *L)
{
    oluacls_class(L, "cc.FadeOutBLTiles", "cc.FadeOutTRTiles");
    oluacls_func(L, "__move", _cocos2d_FadeOutBLTiles___move);
    oluacls_func(L, "create", _cocos2d_FadeOutBLTiles_create);
    oluacls_func(L, "new", _cocos2d_FadeOutBLTiles_new);

    olua_registerluatype<cocos2d::FadeOutBLTiles>(L, "cc.FadeOutBLTiles");

    return 1;
}

static int _cocos2d_FadeOutUpTiles___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FadeOutUpTiles *)olua_toobj(L, 1, "cc.FadeOutUpTiles");
    olua_push_cppobj(L, self, "cc.FadeOutUpTiles");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FadeOutUpTiles_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);

    // static cocos2d::FadeOutUpTiles *create(float duration, const cocos2d::Size &gridSize)
    cocos2d::FadeOutUpTiles *ret = (cocos2d::FadeOutUpTiles *)cocos2d::FadeOutUpTiles::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOutUpTiles");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FadeOutUpTiles_new(lua_State *L)
{
    olua_startinvoke(L);

    // FadeOutUpTiles()
    cocos2d::FadeOutUpTiles *ret = (cocos2d::FadeOutUpTiles *)new cocos2d::FadeOutUpTiles();
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOutUpTiles");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FadeOutUpTiles(lua_State *L)
{
    oluacls_class(L, "cc.FadeOutUpTiles", "cc.FadeOutTRTiles");
    oluacls_func(L, "__move", _cocos2d_FadeOutUpTiles___move);
    oluacls_func(L, "create", _cocos2d_FadeOutUpTiles_create);
    oluacls_func(L, "new", _cocos2d_FadeOutUpTiles_new);

    olua_registerluatype<cocos2d::FadeOutUpTiles>(L, "cc.FadeOutUpTiles");

    return 1;
}

static int _cocos2d_FadeOutDownTiles___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FadeOutDownTiles *)olua_toobj(L, 1, "cc.FadeOutDownTiles");
    olua_push_cppobj(L, self, "cc.FadeOutDownTiles");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_FadeOutDownTiles_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);

    // static cocos2d::FadeOutDownTiles *create(float duration, const cocos2d::Size &gridSize)
    cocos2d::FadeOutDownTiles *ret = (cocos2d::FadeOutDownTiles *)cocos2d::FadeOutDownTiles::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOutDownTiles");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_FadeOutDownTiles_new(lua_State *L)
{
    olua_startinvoke(L);

    // FadeOutDownTiles()
    cocos2d::FadeOutDownTiles *ret = (cocos2d::FadeOutDownTiles *)new cocos2d::FadeOutDownTiles();
    int num_ret = olua_push_cppobj(L, ret, "cc.FadeOutDownTiles");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_FadeOutDownTiles(lua_State *L)
{
    oluacls_class(L, "cc.FadeOutDownTiles", "cc.FadeOutUpTiles");
    oluacls_func(L, "__move", _cocos2d_FadeOutDownTiles___move);
    oluacls_func(L, "create", _cocos2d_FadeOutDownTiles_create);
    oluacls_func(L, "new", _cocos2d_FadeOutDownTiles_new);

    olua_registerluatype<cocos2d::FadeOutDownTiles>(L, "cc.FadeOutDownTiles");

    return 1;
}

static int _cocos2d_TurnOffTiles___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TurnOffTiles *)olua_toobj(L, 1, "cc.TurnOffTiles");
    olua_push_cppobj(L, self, "cc.TurnOffTiles");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_TurnOffTiles_create1(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);

    // static cocos2d::TurnOffTiles *create(float duration, const cocos2d::Size &gridSize)
    cocos2d::TurnOffTiles *ret = (cocos2d::TurnOffTiles *)cocos2d::TurnOffTiles::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.TurnOffTiles");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TurnOffTiles_create2(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Unsigned arg3 = 0;       /** seed */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);

    // static cocos2d::TurnOffTiles *create(float duration, const cocos2d::Size &gridSize, unsigned int seed)
    cocos2d::TurnOffTiles *ret = (cocos2d::TurnOffTiles *)cocos2d::TurnOffTiles::create((float)arg1, arg2, (unsigned int)arg3);
    int num_ret = olua_push_cppobj(L, ret, "cc.TurnOffTiles");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TurnOffTiles_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Size(L, 2))) {
            // static cocos2d::TurnOffTiles *create(float duration, const cocos2d::Size &gridSize)
            return _cocos2d_TurnOffTiles_create1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (auto_olua_is_cocos2d_Size(L, 2)) && (olua_is_uint(L, 3))) {
            // static cocos2d::TurnOffTiles *create(float duration, const cocos2d::Size &gridSize, unsigned int seed)
            return _cocos2d_TurnOffTiles_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TurnOffTiles::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TurnOffTiles_new(lua_State *L)
{
    olua_startinvoke(L);

    // TurnOffTiles()
    cocos2d::TurnOffTiles *ret = (cocos2d::TurnOffTiles *)new cocos2d::TurnOffTiles();
    int num_ret = olua_push_cppobj(L, ret, "cc.TurnOffTiles");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_TurnOffTiles_turnOffTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TurnOffTiles *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TurnOffTiles");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void turnOffTile(const cocos2d::Vec2 &pos)
    self->turnOffTile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_TurnOffTiles_turnOnTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TurnOffTiles *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TurnOffTiles");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void turnOnTile(const cocos2d::Vec2 &pos)
    self->turnOnTile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_TurnOffTiles(lua_State *L)
{
    oluacls_class(L, "cc.TurnOffTiles", "cc.TiledGrid3DAction");
    oluacls_func(L, "__move", _cocos2d_TurnOffTiles___move);
    oluacls_func(L, "create", _cocos2d_TurnOffTiles_create);
    oluacls_func(L, "new", _cocos2d_TurnOffTiles_new);
    oluacls_func(L, "turnOffTile", _cocos2d_TurnOffTiles_turnOffTile);
    oluacls_func(L, "turnOnTile", _cocos2d_TurnOffTiles_turnOnTile);

    olua_registerluatype<cocos2d::TurnOffTiles>(L, "cc.TurnOffTiles");

    return 1;
}

static int _cocos2d_WavesTiles3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::WavesTiles3D *)olua_toobj(L, 1, "cc.WavesTiles3D");
    olua_push_cppobj(L, self, "cc.WavesTiles3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_WavesTiles3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Unsigned arg3 = 0;       /** waves */
    lua_Number arg4 = 0;       /** amplitude */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::WavesTiles3D *create(float duration, const cocos2d::Size &gridSize, unsigned int waves, float amplitude)
    cocos2d::WavesTiles3D *ret = (cocos2d::WavesTiles3D *)cocos2d::WavesTiles3D::create((float)arg1, arg2, (unsigned int)arg3, (float)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.WavesTiles3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_WavesTiles3D_getAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::WavesTiles3D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.WavesTiles3D");

    // float getAmplitude()
    float ret = (float)self->getAmplitude();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_WavesTiles3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // WavesTiles3D()
    cocos2d::WavesTiles3D *ret = (cocos2d::WavesTiles3D *)new cocos2d::WavesTiles3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.WavesTiles3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_WavesTiles3D_setAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::WavesTiles3D *self = nullptr;
    lua_Number arg1 = 0;       /** amplitude */

    olua_to_cppobj(L, 1, (void **)&self, "cc.WavesTiles3D");
    olua_check_number(L, 2, &arg1);

    // void setAmplitude(float amplitude)
    self->setAmplitude((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_WavesTiles3D(lua_State *L)
{
    oluacls_class(L, "cc.WavesTiles3D", "cc.TiledGrid3DAction");
    oluacls_func(L, "__move", _cocos2d_WavesTiles3D___move);
    oluacls_func(L, "create", _cocos2d_WavesTiles3D_create);
    oluacls_func(L, "getAmplitude", _cocos2d_WavesTiles3D_getAmplitude);
    oluacls_func(L, "new", _cocos2d_WavesTiles3D_new);
    oluacls_func(L, "setAmplitude", _cocos2d_WavesTiles3D_setAmplitude);
    oluacls_prop(L, "amplitude", _cocos2d_WavesTiles3D_getAmplitude, _cocos2d_WavesTiles3D_setAmplitude);

    olua_registerluatype<cocos2d::WavesTiles3D>(L, "cc.WavesTiles3D");

    return 1;
}

static int _cocos2d_JumpTiles3D___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::JumpTiles3D *)olua_toobj(L, 1, "cc.JumpTiles3D");
    olua_push_cppobj(L, self, "cc.JumpTiles3D");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_JumpTiles3D_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    cocos2d::Size arg2;       /** gridSize */
    lua_Unsigned arg3 = 0;       /** numberOfJumps */
    lua_Number arg4 = 0;       /** amplitude */

    olua_check_number(L, 1, &arg1);
    auto_olua_check_cocos2d_Size(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::JumpTiles3D *create(float duration, const cocos2d::Size &gridSize, unsigned int numberOfJumps, float amplitude)
    cocos2d::JumpTiles3D *ret = (cocos2d::JumpTiles3D *)cocos2d::JumpTiles3D::create((float)arg1, arg2, (unsigned int)arg3, (float)arg4);
    int num_ret = olua_push_cppobj(L, ret, "cc.JumpTiles3D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_JumpTiles3D_getAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::JumpTiles3D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.JumpTiles3D");

    // float getAmplitude()
    float ret = (float)self->getAmplitude();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_JumpTiles3D_new(lua_State *L)
{
    olua_startinvoke(L);

    // JumpTiles3D()
    cocos2d::JumpTiles3D *ret = (cocos2d::JumpTiles3D *)new cocos2d::JumpTiles3D();
    int num_ret = olua_push_cppobj(L, ret, "cc.JumpTiles3D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_JumpTiles3D_setAmplitude(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::JumpTiles3D *self = nullptr;
    lua_Number arg1 = 0;       /** amplitude */

    olua_to_cppobj(L, 1, (void **)&self, "cc.JumpTiles3D");
    olua_check_number(L, 2, &arg1);

    // void setAmplitude(float amplitude)
    self->setAmplitude((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_JumpTiles3D(lua_State *L)
{
    oluacls_class(L, "cc.JumpTiles3D", "cc.TiledGrid3DAction");
    oluacls_func(L, "__move", _cocos2d_JumpTiles3D___move);
    oluacls_func(L, "create", _cocos2d_JumpTiles3D_create);
    oluacls_func(L, "getAmplitude", _cocos2d_JumpTiles3D_getAmplitude);
    oluacls_func(L, "new", _cocos2d_JumpTiles3D_new);
    oluacls_func(L, "setAmplitude", _cocos2d_JumpTiles3D_setAmplitude);
    oluacls_prop(L, "amplitude", _cocos2d_JumpTiles3D_getAmplitude, _cocos2d_JumpTiles3D_setAmplitude);

    olua_registerluatype<cocos2d::JumpTiles3D>(L, "cc.JumpTiles3D");

    return 1;
}

static int _cocos2d_SplitRows___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::SplitRows *)olua_toobj(L, 1, "cc.SplitRows");
    olua_push_cppobj(L, self, "cc.SplitRows");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_SplitRows_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Unsigned arg2 = 0;       /** rows */

    olua_check_number(L, 1, &arg1);
    olua_check_uint(L, 2, &arg2);

    // static cocos2d::SplitRows *create(float duration, unsigned int rows)
    cocos2d::SplitRows *ret = (cocos2d::SplitRows *)cocos2d::SplitRows::create((float)arg1, (unsigned int)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.SplitRows");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SplitRows_new(lua_State *L)
{
    olua_startinvoke(L);

    // SplitRows()
    cocos2d::SplitRows *ret = (cocos2d::SplitRows *)new cocos2d::SplitRows();
    int num_ret = olua_push_cppobj(L, ret, "cc.SplitRows");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_SplitRows(lua_State *L)
{
    oluacls_class(L, "cc.SplitRows", "cc.TiledGrid3DAction");
    oluacls_func(L, "__move", _cocos2d_SplitRows___move);
    oluacls_func(L, "create", _cocos2d_SplitRows_create);
    oluacls_func(L, "new", _cocos2d_SplitRows_new);

    olua_registerluatype<cocos2d::SplitRows>(L, "cc.SplitRows");

    return 1;
}

static int _cocos2d_SplitCols___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::SplitCols *)olua_toobj(L, 1, "cc.SplitCols");
    olua_push_cppobj(L, self, "cc.SplitCols");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_SplitCols_create(lua_State *L)
{
    olua_startinvoke(L);

    lua_Number arg1 = 0;       /** duration */
    lua_Unsigned arg2 = 0;       /** cols */

    olua_check_number(L, 1, &arg1);
    olua_check_uint(L, 2, &arg2);

    // static cocos2d::SplitCols *create(float duration, unsigned int cols)
    cocos2d::SplitCols *ret = (cocos2d::SplitCols *)cocos2d::SplitCols::create((float)arg1, (unsigned int)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.SplitCols");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_SplitCols_new(lua_State *L)
{
    olua_startinvoke(L);

    // SplitCols()
    cocos2d::SplitCols *ret = (cocos2d::SplitCols *)new cocos2d::SplitCols();
    int num_ret = olua_push_cppobj(L, ret, "cc.SplitCols");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_SplitCols(lua_State *L)
{
    oluacls_class(L, "cc.SplitCols", "cc.TiledGrid3DAction");
    oluacls_func(L, "__move", _cocos2d_SplitCols___move);
    oluacls_func(L, "create", _cocos2d_SplitCols_create);
    oluacls_func(L, "new", _cocos2d_SplitCols_new);

    olua_registerluatype<cocos2d::SplitCols>(L, "cc.SplitCols");

    return 1;
}

static int _cocos2d_ParticleBatchNode___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleBatchNode *)olua_toobj(L, 1, "cc.ParticleBatchNode");
    olua_push_cppobj(L, self, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleBatchNode_create1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** fileImage */
    lua_Integer arg2 = 0;       /** capacity */

    olua_check_std_string(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);

    // static cocos2d::ParticleBatchNode *create(const std::string &fileImage, @optional int capacity)
    cocos2d::ParticleBatchNode *ret = (cocos2d::ParticleBatchNode *)cocos2d::ParticleBatchNode::create(arg1, (int)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_create2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** fileImage */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::ParticleBatchNode *create(const std::string &fileImage, @optional int capacity)
    cocos2d::ParticleBatchNode *ret = (cocos2d::ParticleBatchNode *)cocos2d::ParticleBatchNode::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_std_string(L, 1))) {
            // static cocos2d::ParticleBatchNode *create(const std::string &fileImage, @optional int capacity)
            return _cocos2d_ParticleBatchNode_create2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_std_string(L, 1)) && (olua_is_int(L, 2))) {
            // static cocos2d::ParticleBatchNode *create(const std::string &fileImage, @optional int capacity)
            return _cocos2d_ParticleBatchNode_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ParticleBatchNode::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ParticleBatchNode_createWithTexture1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** tex */
    lua_Integer arg2 = 0;       /** capacity */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 2, &arg2);

    // static cocos2d::ParticleBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional int capacity)
    cocos2d::ParticleBatchNode *ret = (cocos2d::ParticleBatchNode *)cocos2d::ParticleBatchNode::createWithTexture(arg1, (int)arg2);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_createWithTexture2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** tex */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");

    // static cocos2d::ParticleBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional int capacity)
    cocos2d::ParticleBatchNode *ret = (cocos2d::ParticleBatchNode *)cocos2d::ParticleBatchNode::createWithTexture(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_createWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_cppobj(L, 1, "cc.Texture2D"))) {
            // static cocos2d::ParticleBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional int capacity)
            return _cocos2d_ParticleBatchNode_createWithTexture2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_cppobj(L, 1, "cc.Texture2D")) && (olua_is_int(L, 2))) {
            // static cocos2d::ParticleBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional int capacity)
            return _cocos2d_ParticleBatchNode_createWithTexture1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ParticleBatchNode::createWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ParticleBatchNode_disableParticle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    lua_Integer arg1 = 0;       /** particleIndex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");
    olua_check_int(L, 2, &arg1);

    // void disableParticle(int particleIndex)
    self->disableParticle((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleBatchNode_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_olua_push_cocos2d_BlendFunc(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture();
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_getTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");

    // cocos2d::TextureAtlas *getTextureAtlas()
    cocos2d::TextureAtlas *ret = (cocos2d::TextureAtlas *)self->getTextureAtlas();
    int num_ret = olua_push_cppobj(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_initWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    std::string arg1;       /** fileImage */
    lua_Integer arg2 = 0;       /** capacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // bool initWithFile(const std::string &fileImage, int capacity)
    bool ret = (bool)self->initWithFile(arg1, (int)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_initWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** tex */
    lua_Integer arg2 = 0;       /** capacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 3, &arg2);

    // bool initWithTexture(cocos2d::Texture2D *tex, int capacity)
    bool ret = (bool)self->initWithTexture(arg1, (int)arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_insertChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::ParticleSystem *arg1 = nullptr;       /** system */
    lua_Integer arg2 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ParticleSystem");
    olua_check_int(L, 3, &arg2);

    // void insertChild(cocos2d::ParticleSystem *system, int index)
    self->insertChild(arg1, (int)arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleBatchNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleBatchNode()
    cocos2d::ParticleBatchNode *ret = (cocos2d::ParticleBatchNode *)new cocos2d::ParticleBatchNode();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleBatchNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleBatchNode_removeChildAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    lua_Integer arg1 = 0;       /** index */
    bool arg2 = false;       /** doCleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");
    olua_check_int(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void removeChildAtIndex(int index, bool doCleanup)
    self->removeChildAtIndex((int)arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleBatchNode_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");
    auto_olua_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleBatchNode_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleBatchNode_setTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::TextureAtlas *arg1 = nullptr;       /** atlas */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleBatchNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextureAtlas");

    // void setTextureAtlas(cocos2d::TextureAtlas *atlas)
    self->setTextureAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ParticleBatchNode(lua_State *L)
{
    oluacls_class(L, "cc.ParticleBatchNode", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_ParticleBatchNode___move);
    oluacls_func(L, "create", _cocos2d_ParticleBatchNode_create);
    oluacls_func(L, "createWithTexture", _cocos2d_ParticleBatchNode_createWithTexture);
    oluacls_func(L, "disableParticle", _cocos2d_ParticleBatchNode_disableParticle);
    oluacls_func(L, "getBlendFunc", _cocos2d_ParticleBatchNode_getBlendFunc);
    oluacls_func(L, "getTexture", _cocos2d_ParticleBatchNode_getTexture);
    oluacls_func(L, "getTextureAtlas", _cocos2d_ParticleBatchNode_getTextureAtlas);
    oluacls_func(L, "initWithFile", _cocos2d_ParticleBatchNode_initWithFile);
    oluacls_func(L, "initWithTexture", _cocos2d_ParticleBatchNode_initWithTexture);
    oluacls_func(L, "insertChild", _cocos2d_ParticleBatchNode_insertChild);
    oluacls_func(L, "new", _cocos2d_ParticleBatchNode_new);
    oluacls_func(L, "removeChildAtIndex", _cocos2d_ParticleBatchNode_removeChildAtIndex);
    oluacls_func(L, "setBlendFunc", _cocos2d_ParticleBatchNode_setBlendFunc);
    oluacls_func(L, "setTexture", _cocos2d_ParticleBatchNode_setTexture);
    oluacls_func(L, "setTextureAtlas", _cocos2d_ParticleBatchNode_setTextureAtlas);
    oluacls_prop(L, "blendFunc", _cocos2d_ParticleBatchNode_getBlendFunc, _cocos2d_ParticleBatchNode_setBlendFunc);
    oluacls_prop(L, "texture", _cocos2d_ParticleBatchNode_getTexture, _cocos2d_ParticleBatchNode_setTexture);
    oluacls_prop(L, "textureAtlas", _cocos2d_ParticleBatchNode_getTextureAtlas, _cocos2d_ParticleBatchNode_setTextureAtlas);

    olua_registerluatype<cocos2d::ParticleBatchNode>(L, "cc.ParticleBatchNode");

    return 1;
}

static int luaopen_cocos2d_ParticleSystem_Mode(lua_State *L)
{
    oluacls_class(L, "cc.ParticleSystem.Mode", nullptr);
    oluacls_const_integer(L, "GRAVITY", (lua_Integer)cocos2d::ParticleSystem::Mode::GRAVITY);
    oluacls_const_integer(L, "RADIUS", (lua_Integer)cocos2d::ParticleSystem::Mode::RADIUS);

    oluacls_asenum(L);

    return 1;
}

static int luaopen_cocos2d_ParticleSystem_PositionType(lua_State *L)
{
    oluacls_class(L, "cc.ParticleSystem.PositionType", nullptr);
    oluacls_const_integer(L, "FREE", (lua_Integer)cocos2d::ParticleSystem::PositionType::FREE);
    oluacls_const_integer(L, "GROUPED", (lua_Integer)cocos2d::ParticleSystem::PositionType::GROUPED);
    oluacls_const_integer(L, "RELATIVE", (lua_Integer)cocos2d::ParticleSystem::PositionType::RELATIVE);

    oluacls_asenum(L);

    return 1;
}

static int _cocos2d_ParticleSystem___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleSystem *)olua_toobj(L, 1, "cc.ParticleSystem");
    olua_push_cppobj(L, self, "cc.ParticleSystem");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleSystem_addParticles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Integer arg1 = 0;       /** count */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_int(L, 2, &arg1);

    // void addParticles(int count)
    self->addParticles((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** plistFile */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::ParticleSystem *create(const std::string &plistFile)
    cocos2d::ParticleSystem *ret = (cocos2d::ParticleSystem *)cocos2d::ParticleSystem::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSystem");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleSystem *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSystem *ret = (cocos2d::ParticleSystem *)cocos2d::ParticleSystem::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSystem");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getAllParticleSystems(lua_State *L)
{
    olua_startinvoke(L);

    // static Vector<cocos2d::ParticleSystem *> &getAllParticleSystems()
    cocos2d::Vector<cocos2d::ParticleSystem *> &ret = (cocos2d::Vector<cocos2d::ParticleSystem *> &)cocos2d::ParticleSystem::getAllParticleSystems();
    int num_ret = manual_olua_push_cocos2d_Vector(L, ret, "cc.ParticleSystem");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getAngle()
    float ret = (float)self->getAngle();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getAngleVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getAngleVar()
    float ret = (float)self->getAngleVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getAtlasIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // int getAtlasIndex()
    int ret = (int)self->getAtlasIndex();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getBatchNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // cocos2d::ParticleBatchNode *getBatchNode()
    cocos2d::ParticleBatchNode *ret = (cocos2d::ParticleBatchNode *)self->getBatchNode();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_olua_push_cocos2d_BlendFunc(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getDuration()
    float ret = (float)self->getDuration();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEmissionRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getEmissionRate()
    float ret = (float)self->getEmissionRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEmitterMode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // cocos2d::ParticleSystem::Mode getEmitterMode()
    cocos2d::ParticleSystem::Mode ret = (cocos2d::ParticleSystem::Mode)self->getEmitterMode();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // const cocos2d::Color4F &getEndColor()
    const cocos2d::Color4F &ret = (const cocos2d::Color4F &)self->getEndColor();
    int num_ret = manual_olua_push_cocos2d_Color4F(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEndColorVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // const cocos2d::Color4F &getEndColorVar()
    const cocos2d::Color4F &ret = (const cocos2d::Color4F &)self->getEndColorVar();
    int num_ret = manual_olua_push_cocos2d_Color4F(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEndRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getEndRadius()
    float ret = (float)self->getEndRadius();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEndRadiusVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getEndRadiusVar()
    float ret = (float)self->getEndRadiusVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEndSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getEndSize()
    float ret = (float)self->getEndSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEndSizeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getEndSizeVar()
    float ret = (float)self->getEndSizeVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEndSpin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getEndSpin()
    float ret = (float)self->getEndSpin();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getEndSpinVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getEndSpinVar()
    float ret = (float)self->getEndSpinVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getGravity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // const cocos2d::Vec2 &getGravity()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getGravity();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getLife(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getLife()
    float ret = (float)self->getLife();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getLifeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getLifeVar()
    float ret = (float)self->getLifeVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getParticleCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // unsigned int getParticleCount()
    unsigned int ret = (unsigned int)self->getParticleCount();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getPosVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // const cocos2d::Vec2 &getPosVar()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPosVar();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getPositionType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // cocos2d::ParticleSystem::PositionType getPositionType()
    cocos2d::ParticleSystem::PositionType ret = (cocos2d::ParticleSystem::PositionType)self->getPositionType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getRadialAccel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getRadialAccel()
    float ret = (float)self->getRadialAccel();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getRadialAccelVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getRadialAccelVar()
    float ret = (float)self->getRadialAccelVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getResourceFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // const std::string &getResourceFile()
    const std::string &ret = (const std::string &)self->getResourceFile();
    int num_ret = olua_push_std_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getRotatePerSecond(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getRotatePerSecond()
    float ret = (float)self->getRotatePerSecond();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getRotatePerSecondVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getRotatePerSecondVar()
    float ret = (float)self->getRotatePerSecondVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getRotationIsDir(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // bool getRotationIsDir()
    bool ret = (bool)self->getRotationIsDir();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getSourcePosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // const cocos2d::Vec2 &getSourcePosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getSourcePosition();
    int num_ret = auto_olua_push_cocos2d_Vec2(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getSpeed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getSpeed()
    float ret = (float)self->getSpeed();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getSpeedVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getSpeedVar()
    float ret = (float)self->getSpeedVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // const cocos2d::Color4F &getStartColor()
    const cocos2d::Color4F &ret = (const cocos2d::Color4F &)self->getStartColor();
    int num_ret = manual_olua_push_cocos2d_Color4F(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getStartColorVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // const cocos2d::Color4F &getStartColorVar()
    const cocos2d::Color4F &ret = (const cocos2d::Color4F &)self->getStartColorVar();
    int num_ret = manual_olua_push_cocos2d_Color4F(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getStartRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getStartRadius()
    float ret = (float)self->getStartRadius();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getStartRadiusVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getStartRadiusVar()
    float ret = (float)self->getStartRadiusVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getStartSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getStartSize()
    float ret = (float)self->getStartSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getStartSizeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getStartSizeVar()
    float ret = (float)self->getStartSizeVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getStartSpin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getStartSpin()
    float ret = (float)self->getStartSpin();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getStartSpinVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getStartSpinVar()
    float ret = (float)self->getStartSpinVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getTangentialAccel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getTangentialAccel()
    float ret = (float)self->getTangentialAccel();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getTangentialAccelVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // float getTangentialAccelVar()
    float ret = (float)self->getTangentialAccelVar();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture();
    int num_ret = olua_push_cppobj(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_getTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // int getTotalParticles()
    int ret = (int)self->getTotalParticles();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_initWithDictionary1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::ValueMap arg1;       /** dictionary */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    manual_olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // bool initWithDictionary(cocos2d::ValueMap &dictionary)
    bool ret = (bool)self->initWithDictionary(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_initWithDictionary2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::ValueMap arg1;       /** dictionary */
    std::string arg2;       /** dirname */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    manual_olua_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool initWithDictionary(cocos2d::ValueMap &dictionary, const std::string &dirname)
    bool ret = (bool)self->initWithDictionary(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_initWithDictionary(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if ((manual_olua_is_cocos2d_ValueMap(L, 2))) {
            // bool initWithDictionary(cocos2d::ValueMap &dictionary)
            return _cocos2d_ParticleSystem_initWithDictionary1(L);
        // }
    }

    if (num_args == 2) {
        // if ((manual_olua_is_cocos2d_ValueMap(L, 2)) && (olua_is_std_string(L, 3))) {
            // bool initWithDictionary(cocos2d::ValueMap &dictionary, const std::string &dirname)
            return _cocos2d_ParticleSystem_initWithDictionary2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ParticleSystem::initWithDictionary' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ParticleSystem_initWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    std::string arg1;       /** plistFile */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_std_string(L, 2, &arg1);

    // bool initWithFile(const std::string &plistFile)
    bool ret = (bool)self->initWithFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_initWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_int(L, 2, &arg1);

    // bool initWithTotalParticles(int numberOfParticles)
    bool ret = (bool)self->initWithTotalParticles((int)arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_isActive(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // bool isActive()
    bool ret = (bool)self->isActive();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_isAutoRemoveOnFinish(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // bool isAutoRemoveOnFinish()
    bool ret = (bool)self->isAutoRemoveOnFinish();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_isBlendAdditive(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // bool isBlendAdditive()
    bool ret = (bool)self->isBlendAdditive();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_isFull(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // bool isFull()
    bool ret = (bool)self->isFull();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_isPaused(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // bool isPaused()
    bool ret = (bool)self->isPaused();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_isSourcePositionCompatible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // bool isSourcePositionCompatible()
    bool ret = (bool)self->isSourcePositionCompatible();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleSystem()
    cocos2d::ParticleSystem *ret = (cocos2d::ParticleSystem *)new cocos2d::ParticleSystem();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSystem");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystem_pauseEmissions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // void pauseEmissions()
    self->pauseEmissions();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_postStep(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // void postStep()
    self->postStep();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_resetSystem(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // void resetSystem()
    self->resetSystem();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_resumeEmissions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // void resumeEmissions()
    self->resumeEmissions();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** angle */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setAngle(float angle)
    self->setAngle((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setAngleVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** angleVar */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setAngleVar(float angleVar)
    self->setAngleVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setAtlasIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Integer arg1 = 0;       /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_int(L, 2, &arg1);

    // void setAtlasIndex(int index)
    self->setAtlasIndex((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setAutoRemoveOnFinish(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    bool arg1 = false;       /** var */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_bool(L, 2, &arg1);

    // void setAutoRemoveOnFinish(bool var)
    self->setAutoRemoveOnFinish(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setBatchNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::ParticleBatchNode *arg1 = nullptr;       /** batchNode */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ParticleBatchNode");

    // void setBatchNode(cocos2d::ParticleBatchNode *batchNode)
    self->setBatchNode(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setBlendAdditive(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_bool(L, 2, &arg1);

    // void setBlendAdditive(bool value)
    self->setBlendAdditive(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    auto_olua_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** duration */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setDuration(float duration)
    self->setDuration((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEmissionRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** rate */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEmissionRate(float rate)
    self->setEmissionRate((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEmitterMode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Unsigned arg1 = 0;       /** mode */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_uint(L, 2, &arg1);

    // void setEmitterMode(cocos2d::ParticleSystem::Mode mode)
    self->setEmitterMode((cocos2d::ParticleSystem::Mode)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    manual_olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setEndColor(const cocos2d::Color4F &color)
    self->setEndColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEndColorVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    manual_olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setEndColorVar(const cocos2d::Color4F &color)
    self->setEndColorVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEndRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** endRadius */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndRadius(float endRadius)
    self->setEndRadius((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEndRadiusVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** endRadiusVar */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndRadiusVar(float endRadiusVar)
    self->setEndRadiusVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEndSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** endSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndSize(float endSize)
    self->setEndSize((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEndSizeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** sizeVar */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndSizeVar(float sizeVar)
    self->setEndSizeVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEndSpin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** endSpin */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndSpin(float endSpin)
    self->setEndSpin((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setEndSpinVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** endSpinVar */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndSpinVar(float endSpinVar)
    self->setEndSpinVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setGravity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Vec2 arg1;       /** g */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setGravity(const cocos2d::Vec2 &g)
    self->setGravity(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setLife(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** life */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setLife(float life)
    self->setLife((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setLifeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** lifeVar */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setLifeVar(float lifeVar)
    self->setLifeVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setPosVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setPosVar(const cocos2d::Vec2 &pos)
    self->setPosVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setPositionType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Unsigned arg1 = 0;       /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_uint(L, 2, &arg1);

    // void setPositionType(cocos2d::ParticleSystem::PositionType type)
    self->setPositionType((cocos2d::ParticleSystem::PositionType)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setRadialAccel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** t */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setRadialAccel(float t)
    self->setRadialAccel((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setRadialAccelVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** t */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setRadialAccelVar(float t)
    self->setRadialAccelVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setRotatePerSecond(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** degrees */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setRotatePerSecond(float degrees)
    self->setRotatePerSecond((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setRotatePerSecondVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** degrees */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setRotatePerSecondVar(float degrees)
    self->setRotatePerSecondVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setRotationIsDir(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    bool arg1 = false;       /** t */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_bool(L, 2, &arg1);

    // void setRotationIsDir(bool t)
    self->setRotationIsDir(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setSourcePosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Vec2 arg1;       /** pos */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    auto_olua_check_cocos2d_Vec2(L, 2, &arg1);

    // void setSourcePosition(const cocos2d::Vec2 &pos)
    self->setSourcePosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setSourcePositionCompatible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    bool arg1 = false;       /** sourcePositionCompatible */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_bool(L, 2, &arg1);

    // void setSourcePositionCompatible(bool sourcePositionCompatible)
    self->setSourcePositionCompatible(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setSpeed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** speed */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setSpeed(float speed)
    self->setSpeed((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setSpeedVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** speed */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setSpeedVar(float speed)
    self->setSpeedVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    manual_olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setStartColor(const cocos2d::Color4F &color)
    self->setStartColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setStartColorVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    manual_olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setStartColorVar(const cocos2d::Color4F &color)
    self->setStartColorVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setStartRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** startRadius */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartRadius(float startRadius)
    self->setStartRadius((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setStartRadiusVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** startRadiusVar */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartRadiusVar(float startRadiusVar)
    self->setStartRadiusVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setStartSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** startSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartSize(float startSize)
    self->setStartSize((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setStartSizeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** sizeVar */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartSizeVar(float sizeVar)
    self->setStartSizeVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setStartSpin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** spin */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartSpin(float spin)
    self->setStartSpin((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setStartSpinVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** pinVar */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartSpinVar(float pinVar)
    self->setStartSpinVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setTangentialAccel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** t */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setTangentialAccel(float t)
    self->setTangentialAccel((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setTangentialAccelVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Number arg1 = 0;       /** t */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setTangentialAccelVar(float t)
    self->setTangentialAccelVar((float)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_setTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    lua_Integer arg1 = 0;       /** totalParticles */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");
    olua_check_int(L, 2, &arg1);

    // void setTotalParticles(int totalParticles)
    self->setTotalParticles((int)arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_start(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // void start()
    self->start();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_stop(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // void stop()
    self->stop();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_stopSystem(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // void stopSystem()
    self->stopSystem();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_updateParticleQuads(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // void updateParticleQuads()
    self->updateParticleQuads();

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystem_updateWithNoTime(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystem");

    // void updateWithNoTime()
    self->updateWithNoTime();

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ParticleSystem(lua_State *L)
{
    oluacls_class(L, "cc.ParticleSystem", "cc.Node");
    oluacls_func(L, "__move", _cocos2d_ParticleSystem___move);
    oluacls_func(L, "addParticles", _cocos2d_ParticleSystem_addParticles);
    oluacls_func(L, "create", _cocos2d_ParticleSystem_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleSystem_createWithTotalParticles);
    oluacls_func(L, "getAllParticleSystems", _cocos2d_ParticleSystem_getAllParticleSystems);
    oluacls_func(L, "getAngle", _cocos2d_ParticleSystem_getAngle);
    oluacls_func(L, "getAngleVar", _cocos2d_ParticleSystem_getAngleVar);
    oluacls_func(L, "getAtlasIndex", _cocos2d_ParticleSystem_getAtlasIndex);
    oluacls_func(L, "getBatchNode", _cocos2d_ParticleSystem_getBatchNode);
    oluacls_func(L, "getBlendFunc", _cocos2d_ParticleSystem_getBlendFunc);
    oluacls_func(L, "getDuration", _cocos2d_ParticleSystem_getDuration);
    oluacls_func(L, "getEmissionRate", _cocos2d_ParticleSystem_getEmissionRate);
    oluacls_func(L, "getEmitterMode", _cocos2d_ParticleSystem_getEmitterMode);
    oluacls_func(L, "getEndColor", _cocos2d_ParticleSystem_getEndColor);
    oluacls_func(L, "getEndColorVar", _cocos2d_ParticleSystem_getEndColorVar);
    oluacls_func(L, "getEndRadius", _cocos2d_ParticleSystem_getEndRadius);
    oluacls_func(L, "getEndRadiusVar", _cocos2d_ParticleSystem_getEndRadiusVar);
    oluacls_func(L, "getEndSize", _cocos2d_ParticleSystem_getEndSize);
    oluacls_func(L, "getEndSizeVar", _cocos2d_ParticleSystem_getEndSizeVar);
    oluacls_func(L, "getEndSpin", _cocos2d_ParticleSystem_getEndSpin);
    oluacls_func(L, "getEndSpinVar", _cocos2d_ParticleSystem_getEndSpinVar);
    oluacls_func(L, "getGravity", _cocos2d_ParticleSystem_getGravity);
    oluacls_func(L, "getLife", _cocos2d_ParticleSystem_getLife);
    oluacls_func(L, "getLifeVar", _cocos2d_ParticleSystem_getLifeVar);
    oluacls_func(L, "getParticleCount", _cocos2d_ParticleSystem_getParticleCount);
    oluacls_func(L, "getPosVar", _cocos2d_ParticleSystem_getPosVar);
    oluacls_func(L, "getPositionType", _cocos2d_ParticleSystem_getPositionType);
    oluacls_func(L, "getRadialAccel", _cocos2d_ParticleSystem_getRadialAccel);
    oluacls_func(L, "getRadialAccelVar", _cocos2d_ParticleSystem_getRadialAccelVar);
    oluacls_func(L, "getResourceFile", _cocos2d_ParticleSystem_getResourceFile);
    oluacls_func(L, "getRotatePerSecond", _cocos2d_ParticleSystem_getRotatePerSecond);
    oluacls_func(L, "getRotatePerSecondVar", _cocos2d_ParticleSystem_getRotatePerSecondVar);
    oluacls_func(L, "getRotationIsDir", _cocos2d_ParticleSystem_getRotationIsDir);
    oluacls_func(L, "getSourcePosition", _cocos2d_ParticleSystem_getSourcePosition);
    oluacls_func(L, "getSpeed", _cocos2d_ParticleSystem_getSpeed);
    oluacls_func(L, "getSpeedVar", _cocos2d_ParticleSystem_getSpeedVar);
    oluacls_func(L, "getStartColor", _cocos2d_ParticleSystem_getStartColor);
    oluacls_func(L, "getStartColorVar", _cocos2d_ParticleSystem_getStartColorVar);
    oluacls_func(L, "getStartRadius", _cocos2d_ParticleSystem_getStartRadius);
    oluacls_func(L, "getStartRadiusVar", _cocos2d_ParticleSystem_getStartRadiusVar);
    oluacls_func(L, "getStartSize", _cocos2d_ParticleSystem_getStartSize);
    oluacls_func(L, "getStartSizeVar", _cocos2d_ParticleSystem_getStartSizeVar);
    oluacls_func(L, "getStartSpin", _cocos2d_ParticleSystem_getStartSpin);
    oluacls_func(L, "getStartSpinVar", _cocos2d_ParticleSystem_getStartSpinVar);
    oluacls_func(L, "getTangentialAccel", _cocos2d_ParticleSystem_getTangentialAccel);
    oluacls_func(L, "getTangentialAccelVar", _cocos2d_ParticleSystem_getTangentialAccelVar);
    oluacls_func(L, "getTexture", _cocos2d_ParticleSystem_getTexture);
    oluacls_func(L, "getTotalParticles", _cocos2d_ParticleSystem_getTotalParticles);
    oluacls_func(L, "initWithDictionary", _cocos2d_ParticleSystem_initWithDictionary);
    oluacls_func(L, "initWithFile", _cocos2d_ParticleSystem_initWithFile);
    oluacls_func(L, "initWithTotalParticles", _cocos2d_ParticleSystem_initWithTotalParticles);
    oluacls_func(L, "isActive", _cocos2d_ParticleSystem_isActive);
    oluacls_func(L, "isAutoRemoveOnFinish", _cocos2d_ParticleSystem_isAutoRemoveOnFinish);
    oluacls_func(L, "isBlendAdditive", _cocos2d_ParticleSystem_isBlendAdditive);
    oluacls_func(L, "isFull", _cocos2d_ParticleSystem_isFull);
    oluacls_func(L, "isPaused", _cocos2d_ParticleSystem_isPaused);
    oluacls_func(L, "isSourcePositionCompatible", _cocos2d_ParticleSystem_isSourcePositionCompatible);
    oluacls_func(L, "new", _cocos2d_ParticleSystem_new);
    oluacls_func(L, "pauseEmissions", _cocos2d_ParticleSystem_pauseEmissions);
    oluacls_func(L, "postStep", _cocos2d_ParticleSystem_postStep);
    oluacls_func(L, "resetSystem", _cocos2d_ParticleSystem_resetSystem);
    oluacls_func(L, "resumeEmissions", _cocos2d_ParticleSystem_resumeEmissions);
    oluacls_func(L, "setAngle", _cocos2d_ParticleSystem_setAngle);
    oluacls_func(L, "setAngleVar", _cocos2d_ParticleSystem_setAngleVar);
    oluacls_func(L, "setAtlasIndex", _cocos2d_ParticleSystem_setAtlasIndex);
    oluacls_func(L, "setAutoRemoveOnFinish", _cocos2d_ParticleSystem_setAutoRemoveOnFinish);
    oluacls_func(L, "setBatchNode", _cocos2d_ParticleSystem_setBatchNode);
    oluacls_func(L, "setBlendAdditive", _cocos2d_ParticleSystem_setBlendAdditive);
    oluacls_func(L, "setBlendFunc", _cocos2d_ParticleSystem_setBlendFunc);
    oluacls_func(L, "setDuration", _cocos2d_ParticleSystem_setDuration);
    oluacls_func(L, "setEmissionRate", _cocos2d_ParticleSystem_setEmissionRate);
    oluacls_func(L, "setEmitterMode", _cocos2d_ParticleSystem_setEmitterMode);
    oluacls_func(L, "setEndColor", _cocos2d_ParticleSystem_setEndColor);
    oluacls_func(L, "setEndColorVar", _cocos2d_ParticleSystem_setEndColorVar);
    oluacls_func(L, "setEndRadius", _cocos2d_ParticleSystem_setEndRadius);
    oluacls_func(L, "setEndRadiusVar", _cocos2d_ParticleSystem_setEndRadiusVar);
    oluacls_func(L, "setEndSize", _cocos2d_ParticleSystem_setEndSize);
    oluacls_func(L, "setEndSizeVar", _cocos2d_ParticleSystem_setEndSizeVar);
    oluacls_func(L, "setEndSpin", _cocos2d_ParticleSystem_setEndSpin);
    oluacls_func(L, "setEndSpinVar", _cocos2d_ParticleSystem_setEndSpinVar);
    oluacls_func(L, "setGravity", _cocos2d_ParticleSystem_setGravity);
    oluacls_func(L, "setLife", _cocos2d_ParticleSystem_setLife);
    oluacls_func(L, "setLifeVar", _cocos2d_ParticleSystem_setLifeVar);
    oluacls_func(L, "setPosVar", _cocos2d_ParticleSystem_setPosVar);
    oluacls_func(L, "setPositionType", _cocos2d_ParticleSystem_setPositionType);
    oluacls_func(L, "setRadialAccel", _cocos2d_ParticleSystem_setRadialAccel);
    oluacls_func(L, "setRadialAccelVar", _cocos2d_ParticleSystem_setRadialAccelVar);
    oluacls_func(L, "setRotatePerSecond", _cocos2d_ParticleSystem_setRotatePerSecond);
    oluacls_func(L, "setRotatePerSecondVar", _cocos2d_ParticleSystem_setRotatePerSecondVar);
    oluacls_func(L, "setRotationIsDir", _cocos2d_ParticleSystem_setRotationIsDir);
    oluacls_func(L, "setSourcePosition", _cocos2d_ParticleSystem_setSourcePosition);
    oluacls_func(L, "setSourcePositionCompatible", _cocos2d_ParticleSystem_setSourcePositionCompatible);
    oluacls_func(L, "setSpeed", _cocos2d_ParticleSystem_setSpeed);
    oluacls_func(L, "setSpeedVar", _cocos2d_ParticleSystem_setSpeedVar);
    oluacls_func(L, "setStartColor", _cocos2d_ParticleSystem_setStartColor);
    oluacls_func(L, "setStartColorVar", _cocos2d_ParticleSystem_setStartColorVar);
    oluacls_func(L, "setStartRadius", _cocos2d_ParticleSystem_setStartRadius);
    oluacls_func(L, "setStartRadiusVar", _cocos2d_ParticleSystem_setStartRadiusVar);
    oluacls_func(L, "setStartSize", _cocos2d_ParticleSystem_setStartSize);
    oluacls_func(L, "setStartSizeVar", _cocos2d_ParticleSystem_setStartSizeVar);
    oluacls_func(L, "setStartSpin", _cocos2d_ParticleSystem_setStartSpin);
    oluacls_func(L, "setStartSpinVar", _cocos2d_ParticleSystem_setStartSpinVar);
    oluacls_func(L, "setTangentialAccel", _cocos2d_ParticleSystem_setTangentialAccel);
    oluacls_func(L, "setTangentialAccelVar", _cocos2d_ParticleSystem_setTangentialAccelVar);
    oluacls_func(L, "setTexture", _cocos2d_ParticleSystem_setTexture);
    oluacls_func(L, "setTotalParticles", _cocos2d_ParticleSystem_setTotalParticles);
    oluacls_func(L, "start", _cocos2d_ParticleSystem_start);
    oluacls_func(L, "stop", _cocos2d_ParticleSystem_stop);
    oluacls_func(L, "stopSystem", _cocos2d_ParticleSystem_stopSystem);
    oluacls_func(L, "updateParticleQuads", _cocos2d_ParticleSystem_updateParticleQuads);
    oluacls_func(L, "updateWithNoTime", _cocos2d_ParticleSystem_updateWithNoTime);
    oluacls_prop(L, "active", _cocos2d_ParticleSystem_isActive, nullptr);
    oluacls_prop(L, "allParticleSystems", _cocos2d_ParticleSystem_getAllParticleSystems, nullptr);
    oluacls_prop(L, "angle", _cocos2d_ParticleSystem_getAngle, _cocos2d_ParticleSystem_setAngle);
    oluacls_prop(L, "angleVar", _cocos2d_ParticleSystem_getAngleVar, _cocos2d_ParticleSystem_setAngleVar);
    oluacls_prop(L, "atlasIndex", _cocos2d_ParticleSystem_getAtlasIndex, _cocos2d_ParticleSystem_setAtlasIndex);
    oluacls_prop(L, "autoRemoveOnFinish", _cocos2d_ParticleSystem_isAutoRemoveOnFinish, _cocos2d_ParticleSystem_setAutoRemoveOnFinish);
    oluacls_prop(L, "batchNode", _cocos2d_ParticleSystem_getBatchNode, _cocos2d_ParticleSystem_setBatchNode);
    oluacls_prop(L, "blendAdditive", _cocos2d_ParticleSystem_isBlendAdditive, _cocos2d_ParticleSystem_setBlendAdditive);
    oluacls_prop(L, "blendFunc", _cocos2d_ParticleSystem_getBlendFunc, _cocos2d_ParticleSystem_setBlendFunc);
    oluacls_prop(L, "duration", _cocos2d_ParticleSystem_getDuration, _cocos2d_ParticleSystem_setDuration);
    oluacls_prop(L, "emissionRate", _cocos2d_ParticleSystem_getEmissionRate, _cocos2d_ParticleSystem_setEmissionRate);
    oluacls_prop(L, "emitterMode", _cocos2d_ParticleSystem_getEmitterMode, _cocos2d_ParticleSystem_setEmitterMode);
    oluacls_prop(L, "endColor", _cocos2d_ParticleSystem_getEndColor, _cocos2d_ParticleSystem_setEndColor);
    oluacls_prop(L, "endColorVar", _cocos2d_ParticleSystem_getEndColorVar, _cocos2d_ParticleSystem_setEndColorVar);
    oluacls_prop(L, "endRadius", _cocos2d_ParticleSystem_getEndRadius, _cocos2d_ParticleSystem_setEndRadius);
    oluacls_prop(L, "endRadiusVar", _cocos2d_ParticleSystem_getEndRadiusVar, _cocos2d_ParticleSystem_setEndRadiusVar);
    oluacls_prop(L, "endSize", _cocos2d_ParticleSystem_getEndSize, _cocos2d_ParticleSystem_setEndSize);
    oluacls_prop(L, "endSizeVar", _cocos2d_ParticleSystem_getEndSizeVar, _cocos2d_ParticleSystem_setEndSizeVar);
    oluacls_prop(L, "endSpin", _cocos2d_ParticleSystem_getEndSpin, _cocos2d_ParticleSystem_setEndSpin);
    oluacls_prop(L, "endSpinVar", _cocos2d_ParticleSystem_getEndSpinVar, _cocos2d_ParticleSystem_setEndSpinVar);
    oluacls_prop(L, "full", _cocos2d_ParticleSystem_isFull, nullptr);
    oluacls_prop(L, "gravity", _cocos2d_ParticleSystem_getGravity, _cocos2d_ParticleSystem_setGravity);
    oluacls_prop(L, "life", _cocos2d_ParticleSystem_getLife, _cocos2d_ParticleSystem_setLife);
    oluacls_prop(L, "lifeVar", _cocos2d_ParticleSystem_getLifeVar, _cocos2d_ParticleSystem_setLifeVar);
    oluacls_prop(L, "particleCount", _cocos2d_ParticleSystem_getParticleCount, nullptr);
    oluacls_prop(L, "paused", _cocos2d_ParticleSystem_isPaused, nullptr);
    oluacls_prop(L, "posVar", _cocos2d_ParticleSystem_getPosVar, _cocos2d_ParticleSystem_setPosVar);
    oluacls_prop(L, "positionType", _cocos2d_ParticleSystem_getPositionType, _cocos2d_ParticleSystem_setPositionType);
    oluacls_prop(L, "radialAccel", _cocos2d_ParticleSystem_getRadialAccel, _cocos2d_ParticleSystem_setRadialAccel);
    oluacls_prop(L, "radialAccelVar", _cocos2d_ParticleSystem_getRadialAccelVar, _cocos2d_ParticleSystem_setRadialAccelVar);
    oluacls_prop(L, "resourceFile", _cocos2d_ParticleSystem_getResourceFile, nullptr);
    oluacls_prop(L, "rotatePerSecond", _cocos2d_ParticleSystem_getRotatePerSecond, _cocos2d_ParticleSystem_setRotatePerSecond);
    oluacls_prop(L, "rotatePerSecondVar", _cocos2d_ParticleSystem_getRotatePerSecondVar, _cocos2d_ParticleSystem_setRotatePerSecondVar);
    oluacls_prop(L, "rotationIsDir", _cocos2d_ParticleSystem_getRotationIsDir, _cocos2d_ParticleSystem_setRotationIsDir);
    oluacls_prop(L, "sourcePosition", _cocos2d_ParticleSystem_getSourcePosition, _cocos2d_ParticleSystem_setSourcePosition);
    oluacls_prop(L, "sourcePositionCompatible", _cocos2d_ParticleSystem_isSourcePositionCompatible, _cocos2d_ParticleSystem_setSourcePositionCompatible);
    oluacls_prop(L, "speed", _cocos2d_ParticleSystem_getSpeed, _cocos2d_ParticleSystem_setSpeed);
    oluacls_prop(L, "speedVar", _cocos2d_ParticleSystem_getSpeedVar, _cocos2d_ParticleSystem_setSpeedVar);
    oluacls_prop(L, "startColor", _cocos2d_ParticleSystem_getStartColor, _cocos2d_ParticleSystem_setStartColor);
    oluacls_prop(L, "startColorVar", _cocos2d_ParticleSystem_getStartColorVar, _cocos2d_ParticleSystem_setStartColorVar);
    oluacls_prop(L, "startRadius", _cocos2d_ParticleSystem_getStartRadius, _cocos2d_ParticleSystem_setStartRadius);
    oluacls_prop(L, "startRadiusVar", _cocos2d_ParticleSystem_getStartRadiusVar, _cocos2d_ParticleSystem_setStartRadiusVar);
    oluacls_prop(L, "startSize", _cocos2d_ParticleSystem_getStartSize, _cocos2d_ParticleSystem_setStartSize);
    oluacls_prop(L, "startSizeVar", _cocos2d_ParticleSystem_getStartSizeVar, _cocos2d_ParticleSystem_setStartSizeVar);
    oluacls_prop(L, "startSpin", _cocos2d_ParticleSystem_getStartSpin, _cocos2d_ParticleSystem_setStartSpin);
    oluacls_prop(L, "startSpinVar", _cocos2d_ParticleSystem_getStartSpinVar, _cocos2d_ParticleSystem_setStartSpinVar);
    oluacls_prop(L, "tangentialAccel", _cocos2d_ParticleSystem_getTangentialAccel, _cocos2d_ParticleSystem_setTangentialAccel);
    oluacls_prop(L, "tangentialAccelVar", _cocos2d_ParticleSystem_getTangentialAccelVar, _cocos2d_ParticleSystem_setTangentialAccelVar);
    oluacls_prop(L, "texture", _cocos2d_ParticleSystem_getTexture, _cocos2d_ParticleSystem_setTexture);
    oluacls_prop(L, "totalParticles", _cocos2d_ParticleSystem_getTotalParticles, _cocos2d_ParticleSystem_setTotalParticles);

    olua_registerluatype<cocos2d::ParticleSystem>(L, "cc.ParticleSystem");

    return 1;
}

static int _cocos2d_ParticleSystemQuad___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleSystemQuad *)olua_toobj(L, 1, "cc.ParticleSystemQuad");
    olua_push_cppobj(L, self, "cc.ParticleSystemQuad");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleSystemQuad_create1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSystemQuad *create()
    cocos2d::ParticleSystemQuad *ret = (cocos2d::ParticleSystemQuad *)cocos2d::ParticleSystemQuad::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSystemQuad");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystemQuad_create2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::ParticleSystemQuad *create(const std::string &filename)
    cocos2d::ParticleSystemQuad *ret = (cocos2d::ParticleSystemQuad *)cocos2d::ParticleSystemQuad::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSystemQuad");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystemQuad_create3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ValueMap arg1;       /** dictionary */

    manual_olua_check_cocos2d_ValueMap(L, 1, &arg1);

    // static cocos2d::ParticleSystemQuad *create(cocos2d::ValueMap &dictionary)
    cocos2d::ParticleSystemQuad *ret = (cocos2d::ParticleSystemQuad *)cocos2d::ParticleSystemQuad::create(arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSystemQuad");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystemQuad_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::ParticleSystemQuad *create()
        return _cocos2d_ParticleSystemQuad_create1(L);
    }

    if (num_args == 1) {
        if ((olua_is_std_string(L, 1))) {
            // static cocos2d::ParticleSystemQuad *create(const std::string &filename)
            return _cocos2d_ParticleSystemQuad_create2(L);
        }

        // if ((manual_olua_is_cocos2d_ValueMap(L, 1))) {
            // static cocos2d::ParticleSystemQuad *create(cocos2d::ValueMap &dictionary)
            return _cocos2d_ParticleSystemQuad_create3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ParticleSystemQuad::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ParticleSystemQuad_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleSystemQuad *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSystemQuad *ret = (cocos2d::ParticleSystemQuad *)cocos2d::ParticleSystemQuad::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSystemQuad");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystemQuad_listenRendererRecreated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystemQuad *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystemQuad");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventCustom");

    // void listenRendererRecreated(cocos2d::EventCustom *event)
    self->listenRendererRecreated(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystemQuad_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleSystemQuad()
    cocos2d::ParticleSystemQuad *ret = (cocos2d::ParticleSystemQuad *)new cocos2d::ParticleSystemQuad();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSystemQuad");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSystemQuad_setDisplayFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystemQuad *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystemQuad");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");

    // void setDisplayFrame(cocos2d::SpriteFrame *spriteFrame)
    self->setDisplayFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _cocos2d_ParticleSystemQuad_setTextureWithRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystemQuad *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ParticleSystemQuad");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    manual_olua_check_cocos2d_Rect(L, 3, &arg2);

    // void setTextureWithRect(cocos2d::Texture2D *texture, const cocos2d::Rect &rect)
    self->setTextureWithRect(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int luaopen_cocos2d_ParticleSystemQuad(lua_State *L)
{
    oluacls_class(L, "cc.ParticleSystemQuad", "cc.ParticleSystem");
    oluacls_func(L, "__move", _cocos2d_ParticleSystemQuad___move);
    oluacls_func(L, "create", _cocos2d_ParticleSystemQuad_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleSystemQuad_createWithTotalParticles);
    oluacls_func(L, "listenRendererRecreated", _cocos2d_ParticleSystemQuad_listenRendererRecreated);
    oluacls_func(L, "new", _cocos2d_ParticleSystemQuad_new);
    oluacls_func(L, "setDisplayFrame", _cocos2d_ParticleSystemQuad_setDisplayFrame);
    oluacls_func(L, "setTextureWithRect", _cocos2d_ParticleSystemQuad_setTextureWithRect);

    olua_registerluatype<cocos2d::ParticleSystemQuad>(L, "cc.ParticleSystemQuad");

    return 1;
}

static int _cocos2d_ParticleExplosion___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleExplosion *)olua_toobj(L, 1, "cc.ParticleExplosion");
    olua_push_cppobj(L, self, "cc.ParticleExplosion");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleExplosion_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleExplosion *create()
    cocos2d::ParticleExplosion *ret = (cocos2d::ParticleExplosion *)cocos2d::ParticleExplosion::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleExplosion");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleExplosion_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleExplosion *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleExplosion *ret = (cocos2d::ParticleExplosion *)cocos2d::ParticleExplosion::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleExplosion");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleExplosion_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleExplosion()
    cocos2d::ParticleExplosion *ret = (cocos2d::ParticleExplosion *)new cocos2d::ParticleExplosion();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleExplosion");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleExplosion(lua_State *L)
{
    oluacls_class(L, "cc.ParticleExplosion", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleExplosion___move);
    oluacls_func(L, "create", _cocos2d_ParticleExplosion_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleExplosion_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleExplosion_new);

    olua_registerluatype<cocos2d::ParticleExplosion>(L, "cc.ParticleExplosion");

    return 1;
}

static int _cocos2d_ParticleFire___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleFire *)olua_toobj(L, 1, "cc.ParticleFire");
    olua_push_cppobj(L, self, "cc.ParticleFire");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleFire_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleFire *create()
    cocos2d::ParticleFire *ret = (cocos2d::ParticleFire *)cocos2d::ParticleFire::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleFire");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleFire_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleFire *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleFire *ret = (cocos2d::ParticleFire *)cocos2d::ParticleFire::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleFire");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleFire_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleFire()
    cocos2d::ParticleFire *ret = (cocos2d::ParticleFire *)new cocos2d::ParticleFire();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleFire");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleFire(lua_State *L)
{
    oluacls_class(L, "cc.ParticleFire", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleFire___move);
    oluacls_func(L, "create", _cocos2d_ParticleFire_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleFire_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleFire_new);

    olua_registerluatype<cocos2d::ParticleFire>(L, "cc.ParticleFire");

    return 1;
}

static int _cocos2d_ParticleFireworks___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleFireworks *)olua_toobj(L, 1, "cc.ParticleFireworks");
    olua_push_cppobj(L, self, "cc.ParticleFireworks");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleFireworks_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleFireworks *create()
    cocos2d::ParticleFireworks *ret = (cocos2d::ParticleFireworks *)cocos2d::ParticleFireworks::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleFireworks");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleFireworks_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleFireworks *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleFireworks *ret = (cocos2d::ParticleFireworks *)cocos2d::ParticleFireworks::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleFireworks");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleFireworks_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleFireworks()
    cocos2d::ParticleFireworks *ret = (cocos2d::ParticleFireworks *)new cocos2d::ParticleFireworks();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleFireworks");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleFireworks(lua_State *L)
{
    oluacls_class(L, "cc.ParticleFireworks", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleFireworks___move);
    oluacls_func(L, "create", _cocos2d_ParticleFireworks_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleFireworks_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleFireworks_new);

    olua_registerluatype<cocos2d::ParticleFireworks>(L, "cc.ParticleFireworks");

    return 1;
}

static int _cocos2d_ParticleFlower___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleFlower *)olua_toobj(L, 1, "cc.ParticleFlower");
    olua_push_cppobj(L, self, "cc.ParticleFlower");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleFlower_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleFlower *create()
    cocos2d::ParticleFlower *ret = (cocos2d::ParticleFlower *)cocos2d::ParticleFlower::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleFlower");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleFlower_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleFlower *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleFlower *ret = (cocos2d::ParticleFlower *)cocos2d::ParticleFlower::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleFlower");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleFlower_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleFlower()
    cocos2d::ParticleFlower *ret = (cocos2d::ParticleFlower *)new cocos2d::ParticleFlower();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleFlower");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleFlower(lua_State *L)
{
    oluacls_class(L, "cc.ParticleFlower", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleFlower___move);
    oluacls_func(L, "create", _cocos2d_ParticleFlower_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleFlower_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleFlower_new);

    olua_registerluatype<cocos2d::ParticleFlower>(L, "cc.ParticleFlower");

    return 1;
}

static int _cocos2d_ParticleGalaxy___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleGalaxy *)olua_toobj(L, 1, "cc.ParticleGalaxy");
    olua_push_cppobj(L, self, "cc.ParticleGalaxy");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleGalaxy_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleGalaxy *create()
    cocos2d::ParticleGalaxy *ret = (cocos2d::ParticleGalaxy *)cocos2d::ParticleGalaxy::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleGalaxy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleGalaxy_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleGalaxy *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleGalaxy *ret = (cocos2d::ParticleGalaxy *)cocos2d::ParticleGalaxy::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleGalaxy");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleGalaxy_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleGalaxy()
    cocos2d::ParticleGalaxy *ret = (cocos2d::ParticleGalaxy *)new cocos2d::ParticleGalaxy();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleGalaxy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleGalaxy(lua_State *L)
{
    oluacls_class(L, "cc.ParticleGalaxy", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleGalaxy___move);
    oluacls_func(L, "create", _cocos2d_ParticleGalaxy_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleGalaxy_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleGalaxy_new);

    olua_registerluatype<cocos2d::ParticleGalaxy>(L, "cc.ParticleGalaxy");

    return 1;
}

static int _cocos2d_ParticleMeteor___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleMeteor *)olua_toobj(L, 1, "cc.ParticleMeteor");
    olua_push_cppobj(L, self, "cc.ParticleMeteor");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleMeteor_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleMeteor *create()
    cocos2d::ParticleMeteor *ret = (cocos2d::ParticleMeteor *)cocos2d::ParticleMeteor::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleMeteor");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleMeteor_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleMeteor *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleMeteor *ret = (cocos2d::ParticleMeteor *)cocos2d::ParticleMeteor::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleMeteor");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleMeteor_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleMeteor()
    cocos2d::ParticleMeteor *ret = (cocos2d::ParticleMeteor *)new cocos2d::ParticleMeteor();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleMeteor");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleMeteor(lua_State *L)
{
    oluacls_class(L, "cc.ParticleMeteor", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleMeteor___move);
    oluacls_func(L, "create", _cocos2d_ParticleMeteor_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleMeteor_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleMeteor_new);

    olua_registerluatype<cocos2d::ParticleMeteor>(L, "cc.ParticleMeteor");

    return 1;
}

static int _cocos2d_ParticleRain___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleRain *)olua_toobj(L, 1, "cc.ParticleRain");
    olua_push_cppobj(L, self, "cc.ParticleRain");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleRain_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleRain *create()
    cocos2d::ParticleRain *ret = (cocos2d::ParticleRain *)cocos2d::ParticleRain::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleRain");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleRain_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleRain *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleRain *ret = (cocos2d::ParticleRain *)cocos2d::ParticleRain::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleRain");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleRain_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleRain()
    cocos2d::ParticleRain *ret = (cocos2d::ParticleRain *)new cocos2d::ParticleRain();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleRain");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleRain(lua_State *L)
{
    oluacls_class(L, "cc.ParticleRain", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleRain___move);
    oluacls_func(L, "create", _cocos2d_ParticleRain_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleRain_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleRain_new);

    olua_registerluatype<cocos2d::ParticleRain>(L, "cc.ParticleRain");

    return 1;
}

static int _cocos2d_ParticleSmoke___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleSmoke *)olua_toobj(L, 1, "cc.ParticleSmoke");
    olua_push_cppobj(L, self, "cc.ParticleSmoke");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleSmoke_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSmoke *create()
    cocos2d::ParticleSmoke *ret = (cocos2d::ParticleSmoke *)cocos2d::ParticleSmoke::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSmoke");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSmoke_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleSmoke *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSmoke *ret = (cocos2d::ParticleSmoke *)cocos2d::ParticleSmoke::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSmoke");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSmoke_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleSmoke()
    cocos2d::ParticleSmoke *ret = (cocos2d::ParticleSmoke *)new cocos2d::ParticleSmoke();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSmoke");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleSmoke(lua_State *L)
{
    oluacls_class(L, "cc.ParticleSmoke", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleSmoke___move);
    oluacls_func(L, "create", _cocos2d_ParticleSmoke_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleSmoke_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleSmoke_new);

    olua_registerluatype<cocos2d::ParticleSmoke>(L, "cc.ParticleSmoke");

    return 1;
}

static int _cocos2d_ParticleSnow___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleSnow *)olua_toobj(L, 1, "cc.ParticleSnow");
    olua_push_cppobj(L, self, "cc.ParticleSnow");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleSnow_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSnow *create()
    cocos2d::ParticleSnow *ret = (cocos2d::ParticleSnow *)cocos2d::ParticleSnow::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSnow");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSnow_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleSnow *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSnow *ret = (cocos2d::ParticleSnow *)cocos2d::ParticleSnow::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSnow");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSnow_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleSnow()
    cocos2d::ParticleSnow *ret = (cocos2d::ParticleSnow *)new cocos2d::ParticleSnow();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSnow");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleSnow(lua_State *L)
{
    oluacls_class(L, "cc.ParticleSnow", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleSnow___move);
    oluacls_func(L, "create", _cocos2d_ParticleSnow_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleSnow_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleSnow_new);

    olua_registerluatype<cocos2d::ParticleSnow>(L, "cc.ParticleSnow");

    return 1;
}

static int _cocos2d_ParticleSpiral___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleSpiral *)olua_toobj(L, 1, "cc.ParticleSpiral");
    olua_push_cppobj(L, self, "cc.ParticleSpiral");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleSpiral_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSpiral *create()
    cocos2d::ParticleSpiral *ret = (cocos2d::ParticleSpiral *)cocos2d::ParticleSpiral::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSpiral");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSpiral_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleSpiral *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSpiral *ret = (cocos2d::ParticleSpiral *)cocos2d::ParticleSpiral::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSpiral");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSpiral_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleSpiral()
    cocos2d::ParticleSpiral *ret = (cocos2d::ParticleSpiral *)new cocos2d::ParticleSpiral();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSpiral");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleSpiral(lua_State *L)
{
    oluacls_class(L, "cc.ParticleSpiral", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleSpiral___move);
    oluacls_func(L, "create", _cocos2d_ParticleSpiral_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleSpiral_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleSpiral_new);

    olua_registerluatype<cocos2d::ParticleSpiral>(L, "cc.ParticleSpiral");

    return 1;
}

static int _cocos2d_ParticleSun___move(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ParticleSun *)olua_toobj(L, 1, "cc.ParticleSun");
    olua_push_cppobj(L, self, "cc.ParticleSun");

    olua_endinvoke(L);

    return 1;
}

static int _cocos2d_ParticleSun_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSun *create()
    cocos2d::ParticleSun *ret = (cocos2d::ParticleSun *)cocos2d::ParticleSun::create();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSun");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSun_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    lua_Integer arg1 = 0;       /** numberOfParticles */

    olua_check_int(L, 1, &arg1);

    // static cocos2d::ParticleSun *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSun *ret = (cocos2d::ParticleSun *)cocos2d::ParticleSun::createWithTotalParticles((int)arg1);
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSun");

    olua_endinvoke(L);

    return num_ret;
}

static int _cocos2d_ParticleSun_new(lua_State *L)
{
    olua_startinvoke(L);

    // ParticleSun()
    cocos2d::ParticleSun *ret = (cocos2d::ParticleSun *)new cocos2d::ParticleSun();
    int num_ret = olua_push_cppobj(L, ret, "cc.ParticleSun");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int luaopen_cocos2d_ParticleSun(lua_State *L)
{
    oluacls_class(L, "cc.ParticleSun", "cc.ParticleSystemQuad");
    oluacls_func(L, "__move", _cocos2d_ParticleSun___move);
    oluacls_func(L, "create", _cocos2d_ParticleSun_create);
    oluacls_func(L, "createWithTotalParticles", _cocos2d_ParticleSun_createWithTotalParticles);
    oluacls_func(L, "new", _cocos2d_ParticleSun_new);

    olua_registerluatype<cocos2d::ParticleSun>(L, "cc.ParticleSun");

    return 1;
}

int luaopen_cocos2d(lua_State *L)
{
    olua_require(L, "cc.UserDefault", luaopen_cocos2d_UserDefault);
    olua_require(L, "cc.Ref", luaopen_cocos2d_Ref);
    olua_require(L, "cc.Acceleration", luaopen_cocos2d_Acceleration);
    olua_require(L, "cc.MATRIX_STACK_TYPE", luaopen_cocos2d_MATRIX_STACK_TYPE);
    olua_require(L, "cc.Director.Projection", luaopen_cocos2d_Director_Projection);
    olua_require(L, "cc.Director", luaopen_cocos2d_Director);
    olua_require(L, "cc.Scheduler", luaopen_cocos2d_Scheduler);
    olua_require(L, "cc.EventDispatcher", luaopen_cocos2d_EventDispatcher);
    olua_require(L, "cc.EventListener.Type", luaopen_cocos2d_EventListener_Type);
    olua_require(L, "cc.EventListener", luaopen_cocos2d_EventListener);
    olua_require(L, "cc.EventListenerTouchOneByOne", luaopen_cocos2d_EventListenerTouchOneByOne);
    olua_require(L, "cc.EventListenerTouchAllAtOnce", luaopen_cocos2d_EventListenerTouchAllAtOnce);
    olua_require(L, "cc.EventListenerCustom", luaopen_cocos2d_EventListenerCustom);
    olua_require(L, "cc.EventListenerKeyboard", luaopen_cocos2d_EventListenerKeyboard);
    olua_require(L, "cc.EventListenerAcceleration", luaopen_cocos2d_EventListenerAcceleration);
    olua_require(L, "cc.EventListenerFocus", luaopen_cocos2d_EventListenerFocus);
    olua_require(L, "cc.EventListenerMouse", luaopen_cocos2d_EventListenerMouse);
    olua_require(L, "cc.Event.Type", luaopen_cocos2d_Event_Type);
    olua_require(L, "cc.Event", luaopen_cocos2d_Event);
    olua_require(L, "cc.EventCustom", luaopen_cocos2d_EventCustom);
    olua_require(L, "cc.EventListenerController", luaopen_cocos2d_EventListenerController);
    olua_require(L, "cc.EventTouch.EventCode", luaopen_cocos2d_EventTouch_EventCode);
    olua_require(L, "cc.EventTouch", luaopen_cocos2d_EventTouch);
    olua_require(L, "cc.EventKeyboard", luaopen_cocos2d_EventKeyboard);
    olua_require(L, "cc.EventAcceleration", luaopen_cocos2d_EventAcceleration);
    olua_require(L, "cc.EventFocus", luaopen_cocos2d_EventFocus);
    olua_require(L, "cc.EventMouse.MouseEventType", luaopen_cocos2d_EventMouse_MouseEventType);
    olua_require(L, "cc.EventMouse.MouseButton", luaopen_cocos2d_EventMouse_MouseButton);
    olua_require(L, "cc.EventMouse", luaopen_cocos2d_EventMouse);
    olua_require(L, "cc.EventKeyboard.KeyCode", luaopen_cocos2d_EventKeyboard_KeyCode);
    olua_require(L, "cc.Touch.DispatchMode", luaopen_cocos2d_Touch_DispatchMode);
    olua_require(L, "cc.EventController.ControllerEventType", luaopen_cocos2d_EventController_ControllerEventType);
    olua_require(L, "cc.EventController", luaopen_cocos2d_EventController);
    olua_require(L, "cc.Touch", luaopen_cocos2d_Touch);
    olua_require(L, "cc.Controller.Key", luaopen_cocos2d_Controller_Key);
    olua_require(L, "cc.Controller", luaopen_cocos2d_Controller);
    olua_require(L, "cc.AudioProfile", luaopen_cocos2d_experimental_AudioProfile);
    olua_require(L, "cc.AudioEngine.AudioState", luaopen_cocos2d_experimental_AudioEngine_AudioState);
    olua_require(L, "cc.AudioEngine", luaopen_cocos2d_experimental_AudioEngine);
    olua_require(L, "cc.SimpleAudioEngine", luaopen_CocosDenshion_SimpleAudioEngine);
    olua_require(L, "cc.ApplicationProtocol.Platform", luaopen_cocos2d_ApplicationProtocol_Platform);
    olua_require(L, "cc.LanguageType", luaopen_cocos2d_LanguageType);
    olua_require(L, "cc.ApplicationProtocol", luaopen_cocos2d_ApplicationProtocol);
    olua_require(L, "cc.Application", luaopen_cocos2d_Application);
    olua_require(L, "cc.Device", luaopen_cocos2d_Device);
    olua_require(L, "cc.ResizableBuffer", luaopen_cocos2d_ResizableBuffer);
    olua_require(L, "cc.FileUtils.Status", luaopen_cocos2d_FileUtils_Status);
    olua_require(L, "cc.FileUtils", luaopen_cocos2d_FileUtils);
    olua_require(L, "cc.ResolutionPolicy", luaopen_ResolutionPolicy);
    olua_require(L, "cc.GLView", luaopen_cocos2d_GLView);
    olua_require(L, "cc.GLViewImpl", luaopen_cocos2d_GLViewImpl);
    olua_require(L, "cc.Image.Format", luaopen_cocos2d_Image_Format);
    olua_require(L, "cc.Image", luaopen_cocos2d_Image);
    olua_require(L, "cc.Renderer", luaopen_cocos2d_Renderer);
    olua_require(L, "cc.VertexAttrib", luaopen_cocos2d_VertexAttrib);
    olua_require(L, "cc.Uniform", luaopen_cocos2d_Uniform);
    olua_require(L, "cc.GLProgram", luaopen_cocos2d_GLProgram);
    olua_require(L, "cc.GLProgramCache", luaopen_cocos2d_GLProgramCache);
    olua_require(L, "cc.GLProgramState", luaopen_cocos2d_GLProgramState);
    olua_require(L, "cc.TextureCache", luaopen_cocos2d_TextureCache);
    olua_require(L, "cc.Texture2D.PixelFormat", luaopen_cocos2d_Texture2D_PixelFormat);
    olua_require(L, "cc.Texture2D", luaopen_cocos2d_Texture2D);
    olua_require(L, "cc.TextureCube", luaopen_cocos2d_TextureCube);
    olua_require(L, "cc.TextureAtlas", luaopen_cocos2d_TextureAtlas);
    olua_require(L, "cc.VRIHeadTracker", luaopen_cocos2d_VRIHeadTracker);
    olua_require(L, "cc.VRIRenderer", luaopen_cocos2d_VRIRenderer);
    olua_require(L, "cc.VRGenericRenderer", luaopen_cocos2d_VRGenericRenderer);
    olua_require(L, "cc.VRGenericHeadTracker", luaopen_cocos2d_VRGenericHeadTracker);
    olua_require(L, "cc.WebSocket.ErrorCode", luaopen_cocos2d_network_WebSocket_ErrorCode);
    olua_require(L, "cc.WebSocket.State", luaopen_cocos2d_network_WebSocket_State);
    olua_require(L, "cc.WebSocket.Delegate", luaopen_cocos2d_network_WebSocket_Delegate);
    olua_require(L, "cc.WebSocket", luaopen_cocos2d_network_WebSocket);
    olua_require(L, "cc.LuaWebSocketDelegate", luaopen_cocos2d_LuaWebSocketDelegate);
    olua_require(L, "cc.ActionManager", luaopen_cocos2d_ActionManager);
    olua_require(L, "cc.Action", luaopen_cocos2d_Action);
    olua_require(L, "cc.FiniteTimeAction", luaopen_cocos2d_FiniteTimeAction);
    olua_require(L, "cc.Speed", luaopen_cocos2d_Speed);
    olua_require(L, "cc.Follow", luaopen_cocos2d_Follow);
    olua_require(L, "cc.tweenfunc", luaopen_cocos2d_tweenfunc);
    olua_require(L, "cc.ActionInterval", luaopen_cocos2d_ActionInterval);
    olua_require(L, "cc.Sequence", luaopen_cocos2d_Sequence);
    olua_require(L, "cc.Repeat", luaopen_cocos2d_Repeat);
    olua_require(L, "cc.RepeatForever", luaopen_cocos2d_RepeatForever);
    olua_require(L, "cc.Spawn", luaopen_cocos2d_Spawn);
    olua_require(L, "cc.RotateTo", luaopen_cocos2d_RotateTo);
    olua_require(L, "cc.RotateBy", luaopen_cocos2d_RotateBy);
    olua_require(L, "cc.MoveBy", luaopen_cocos2d_MoveBy);
    olua_require(L, "cc.MoveTo", luaopen_cocos2d_MoveTo);
    olua_require(L, "cc.SkewTo", luaopen_cocos2d_SkewTo);
    olua_require(L, "cc.SkewBy", luaopen_cocos2d_SkewBy);
    olua_require(L, "cc.ResizeTo", luaopen_cocos2d_ResizeTo);
    olua_require(L, "cc.ResizeBy", luaopen_cocos2d_ResizeBy);
    olua_require(L, "cc.BezierBy", luaopen_cocos2d_BezierBy);
    olua_require(L, "cc.BezierTo", luaopen_cocos2d_BezierTo);
    olua_require(L, "cc.JumpBy", luaopen_cocos2d_JumpBy);
    olua_require(L, "cc.JumpTo", luaopen_cocos2d_JumpTo);
    olua_require(L, "cc.ScaleTo", luaopen_cocos2d_ScaleTo);
    olua_require(L, "cc.ScaleBy", luaopen_cocos2d_ScaleBy);
    olua_require(L, "cc.Blink", luaopen_cocos2d_Blink);
    olua_require(L, "cc.FadeTo", luaopen_cocos2d_FadeTo);
    olua_require(L, "cc.FadeIn", luaopen_cocos2d_FadeIn);
    olua_require(L, "cc.FadeOut", luaopen_cocos2d_FadeOut);
    olua_require(L, "cc.TintTo", luaopen_cocos2d_TintTo);
    olua_require(L, "cc.TintBy", luaopen_cocos2d_TintBy);
    olua_require(L, "cc.DelayTime", luaopen_cocos2d_DelayTime);
    olua_require(L, "cc.ReverseTime", luaopen_cocos2d_ReverseTime);
    olua_require(L, "cc.Animate", luaopen_cocos2d_Animate);
    olua_require(L, "cc.TargetedAction", luaopen_cocos2d_TargetedAction);
    olua_require(L, "cc.ActionFloat", luaopen_cocos2d_ActionFloat);
    olua_require(L, "cc.ProgressTo", luaopen_cocos2d_ProgressTo);
    olua_require(L, "cc.ProgressFromTo", luaopen_cocos2d_ProgressFromTo);
    olua_require(L, "cc.ActionEase", luaopen_cocos2d_ActionEase);
    olua_require(L, "cc.EaseRateAction", luaopen_cocos2d_EaseRateAction);
    olua_require(L, "cc.EaseExponentialIn", luaopen_cocos2d_EaseExponentialIn);
    olua_require(L, "cc.EaseExponentialOut", luaopen_cocos2d_EaseExponentialOut);
    olua_require(L, "cc.EaseExponentialInOut", luaopen_cocos2d_EaseExponentialInOut);
    olua_require(L, "cc.EaseSineIn", luaopen_cocos2d_EaseSineIn);
    olua_require(L, "cc.EaseSineOut", luaopen_cocos2d_EaseSineOut);
    olua_require(L, "cc.EaseSineInOut", luaopen_cocos2d_EaseSineInOut);
    olua_require(L, "cc.EaseBounceIn", luaopen_cocos2d_EaseBounceIn);
    olua_require(L, "cc.EaseBounceOut", luaopen_cocos2d_EaseBounceOut);
    olua_require(L, "cc.EaseBounceInOut", luaopen_cocos2d_EaseBounceInOut);
    olua_require(L, "cc.EaseBackIn", luaopen_cocos2d_EaseBackIn);
    olua_require(L, "cc.EaseBackOut", luaopen_cocos2d_EaseBackOut);
    olua_require(L, "cc.EaseBackInOut", luaopen_cocos2d_EaseBackInOut);
    olua_require(L, "cc.EaseQuadraticActionIn", luaopen_cocos2d_EaseQuadraticActionIn);
    olua_require(L, "cc.EaseQuadraticActionOut", luaopen_cocos2d_EaseQuadraticActionOut);
    olua_require(L, "cc.EaseQuadraticActionInOut", luaopen_cocos2d_EaseQuadraticActionInOut);
    olua_require(L, "cc.EaseQuarticActionIn", luaopen_cocos2d_EaseQuarticActionIn);
    olua_require(L, "cc.EaseQuarticActionOut", luaopen_cocos2d_EaseQuarticActionOut);
    olua_require(L, "cc.EaseQuarticActionInOut", luaopen_cocos2d_EaseQuarticActionInOut);
    olua_require(L, "cc.EaseQuinticActionIn", luaopen_cocos2d_EaseQuinticActionIn);
    olua_require(L, "cc.EaseQuinticActionOut", luaopen_cocos2d_EaseQuinticActionOut);
    olua_require(L, "cc.EaseQuinticActionInOut", luaopen_cocos2d_EaseQuinticActionInOut);
    olua_require(L, "cc.EaseCircleActionIn", luaopen_cocos2d_EaseCircleActionIn);
    olua_require(L, "cc.EaseCircleActionOut", luaopen_cocos2d_EaseCircleActionOut);
    olua_require(L, "cc.EaseCircleActionInOut", luaopen_cocos2d_EaseCircleActionInOut);
    olua_require(L, "cc.EaseCubicActionIn", luaopen_cocos2d_EaseCubicActionIn);
    olua_require(L, "cc.EaseCubicActionOut", luaopen_cocos2d_EaseCubicActionOut);
    olua_require(L, "cc.EaseCubicActionInOut", luaopen_cocos2d_EaseCubicActionInOut);
    olua_require(L, "cc.EaseIn", luaopen_cocos2d_EaseIn);
    olua_require(L, "cc.EaseOut", luaopen_cocos2d_EaseOut);
    olua_require(L, "cc.EaseInOut", luaopen_cocos2d_EaseInOut);
    olua_require(L, "cc.EaseElastic", luaopen_cocos2d_EaseElastic);
    olua_require(L, "cc.EaseElasticIn", luaopen_cocos2d_EaseElasticIn);
    olua_require(L, "cc.EaseElasticOut", luaopen_cocos2d_EaseElasticOut);
    olua_require(L, "cc.EaseElasticInOut", luaopen_cocos2d_EaseElasticInOut);
    olua_require(L, "cc.EaseBezierAction", luaopen_cocos2d_EaseBezierAction);
    olua_require(L, "cc.PointArray", luaopen_cocos2d_PointArray);
    olua_require(L, "cc.CardinalSplineTo", luaopen_cocos2d_CardinalSplineTo);
    olua_require(L, "cc.CardinalSplineBy", luaopen_cocos2d_CardinalSplineBy);
    olua_require(L, "cc.CatmullRomTo", luaopen_cocos2d_CatmullRomTo);
    olua_require(L, "cc.CatmullRomBy", luaopen_cocos2d_CatmullRomBy);
    olua_require(L, "cc.ActionInstant", luaopen_cocos2d_ActionInstant);
    olua_require(L, "cc.Show", luaopen_cocos2d_Show);
    olua_require(L, "cc.Hide", luaopen_cocos2d_Hide);
    olua_require(L, "cc.ToggleVisibility", luaopen_cocos2d_ToggleVisibility);
    olua_require(L, "cc.RemoveSelf", luaopen_cocos2d_RemoveSelf);
    olua_require(L, "cc.FlipX", luaopen_cocos2d_FlipX);
    olua_require(L, "cc.FlipY", luaopen_cocos2d_FlipY);
    olua_require(L, "cc.Place", luaopen_cocos2d_Place);
    olua_require(L, "cc.CallFunc", luaopen_cocos2d_CallFunc);
    olua_require(L, "cc.Component", luaopen_cocos2d_Component);
    olua_require(L, "cc.LuaComponent", luaopen_cocos2d_LuaComponent);
    olua_require(L, "cc.Node", luaopen_cocos2d_Node);
    olua_require(L, "cc.AtlasNode", luaopen_cocos2d_AtlasNode);
    olua_require(L, "cc.ProtectedNode", luaopen_cocos2d_ProtectedNode);
    olua_require(L, "cc.DrawNode", luaopen_cocos2d_DrawNode);
    olua_require(L, "cc.TextHAlignment", luaopen_cocos2d_TextHAlignment);
    olua_require(L, "cc.TextVAlignment", luaopen_cocos2d_TextVAlignment);
    olua_require(L, "cc.GlyphCollection", luaopen_cocos2d_GlyphCollection);
    olua_require(L, "cc.LabelEffect", luaopen_cocos2d_LabelEffect);
    olua_require(L, "cc.Label.LabelType", luaopen_cocos2d_Label_LabelType);
    olua_require(L, "cc.Label.Overflow", luaopen_cocos2d_Label_Overflow);
    olua_require(L, "cc.Label", luaopen_cocos2d_Label);
    olua_require(L, "cc.LabelAtlas", luaopen_cocos2d_LabelAtlas);
    olua_require(L, "cc.FontAtlas", luaopen_cocos2d_FontAtlas);
    olua_require(L, "cc.ClippingRectangleNode", luaopen_cocos2d_ClippingRectangleNode);
    olua_require(L, "cc.RenderTexture", luaopen_cocos2d_RenderTexture);
    olua_require(L, "cc.ProgressTimer.Type", luaopen_cocos2d_ProgressTimer_Type);
    olua_require(L, "cc.ProgressTimer", luaopen_cocos2d_ProgressTimer);
    olua_require(L, "cc.AnimationFrame", luaopen_cocos2d_AnimationFrame);
    olua_require(L, "cc.Animation", luaopen_cocos2d_Animation);
    olua_require(L, "cc.SpriteFrame", luaopen_cocos2d_SpriteFrame);
    olua_require(L, "cc.Sprite", luaopen_cocos2d_Sprite);
    olua_require(L, "cc.SpriteBatchNode", luaopen_cocos2d_SpriteBatchNode);
    olua_require(L, "cc.SpriteFrameCache", luaopen_cocos2d_SpriteFrameCache);
    olua_require(L, "cc.AnimationCache", luaopen_cocos2d_AnimationCache);
    olua_require(L, "cc.Scene", luaopen_cocos2d_Scene);
    olua_require(L, "cc.Layer", luaopen_cocos2d_Layer);
    olua_require(L, "cc.LayerColor", luaopen_cocos2d_LayerColor);
    olua_require(L, "cc.LayerGradient", luaopen_cocos2d_LayerGradient);
    olua_require(L, "cc.LayerRadialGradient", luaopen_cocos2d_LayerRadialGradient);
    olua_require(L, "cc.TransitionScene.Orientation", luaopen_cocos2d_TransitionScene_Orientation);
    olua_require(L, "cc.TransitionScene", luaopen_cocos2d_TransitionScene);
    olua_require(L, "cc.TransitionSceneOriented", luaopen_cocos2d_TransitionSceneOriented);
    olua_require(L, "cc.TransitionRotoZoom", luaopen_cocos2d_TransitionRotoZoom);
    olua_require(L, "cc.TransitionJumpZoom", luaopen_cocos2d_TransitionJumpZoom);
    olua_require(L, "cc.TransitionMoveInL", luaopen_cocos2d_TransitionMoveInL);
    olua_require(L, "cc.TransitionMoveInR", luaopen_cocos2d_TransitionMoveInR);
    olua_require(L, "cc.TransitionMoveInT", luaopen_cocos2d_TransitionMoveInT);
    olua_require(L, "cc.TransitionMoveInB", luaopen_cocos2d_TransitionMoveInB);
    olua_require(L, "cc.TransitionSlideInL", luaopen_cocos2d_TransitionSlideInL);
    olua_require(L, "cc.TransitionSlideInR", luaopen_cocos2d_TransitionSlideInR);
    olua_require(L, "cc.TransitionSlideInB", luaopen_cocos2d_TransitionSlideInB);
    olua_require(L, "cc.TransitionSlideInT", luaopen_cocos2d_TransitionSlideInT);
    olua_require(L, "cc.TransitionShrinkGrow", luaopen_cocos2d_TransitionShrinkGrow);
    olua_require(L, "cc.TransitionFlipX", luaopen_cocos2d_TransitionFlipX);
    olua_require(L, "cc.TransitionFlipY", luaopen_cocos2d_TransitionFlipY);
    olua_require(L, "cc.TransitionFlipAngular", luaopen_cocos2d_TransitionFlipAngular);
    olua_require(L, "cc.TransitionZoomFlipX", luaopen_cocos2d_TransitionZoomFlipX);
    olua_require(L, "cc.TransitionZoomFlipY", luaopen_cocos2d_TransitionZoomFlipY);
    olua_require(L, "cc.TransitionZoomFlipAngular", luaopen_cocos2d_TransitionZoomFlipAngular);
    olua_require(L, "cc.TransitionFade", luaopen_cocos2d_TransitionFade);
    olua_require(L, "cc.TransitionCrossFade", luaopen_cocos2d_TransitionCrossFade);
    olua_require(L, "cc.TransitionTurnOffTiles", luaopen_cocos2d_TransitionTurnOffTiles);
    olua_require(L, "cc.TransitionSplitCols", luaopen_cocos2d_TransitionSplitCols);
    olua_require(L, "cc.TransitionSplitRows", luaopen_cocos2d_TransitionSplitRows);
    olua_require(L, "cc.TransitionFadeTR", luaopen_cocos2d_TransitionFadeTR);
    olua_require(L, "cc.TransitionFadeBL", luaopen_cocos2d_TransitionFadeBL);
    olua_require(L, "cc.TransitionFadeUp", luaopen_cocos2d_TransitionFadeUp);
    olua_require(L, "cc.TransitionFadeDown", luaopen_cocos2d_TransitionFadeDown);
    olua_require(L, "cc.TransitionPageTurn", luaopen_cocos2d_TransitionPageTurn);
    olua_require(L, "cc.TransitionProgress", luaopen_cocos2d_TransitionProgress);
    olua_require(L, "cc.TransitionProgressRadialCCW", luaopen_cocos2d_TransitionProgressRadialCCW);
    olua_require(L, "cc.TransitionProgressRadialCW", luaopen_cocos2d_TransitionProgressRadialCW);
    olua_require(L, "cc.TransitionProgressHorizontal", luaopen_cocos2d_TransitionProgressHorizontal);
    olua_require(L, "cc.TransitionProgressVertical", luaopen_cocos2d_TransitionProgressVertical);
    olua_require(L, "cc.TransitionProgressInOut", luaopen_cocos2d_TransitionProgressInOut);
    olua_require(L, "cc.TransitionProgressOutIn", luaopen_cocos2d_TransitionProgressOutIn);
    olua_require(L, "cc.TextFieldDelegate", luaopen_cocos2d_TextFieldDelegate);
    olua_require(L, "cc.TextFieldTTF", luaopen_cocos2d_TextFieldTTF);
    olua_require(L, "cc.LightType", luaopen_cocos2d_LightType);
    olua_require(L, "cc.LightFlag", luaopen_cocos2d_LightFlag);
    olua_require(L, "cc.BaseLight", luaopen_cocos2d_BaseLight);
    olua_require(L, "cc.DirectionLight", luaopen_cocos2d_DirectionLight);
    olua_require(L, "cc.PointLight", luaopen_cocos2d_PointLight);
    olua_require(L, "cc.SpotLight", luaopen_cocos2d_SpotLight);
    olua_require(L, "cc.AmbientLight", luaopen_cocos2d_AmbientLight);
    olua_require(L, "cc.CameraFlag", luaopen_cocos2d_CameraFlag);
    olua_require(L, "cc.Camera.Type", luaopen_cocos2d_Camera_Type);
    olua_require(L, "cc.Camera", luaopen_cocos2d_Camera);
    olua_require(L, "cc.CameraBackgroundBrush.BrushType", luaopen_cocos2d_CameraBackgroundBrush_BrushType);
    olua_require(L, "cc.CameraBackgroundBrush", luaopen_cocos2d_CameraBackgroundBrush);
    olua_require(L, "cc.CameraBackgroundDepthBrush", luaopen_cocos2d_CameraBackgroundDepthBrush);
    olua_require(L, "cc.CameraBackgroundColorBrush", luaopen_cocos2d_CameraBackgroundColorBrush);
    olua_require(L, "cc.CameraBackgroundSkyBoxBrush", luaopen_cocos2d_CameraBackgroundSkyBoxBrush);
    olua_require(L, "cc.ActionCamera", luaopen_cocos2d_ActionCamera);
    olua_require(L, "cc.OrbitCamera", luaopen_cocos2d_OrbitCamera);
    olua_require(L, "cc.GridBase", luaopen_cocos2d_GridBase);
    olua_require(L, "cc.Grid3D", luaopen_cocos2d_Grid3D);
    olua_require(L, "cc.TiledGrid3D", luaopen_cocos2d_TiledGrid3D);
    olua_require(L, "cc.NodeGrid", luaopen_cocos2d_NodeGrid);
    olua_require(L, "cc.GridAction", luaopen_cocos2d_GridAction);
    olua_require(L, "cc.Grid3DAction", luaopen_cocos2d_Grid3DAction);
    olua_require(L, "cc.TiledGrid3DAction", luaopen_cocos2d_TiledGrid3DAction);
    olua_require(L, "cc.AccelDeccelAmplitude", luaopen_cocos2d_AccelDeccelAmplitude);
    olua_require(L, "cc.AccelAmplitude", luaopen_cocos2d_AccelAmplitude);
    olua_require(L, "cc.DeccelAmplitude", luaopen_cocos2d_DeccelAmplitude);
    olua_require(L, "cc.StopGrid", luaopen_cocos2d_StopGrid);
    olua_require(L, "cc.ReuseGrid", luaopen_cocos2d_ReuseGrid);
    olua_require(L, "cc.Waves3D", luaopen_cocos2d_Waves3D);
    olua_require(L, "cc.FlipX3D", luaopen_cocos2d_FlipX3D);
    olua_require(L, "cc.FlipY3D", luaopen_cocos2d_FlipY3D);
    olua_require(L, "cc.Lens3D", luaopen_cocos2d_Lens3D);
    olua_require(L, "cc.Ripple3D", luaopen_cocos2d_Ripple3D);
    olua_require(L, "cc.Shaky3D", luaopen_cocos2d_Shaky3D);
    olua_require(L, "cc.Liquid", luaopen_cocos2d_Liquid);
    olua_require(L, "cc.Waves", luaopen_cocos2d_Waves);
    olua_require(L, "cc.Twirl", luaopen_cocos2d_Twirl);
    olua_require(L, "cc.PageTurn3D", luaopen_cocos2d_PageTurn3D);
    olua_require(L, "cc.ShakyTiles3D", luaopen_cocos2d_ShakyTiles3D);
    olua_require(L, "cc.ShatteredTiles3D", luaopen_cocos2d_ShatteredTiles3D);
    olua_require(L, "cc.ShuffleTiles", luaopen_cocos2d_ShuffleTiles);
    olua_require(L, "cc.FadeOutTRTiles", luaopen_cocos2d_FadeOutTRTiles);
    olua_require(L, "cc.FadeOutBLTiles", luaopen_cocos2d_FadeOutBLTiles);
    olua_require(L, "cc.FadeOutUpTiles", luaopen_cocos2d_FadeOutUpTiles);
    olua_require(L, "cc.FadeOutDownTiles", luaopen_cocos2d_FadeOutDownTiles);
    olua_require(L, "cc.TurnOffTiles", luaopen_cocos2d_TurnOffTiles);
    olua_require(L, "cc.WavesTiles3D", luaopen_cocos2d_WavesTiles3D);
    olua_require(L, "cc.JumpTiles3D", luaopen_cocos2d_JumpTiles3D);
    olua_require(L, "cc.SplitRows", luaopen_cocos2d_SplitRows);
    olua_require(L, "cc.SplitCols", luaopen_cocos2d_SplitCols);
    olua_require(L, "cc.ParticleBatchNode", luaopen_cocos2d_ParticleBatchNode);
    olua_require(L, "cc.ParticleSystem.Mode", luaopen_cocos2d_ParticleSystem_Mode);
    olua_require(L, "cc.ParticleSystem.PositionType", luaopen_cocos2d_ParticleSystem_PositionType);
    olua_require(L, "cc.ParticleSystem", luaopen_cocos2d_ParticleSystem);
    olua_require(L, "cc.ParticleSystemQuad", luaopen_cocos2d_ParticleSystemQuad);
    olua_require(L, "cc.ParticleExplosion", luaopen_cocos2d_ParticleExplosion);
    olua_require(L, "cc.ParticleFire", luaopen_cocos2d_ParticleFire);
    olua_require(L, "cc.ParticleFireworks", luaopen_cocos2d_ParticleFireworks);
    olua_require(L, "cc.ParticleFlower", luaopen_cocos2d_ParticleFlower);
    olua_require(L, "cc.ParticleGalaxy", luaopen_cocos2d_ParticleGalaxy);
    olua_require(L, "cc.ParticleMeteor", luaopen_cocos2d_ParticleMeteor);
    olua_require(L, "cc.ParticleRain", luaopen_cocos2d_ParticleRain);
    olua_require(L, "cc.ParticleSmoke", luaopen_cocos2d_ParticleSmoke);
    olua_require(L, "cc.ParticleSnow", luaopen_cocos2d_ParticleSnow);
    olua_require(L, "cc.ParticleSpiral", luaopen_cocos2d_ParticleSpiral);
    olua_require(L, "cc.ParticleSun", luaopen_cocos2d_ParticleSun);
    return 0;
}
