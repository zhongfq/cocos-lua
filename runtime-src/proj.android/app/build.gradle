import org.gradle.internal.os.OperatingSystem;

plugins {
    id 'com.android.application'
    // id 'com.huawei.agconnect' @huawei
}

android {
    namespace "com.codetypes.hellolua"
    compileSdk rootProject.ext.compileSdk
    
    defaultConfig {
        applicationId "com.codetypes.hellolua"
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk
        versionCode 100   
        versionName "1.0.0"

        externalNativeBuild {
            cmake {
                targets 'cocoslua'
                arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_CPP_FEATURES=exceptions rtti", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE"
            }
        }

        ndk {
            abiFilters = rootProject.ext.abis
        }

        manifestPlaceholders = [
            CCLUA_PACKAGENAME: applicationId,

            JPUSH_PKGNAME: applicationId,
            JPUSH_APPKEY: "000000000000000000000000",
            JPUSH_CHANNEL: "dev",

            OPPO_APPKEY: "OP-00000000000000000000000000000000",
            OPPO_APPID: "OP-00000000",
            OPPO_APPSECRET: "OP-00000000000000000000000000000000",

            VIVO_APPKEY: "00000000000000000000000000000000",
            VIVO_APPID: "000000000",

            XIAOMI_APPKEY: "MI-0000000000000",
            XIAOMI_APPID: "MI-0000000000000000000",
        ]
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    externalNativeBuild {
        cmake {
            path "../../../CMakeLists.txt"
            version "3.22.1"
        }
    }

    signingConfigs {
       release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            signingConfig signingConfigs.release
        }
    }

    aaptOptions {
        noCompress '.bundle'
    }
}

def compileAssets(path) {
    def tools = file("${projectDir}/../../../tools").getAbsolutePath()
    def script = "build-assets.lua"
    def cmdArgs = [script, path]
    def lua
    if (OperatingSystem.current().isWindows()) {
        lua = "${tools}/lua/lua54/windows/lua.exe"
    } else if (OperatingSystem.current().isMacOsX()) {
        lua = "${tools}/lua/lua54/macos/lua"
    } else {
        lua = "${tools}/lua/lua54/linux/lua"
    }
    println "workingDir: ${tools}/hot-update"
    println "running command: ${lua} ${script} ${path}"
    exec {
        workingDir "${tools}/hot-update"
        executable lua
        args cmdArgs
    }
}

android.applicationVariants.all { variant ->
    if (!project.hasProperty("keep-assets")) {
        def srcAssets = "${projectDir}/../../../assets"
        def destAssets = "${projectDir}/assets"

        delete destAssets

        def targetName = variant.name.capitalize()
        def copyTaskName = "copy${targetName}ResourcesToAssets"
        tasks.register(copyTaskName) {
            doLast {
                copy {
                    from srcAssets
                    into destAssets
                    exclude "builtin.manifest"
                }
                compileAssets(destAssets)
            }
        }
        tasks.getByName("pre${targetName}Build").dependsOn copyTaskName
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':libcocos2dx')
    implementation project(':libcclua')

    implementation project(':plugin-wechat')

    // implementation project(':plugin-alipay')
    // implementation project(':plugin-talkingdata')
    // implementation project(':plugin-huawei')
    // implementation project(':plugin-vivo')
    // implementation project(':plugin-oppo')

    // implementation project(':plugin-jiguang')
    // implementation 'com.huawei.hms:push:4.0.2.300'
    // implementation 'cn.jiguang.sdk.plugin:huawei:4.6.4'
    // implementation 'cn.jiguang.sdk.plugin:oppo:4.6.4'
    // implementation 'cn.jiguang.sdk.plugin:vivo:4.6.4'
    // implementation 'cn.jiguang.sdk.plugin:xiaomi:4.6.4'
}
