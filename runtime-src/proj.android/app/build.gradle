import org.gradle.internal.os.OperatingSystem

apply plugin: 'com.android.application'
apply plugin: 'bugly'

bugly {
    appId = 'c082cf3ca0'
    appKey = 'c332369f-17b2-4f8e-9481-5810319e8c46'
}

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "org.cocos2dx.hellolua"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            if (PROP_BUILD_TYPE == 'ndk-build') {
                ndkBuild {
                    targets 'cocos2dlua'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    arguments '-j' + Runtime.runtime.availableProcessors()

                    def module_paths = [project.file("../../../cocos2d-x").absolutePath,
                                        project.file("../../../cocos2d-x/cocos").absolutePath,
                                        project.file("../../../cocos2d-x/external").absolutePath]
                    if (OperatingSystem.current().isWindows()) {
                        module_paths = module_paths.collect { it.replaceAll('\\\\', '/') }
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    } else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                }
            } else if (PROP_BUILD_TYPE == 'cmake') {
                cmake {
                    arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE"
                    cppFlags "-frtti -fexceptions -fsigned-char"
                }
            }
        }
        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect { it as String })
        }
    }
    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
    }
    externalNativeBuild {
        if (PROP_BUILD_TYPE == 'ndk-build') {
            ndkBuild {
                path "jni/Android.mk"
            }
        } else if (PROP_BUILD_TYPE == 'cmake') {
            cmake {
                path "../../../CMakeLists.txt"
            }
        }
    }
    signingConfigs {

        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }
        debug {
            signingConfig signingConfigs.release
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

def compileAssets(path) {
    def cmdArgs = ["${buildDir}/../../../../tools/bin/lua_wrapper.sh", "../hot-update/build-assets.lua", path]
    println 'running command : ' + cmdArgs.join(' ')
    exec {
        executable "/bin/bash"
        args cmdArgs
    }
}

android.applicationVariants.all { variant ->
    delete "${buildDir}/intermediates/assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        copy {
            from "${buildDir}/../../../../assets"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
            exclude "builtin.manifest"
        }

       compileAssets("${buildDir}/intermediates/assets/${variant.dirName}")

        copy {
            from "${buildDir}/../assets"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':libcocos2dx')
    implementation project(':libxgame')

    implementation 'com.android.support:support-v4:28.0.0'

    implementation project(':plugin-alipay')
    // implementation project(':plugin-talkingdata')
    // implementation project(':plugin-huawei')
    // implementation project(':plugin-vivo')
    // implementation project(':plugin-oppo')
}
